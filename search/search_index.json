{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mega-Linter Mega-Linter analyzes 38 languages , 15 formats , 16 tooling formats , abusive copy-pastes and spelling mistakes in your repository sources, generate reports in several formats , and can even apply formatting and auto-fixes with auto-generated commit or PR , to ensure all your projects are clean, whatever IDE/toolbox are used by their developers ! Why Mega-Linter Projects need to contain clean code, in order to avoid technical debt , who makes evolutive maintenance harder and time consuming . By using code formatters and code linters , you ensure that your code base is easier to read and respects best practices , from the kick-off to each step of the project lifecycle Not all developers have the good habit to use linters in their IDEs, making code reviews harder and longer to process By using Mega-Linter , you ensure that: At each pull request it will automatically analyze all updated code in all languages Reading error logs , developers learn best practices of the language they are using Mega-Linter documentation provides the list of IDE plugins integrating each linter , so developers know which linter and plugins to install Mega-Linter is ready our of the box after a quick setup Formatting and fixes can be automatically applied on the git branch or provided in reports This tool is 100% open-source and free for all uses (personal, professional, public and private repositories) Mega-Linter can run on any CI tool and be run locally : no need to authorize an external application , and your code base never leaves your tooling ecosystem Demo Supported Linters All linters are integrated in the Mega-Linter docker image , which is frequently upgraded with their latest versions Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK PERL perlcritic PERL_PERLCRITIC PHP php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner SALESFORCE_SFDX_SCANNER SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK rstfmt RST_RSTFMT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Home"},{"location":"#mega-linter","text":"Mega-Linter analyzes 38 languages , 15 formats , 16 tooling formats , abusive copy-pastes and spelling mistakes in your repository sources, generate reports in several formats , and can even apply formatting and auto-fixes with auto-generated commit or PR , to ensure all your projects are clean, whatever IDE/toolbox are used by their developers !","title":"Mega-Linter"},{"location":"#why-mega-linter","text":"Projects need to contain clean code, in order to avoid technical debt , who makes evolutive maintenance harder and time consuming . By using code formatters and code linters , you ensure that your code base is easier to read and respects best practices , from the kick-off to each step of the project lifecycle Not all developers have the good habit to use linters in their IDEs, making code reviews harder and longer to process By using Mega-Linter , you ensure that: At each pull request it will automatically analyze all updated code in all languages Reading error logs , developers learn best practices of the language they are using Mega-Linter documentation provides the list of IDE plugins integrating each linter , so developers know which linter and plugins to install Mega-Linter is ready our of the box after a quick setup Formatting and fixes can be automatically applied on the git branch or provided in reports This tool is 100% open-source and free for all uses (personal, professional, public and private repositories) Mega-Linter can run on any CI tool and be run locally : no need to authorize an external application , and your code base never leaves your tooling ecosystem","title":"Why Mega-Linter"},{"location":"#demo","text":"","title":"Demo"},{"location":"#supported-linters","text":"All linters are integrated in the Mega-Linter docker image , which is frequently upgraded with their latest versions","title":"Supported Linters"},{"location":"#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK PERL perlcritic PERL_PERLCRITIC PHP php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner SALESFORCE_SFDX_SCANNER SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT","title":"Languages"},{"location":"#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK rstfmt RST_RSTFMT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT","title":"Tooling formats"},{"location":"#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"CHANGELOG/","text":"Changelog [insiders] (master) Note: Can be used using nvuillam/mega-linter@insiders in your mega-linter.yml file Doc Add docker pulls badge in flavors documentation [4.17.0] 2020-12-18 Core Allow to use remote linters configuration files with LINTER_RULES_PATH Add .jekyll-cache in the list of ignored folders by default Arrange display of Flavor suggestions (text and order) in reporter logs Build Dynamically generate (build.py) the list of flavors in github actions workflows Doc Reorganize online documentation menus Linters Add new linter git_diff to check for git conflicts markers Fix rakudo installation Fix phpstan installation [4.16.0] 2020-12-14 Flavored Mega-Linters Generate lightweight docker images to improve Mega-Linter performances on some language based projects During Mega-Linter run, suggest user to use a flavor and write it in reporters Update descriptor YML files to define flavours Update build.py to create one Dockerfile by Mega-Linter flavour & flavors documentation New GHA workflows to build all flavoured Mega-Linters when pushing in master Fixes Output reporter problems as warnings Do not make Mega-Linter fail in case GitHubStatusReporter fails Doc Rename \"index\" pages into more meaningful labels [4.15.0] 2020-12-13 Add Vue.js linting (eslint-plugin-vue added in dependencies) Configuration parameters changes: Change config setting logic: EXCLUDED_DIRECTORIES is now replacing original directory list instead of extending it Add config setting: ADDITIONAL_EXCLUDED_DIRECTORIES extends EXCLUDED_DIRECTORIES directory list Add config setting: &lt;LINTER_KEY&gt;_FILE_EXTENSIONS to override corresponding value from linter descriptor file Add config setting: &lt;LINTER_KEY&gt;_FILE_NAMES_REGEX to override corresponding value from linter descriptor file Descriptor yaml schema changes: Rename files_names_not_ends_with to file_names_not_ends_with Rename files_names to files_names_regex and change behavior to expect regular expressions in the list. They are applied using full match (i.e. the whole text should match the regular expression) Fix error message from Email Reporter when SMTP password is not set Fix automerge action yml (skip if secrets.PAT is not set) Improve caching of compiled regular expressions Override mkdocs theme to make analytics work CI Auto update linters and documentation: Create update PR only if linter versions has been updated Build and deploy docker images only when it is relevant (not in case of just documentation update for example) [4.14.2] 2020-12-07 Quick fix Github Comment Reporter Reorder linters for reports [4.14.1] 2020-12-07 Fixes Fix python error when File.io does not respond, + harmonize reporter logs [4.14.0] 2020-12-07 Linters Add Salesforce linter: sfdx-scanner Core architecture Allow to call extra commands to build help content [4.13.0] 2020-12-05 Major updates in online documentation generation Reorganize TOC Generate individual pages from README sections and update their internal links targets Open external links in a new browser tab New configuration parameters Allow disabling printing alpaca image to console using PRINT_ALPACA config parameter Support list of additional excluded directory basenames via EXCLUDED_DIRECTORIES configuration parameter New reporters: Email reporter, to send mega-linter reports by mail if smtp server is configured File.io reporter, to access reports with a file.io hyperlink Fixes Fix markdown comments generator when build on Windows Fix terrascan unit test case Run some actions/steps only when PR is from same repository Add comments in markdown generated by build.py Fix boolean variables not taken in account in .mega-linter.yml config file Performance Change way to install linters in Dockerfile (replace FROM ... COPY) by package or sh installation, to reduce the docker build steps from 93 to 87 shellcheck editorconfig-checker dotenv-linter golangci-lint kubeval [4.12.0] 2020-11-29 Performances Update default workflow to get ride of has_updates action (replace by output has_updated_files from mega-linter github action) Avoid duplicate runs in mega-linter.yml template and internal workflows, using skip-duplicate-actions Give a proper name to each internal workflow Fix issue about mkdirs failing [4.11.0] 2020-11-29 Manage parallel processing of linters to improve performances [4.10.1] 2020-11-28 Fallback to default behaviours instead of crashes when git not available mega-linter-runner Allow to send env parameters to mega-linter-runner cli Add examples in documentation Publish mega-linter-runner beta version when pushing in master branch [4.10.0] 2020-11-23 Add link to linters rules index in documentation Remove ANSI color codes from log files Add performances by linter in console log New option SHOW_ELAPSED_TIME , allowing the number of seconds elapsed by linter in reports NPM package Mega-Linter runner runs Mega-Linter locally, using .mega-linter.yml configuration (requires docker installed on your computer) test cases added in CI [4.9.0] 2020-11-23 Core Allow configuration to be defined in a .mega-linter.yml file Linters Add Gherkin (Cucumber language) & gherkin-lint Add RST linter : rst-lint Add RST linter : rstcheck Add RST formatter : rstfmt Activate formatting for BASH_SHFMT Activate formatting for SNAKEMAKE_SNAKEFMT JsCpd: remove copy-paste HTML folder when no abuse copy-paste has been found Logs Store log files as artifacts during test cases Add examples of success and failed linter logs in documentation Remove /tmp/lint and /github/workspace from log files Documentation Add list of supported IDE in each linter documentation Generate GitHub card on linter doc when available Store link preview info during build [4.8.0] 2020-11-17 New reporter: Updated sources [4.7.1] 2020-11-16 Activate auto-fix for Groovy [4.7.0] 2020-11-16 Update markdown-link-check default config Add tip in documentation about .cspell.json generated by Mega-Linter Remove /tmp/lint from logs Improve summary table for linters in project mode (all project linted in one call, not one file by one file) Add Reporters in documentation, with screenshots New Mega-Linter variables to activate/deactivate/configure reporters [4.6.0] 2020-11-13 Automatic build of documentation with mkdocs-material Automatic deployment to https://nvuillam.github.io/mega-linter/ Add markdown-link-check [4.5.0] 2020-11-11 Add Visual Basic .NET language & dotnet-format Refactor removal of arguments for formatters (from custom class to Linter generic class) Perl: lint files with no extension containing Perl shebang Add automerge for PR issues from linter versions updates Fix ignored root files issue [4.4.0] 2020-11-05 Add Python iSort Quick fix \"PR Comment\" reporter (orange light emoji) Refresh fork [4.3.2] 2020-11-04 Add spell checker cspell Add Github Action Workflow to automatically: update linters dependencies rebuild Mega-Linter documentation create a PR with updates Apply fixes performed by linters: User configuration (APPLY_FIXES vars) Descriptors configuration: cli_lint_fix_arg_name set on linter in YML when it can format and/or auto-fix issues Provide fixed files info in reports Test cases for all fixable file types: sample_project_fixes Generate README linters table with column \"Fix\" Provide fix capability in linters docs Update Workflows YMLs to create PR or commit to apply fixes Core Archi: All linters now have a name different than descriptor_id replace calls from os.path.exists to os.path.isfile and os.path.isdir Other: fix Phive install Upgrade linter versions & help [4.0.0] 2020-10-01 Initial version","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#insiders-master","text":"Note: Can be used using nvuillam/mega-linter@insiders in your mega-linter.yml file Doc Add docker pulls badge in flavors documentation","title":"[insiders] (master)"},{"location":"CHANGELOG/#4170-2020-12-18","text":"Core Allow to use remote linters configuration files with LINTER_RULES_PATH Add .jekyll-cache in the list of ignored folders by default Arrange display of Flavor suggestions (text and order) in reporter logs Build Dynamically generate (build.py) the list of flavors in github actions workflows Doc Reorganize online documentation menus Linters Add new linter git_diff to check for git conflicts markers Fix rakudo installation Fix phpstan installation","title":"[4.17.0] 2020-12-18"},{"location":"CHANGELOG/#4160-2020-12-14","text":"Flavored Mega-Linters Generate lightweight docker images to improve Mega-Linter performances on some language based projects During Mega-Linter run, suggest user to use a flavor and write it in reporters Update descriptor YML files to define flavours Update build.py to create one Dockerfile by Mega-Linter flavour & flavors documentation New GHA workflows to build all flavoured Mega-Linters when pushing in master Fixes Output reporter problems as warnings Do not make Mega-Linter fail in case GitHubStatusReporter fails Doc Rename \"index\" pages into more meaningful labels","title":"[4.16.0] 2020-12-14"},{"location":"CHANGELOG/#4150-2020-12-13","text":"Add Vue.js linting (eslint-plugin-vue added in dependencies) Configuration parameters changes: Change config setting logic: EXCLUDED_DIRECTORIES is now replacing original directory list instead of extending it Add config setting: ADDITIONAL_EXCLUDED_DIRECTORIES extends EXCLUDED_DIRECTORIES directory list Add config setting: &lt;LINTER_KEY&gt;_FILE_EXTENSIONS to override corresponding value from linter descriptor file Add config setting: &lt;LINTER_KEY&gt;_FILE_NAMES_REGEX to override corresponding value from linter descriptor file Descriptor yaml schema changes: Rename files_names_not_ends_with to file_names_not_ends_with Rename files_names to files_names_regex and change behavior to expect regular expressions in the list. They are applied using full match (i.e. the whole text should match the regular expression) Fix error message from Email Reporter when SMTP password is not set Fix automerge action yml (skip if secrets.PAT is not set) Improve caching of compiled regular expressions Override mkdocs theme to make analytics work CI Auto update linters and documentation: Create update PR only if linter versions has been updated Build and deploy docker images only when it is relevant (not in case of just documentation update for example)","title":"[4.15.0] 2020-12-13"},{"location":"CHANGELOG/#4142-2020-12-07","text":"Quick fix Github Comment Reporter Reorder linters for reports","title":"[4.14.2] 2020-12-07"},{"location":"CHANGELOG/#4141-2020-12-07","text":"Fixes Fix python error when File.io does not respond, + harmonize reporter logs","title":"[4.14.1] 2020-12-07"},{"location":"CHANGELOG/#4140-2020-12-07","text":"Linters Add Salesforce linter: sfdx-scanner Core architecture Allow to call extra commands to build help content","title":"[4.14.0] 2020-12-07"},{"location":"CHANGELOG/#4130-2020-12-05","text":"Major updates in online documentation generation Reorganize TOC Generate individual pages from README sections and update their internal links targets Open external links in a new browser tab New configuration parameters Allow disabling printing alpaca image to console using PRINT_ALPACA config parameter Support list of additional excluded directory basenames via EXCLUDED_DIRECTORIES configuration parameter New reporters: Email reporter, to send mega-linter reports by mail if smtp server is configured File.io reporter, to access reports with a file.io hyperlink Fixes Fix markdown comments generator when build on Windows Fix terrascan unit test case Run some actions/steps only when PR is from same repository Add comments in markdown generated by build.py Fix boolean variables not taken in account in .mega-linter.yml config file Performance Change way to install linters in Dockerfile (replace FROM ... COPY) by package or sh installation, to reduce the docker build steps from 93 to 87 shellcheck editorconfig-checker dotenv-linter golangci-lint kubeval","title":"[4.13.0] 2020-12-05"},{"location":"CHANGELOG/#4120-2020-11-29","text":"Performances Update default workflow to get ride of has_updates action (replace by output has_updated_files from mega-linter github action) Avoid duplicate runs in mega-linter.yml template and internal workflows, using skip-duplicate-actions Give a proper name to each internal workflow Fix issue about mkdirs failing","title":"[4.12.0] 2020-11-29"},{"location":"CHANGELOG/#4110-2020-11-29","text":"Manage parallel processing of linters to improve performances","title":"[4.11.0] 2020-11-29"},{"location":"CHANGELOG/#4101-2020-11-28","text":"Fallback to default behaviours instead of crashes when git not available mega-linter-runner Allow to send env parameters to mega-linter-runner cli Add examples in documentation Publish mega-linter-runner beta version when pushing in master branch","title":"[4.10.1] 2020-11-28"},{"location":"CHANGELOG/#4100-2020-11-23","text":"Add link to linters rules index in documentation Remove ANSI color codes from log files Add performances by linter in console log New option SHOW_ELAPSED_TIME , allowing the number of seconds elapsed by linter in reports NPM package Mega-Linter runner runs Mega-Linter locally, using .mega-linter.yml configuration (requires docker installed on your computer) test cases added in CI","title":"[4.10.0] 2020-11-23"},{"location":"CHANGELOG/#490-2020-11-23","text":"Core Allow configuration to be defined in a .mega-linter.yml file Linters Add Gherkin (Cucumber language) & gherkin-lint Add RST linter : rst-lint Add RST linter : rstcheck Add RST formatter : rstfmt Activate formatting for BASH_SHFMT Activate formatting for SNAKEMAKE_SNAKEFMT JsCpd: remove copy-paste HTML folder when no abuse copy-paste has been found Logs Store log files as artifacts during test cases Add examples of success and failed linter logs in documentation Remove /tmp/lint and /github/workspace from log files Documentation Add list of supported IDE in each linter documentation Generate GitHub card on linter doc when available Store link preview info during build","title":"[4.9.0] 2020-11-23"},{"location":"CHANGELOG/#480-2020-11-17","text":"New reporter: Updated sources","title":"[4.8.0] 2020-11-17"},{"location":"CHANGELOG/#471-2020-11-16","text":"Activate auto-fix for Groovy","title":"[4.7.1] 2020-11-16"},{"location":"CHANGELOG/#470-2020-11-16","text":"Update markdown-link-check default config Add tip in documentation about .cspell.json generated by Mega-Linter Remove /tmp/lint from logs Improve summary table for linters in project mode (all project linted in one call, not one file by one file) Add Reporters in documentation, with screenshots New Mega-Linter variables to activate/deactivate/configure reporters","title":"[4.7.0] 2020-11-16"},{"location":"CHANGELOG/#460-2020-11-13","text":"Automatic build of documentation with mkdocs-material Automatic deployment to https://nvuillam.github.io/mega-linter/ Add markdown-link-check","title":"[4.6.0] 2020-11-13"},{"location":"CHANGELOG/#450-2020-11-11","text":"Add Visual Basic .NET language & dotnet-format Refactor removal of arguments for formatters (from custom class to Linter generic class) Perl: lint files with no extension containing Perl shebang Add automerge for PR issues from linter versions updates Fix ignored root files issue","title":"[4.5.0] 2020-11-11"},{"location":"CHANGELOG/#440-2020-11-05","text":"Add Python iSort Quick fix \"PR Comment\" reporter (orange light emoji) Refresh fork","title":"[4.4.0] 2020-11-05"},{"location":"CHANGELOG/#432-2020-11-04","text":"Add spell checker cspell Add Github Action Workflow to automatically: update linters dependencies rebuild Mega-Linter documentation create a PR with updates Apply fixes performed by linters: User configuration (APPLY_FIXES vars) Descriptors configuration: cli_lint_fix_arg_name set on linter in YML when it can format and/or auto-fix issues Provide fixed files info in reports Test cases for all fixable file types: sample_project_fixes Generate README linters table with column \"Fix\" Provide fix capability in linters docs Update Workflows YMLs to create PR or commit to apply fixes Core Archi: All linters now have a name different than descriptor_id replace calls from os.path.exists to os.path.isfile and os.path.isdir Other: fix Phive install Upgrade linter versions & help","title":"[4.3.2] 2020-11-04"},{"location":"CHANGELOG/#400-2020-10-01","text":"Initial version","title":"[4.0.0] 2020-10-01"},{"location":"badge/","text":"Badge You can show Mega-Linter status with a badge in your repository README Markdown Format [![Mega-Linter](https://github.com/<OWNER>/<REPOSITORY>/workflows/Mega-Linter/badge.svg?branch=master)](https://nvuillam.github.io/mega-linter) Example [![Mega-Linter](https://github.com/nvuillam/npm-groovy-lint/workflows/Mega-Linter/badge.svg?branch=master)](https://nvuillam.github.io/mega-linter) reStructuredText Format .. |Mega-Linter yes| image:: https://github.com/<OWNER>/<REPOSITORY>/workflows/Mega-Linter/badge.svg?branch=master :target: https://nvuillam.github.io/mega-linter Example .. |Mega-Linter yes| image:: https://github.com/nvuillam/npm-groovy-lint/workflows/Mega-Linter/badge.svg?branch=master :target: https://nvuillam.github.io/mega-linter Note: IF you did not use Mega-Linter as GitHub Action name, please read GitHub Actions Badges documentation","title":"Badge"},{"location":"badge/#badge","text":"You can show Mega-Linter status with a badge in your repository README","title":"Badge"},{"location":"badge/#markdown","text":"Format [![Mega-Linter](https://github.com/<OWNER>/<REPOSITORY>/workflows/Mega-Linter/badge.svg?branch=master)](https://nvuillam.github.io/mega-linter) Example [![Mega-Linter](https://github.com/nvuillam/npm-groovy-lint/workflows/Mega-Linter/badge.svg?branch=master)](https://nvuillam.github.io/mega-linter)","title":"Markdown"},{"location":"badge/#restructuredtext","text":"Format .. |Mega-Linter yes| image:: https://github.com/<OWNER>/<REPOSITORY>/workflows/Mega-Linter/badge.svg?branch=master :target: https://nvuillam.github.io/mega-linter Example .. |Mega-Linter yes| image:: https://github.com/nvuillam/npm-groovy-lint/workflows/Mega-Linter/badge.svg?branch=master :target: https://nvuillam.github.io/mega-linter Note: IF you did not use Mega-Linter as GitHub Action name, please read GitHub Actions Badges documentation","title":"reStructuredText"},{"location":"configuration/","text":"Configuration Mega-Linter configuration variables can be defined with environment variables or in a .mega-linter.yml file at the root of the repository. You can see an example config file in this repo: .mega-linter.yml Activation and deactivation Mega-Linter have all linters enabled by default, but allows to enable only some, or disable only some If ENABLE is not set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default If ENABLE_LINTERS is set, only listed linters will be processed If DISABLE is set, the linters in the listed descriptors will be skipped If DISABLE_LINTERS is set, the listed linters will be skipped Examples: Run all javascript and groovy linters except STANDARD javascript linter ENABLE: JAVASCRIPT,GROOVY DISABLE_LINTERS: JAVSCRIPT_STANDARD Run all linters except PHP linters (PHP_BUILTIN, PHP_PCPCS, PHP_STAN, PHP_PSALM) DISABLE: PHP Run all linters except PHP_STAN and PHP_PSALM linters DISABLE_LINTERS: PHP_STAN,PHP_PSALM Apply fixes Mega-linter is able to apply fixes provided by linters. To use this capability, you need 3 env variables defined at top level APPLY_FIXES : all to apply fixes of all linters, or a list of linter keys (ex: JAVASCRIPT_ES , MARKDOWN_MARKDOWNLINT ) APPLY_FIXES_EVENT : all , push , pull_request , none (use none in case of use of Updated sources reporter ) APPLY_FIXES_MODE : commit to create a new commit and push it on the same branch, or pull_request to create a new PR targeting the branch. Notes: You can use Updated sources reporter if you do not want fixes to be automatically applied on git branch, but download them in a zipped file and manually extract them in your project If used, APPLY_FIXES_EVENT and APPLY_FIXES_MODE can not be defined in .mega-linter.yml config file, they must be set as environment variables If you use APPLY_FIXES , add the following line in your .gitignore file report/ You may see github permission errors , or workflows not run on the new commit. To solve these issues: Create Personal Access Token , then copy the PAT value Define secret variable named PAT on your repository, and paste the PAT value Shared variables ENV VAR Default Value Notes ADDITIONAL_EXCLUDED_DIRECTORIES [] List of additional excluded directory basenames. They are excluded at any nested level. DEFAULT_BRANCH master The name of the repository default branch. Warning: In new github repositories, master branch is named main , so you need to override this value with main DEFAULT_WORKSPACE /tmp/lint The location containing files to lint if you are running locally. DISABLE_ERRORS false Flag to have the linter complete with exit code 0 even if errors were detected. EXCLUDED_DIRECTORIES [...many values...] List of excluded directory basenames. They are excluded at any nested level. FILTER_REGEX_EXCLUDE none Regular expression defining which files will be excluded from linting (ex: .*src/test.* ) FILTER_REGEX_INCLUDE all Regular expression defining which files will be processed by linters (ex: .*src/.* ) FLAVOR_SUGGESTIONS true Provides suggestions about different Mega-Linter flavors to use to improve runtime performances GITHUB_WORKSPACE `` Base directory for REPORT_OUTPUT_FOLDER , for user-defined linter rules location, for location of linted files if DEFAULT_WORKSPACE is not set LINTER_RULES_PATH .github/linters Directory for all linter configuration rules. Can be a local folder or a remote URL (ex: https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules ) LOG_FILE mega-linter.log The file name for outputting logs. All output is sent to the log file regardless of LOG_LEVEL . LOG_LEVEL INFO How much output the script will generate to the console. One of INFO , DEBUG , WARNING or ERROR . OUTPUT_FOLDER report The location where the output reporting will be generated to. PARALLEL true Process linters in parallel to improve overall Mega-Linter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files PRINT_ALPACA true Enable printing alpaca image to console REPORT_OUTPUT_FOLDER ${GITHUB_WORKSPACE}/report Directory for generating report files SHOW_ELAPSED_TIME false Displays elapsed time in reports VALIDATE_ALL_CODEBASE true Will parse the entire repository and find all files to validate across all types. NOTE: When set to false , only new or edited files will be parsed for validation. Filter linted files If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE You can apply filters to a single linter by defining variable <LINTER_KEY>_FILTER_REGEX_INCLUDE and <LINTER_KEY>_FILTER_REGEX_EXCLUDE Examples: Lint only src folder: FILTER_REGEX_INCLUDE: (src/) Do not lint files inside test and example folders: FILTER_REGEX_EXCLUDE: (test/|examples/) Do not lint javascript files inside test folder: FILTER_REGEX_EXCLUDE: (test/.*\\.js) Linter specific variables See linters specific variables in their Mega-Linter documentation Template rules files You can use the Mega-Linter with or without your own personal rules sets. This allows for greater flexibility for each individual code base. The Template rules all try to follow the standards we believe should be enabled at the basic level. Copy any or all template rules files from TEMPLATES/ into your repository in the location: .github/linters/ of your repository If your repository does not have rules files, they will fall back to defaults in this repository's TEMPLATE folder , or to linter defaults","title":"Configuration"},{"location":"configuration/#configuration","text":"Mega-Linter configuration variables can be defined with environment variables or in a .mega-linter.yml file at the root of the repository. You can see an example config file in this repo: .mega-linter.yml","title":"Configuration"},{"location":"configuration/#activation-and-deactivation","text":"Mega-Linter have all linters enabled by default, but allows to enable only some, or disable only some If ENABLE is not set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default If ENABLE_LINTERS is set, only listed linters will be processed If DISABLE is set, the linters in the listed descriptors will be skipped If DISABLE_LINTERS is set, the listed linters will be skipped Examples: Run all javascript and groovy linters except STANDARD javascript linter ENABLE: JAVASCRIPT,GROOVY DISABLE_LINTERS: JAVSCRIPT_STANDARD Run all linters except PHP linters (PHP_BUILTIN, PHP_PCPCS, PHP_STAN, PHP_PSALM) DISABLE: PHP Run all linters except PHP_STAN and PHP_PSALM linters DISABLE_LINTERS: PHP_STAN,PHP_PSALM","title":"Activation and deactivation"},{"location":"configuration/#apply-fixes","text":"Mega-linter is able to apply fixes provided by linters. To use this capability, you need 3 env variables defined at top level APPLY_FIXES : all to apply fixes of all linters, or a list of linter keys (ex: JAVASCRIPT_ES , MARKDOWN_MARKDOWNLINT ) APPLY_FIXES_EVENT : all , push , pull_request , none (use none in case of use of Updated sources reporter ) APPLY_FIXES_MODE : commit to create a new commit and push it on the same branch, or pull_request to create a new PR targeting the branch. Notes: You can use Updated sources reporter if you do not want fixes to be automatically applied on git branch, but download them in a zipped file and manually extract them in your project If used, APPLY_FIXES_EVENT and APPLY_FIXES_MODE can not be defined in .mega-linter.yml config file, they must be set as environment variables If you use APPLY_FIXES , add the following line in your .gitignore file report/ You may see github permission errors , or workflows not run on the new commit. To solve these issues: Create Personal Access Token , then copy the PAT value Define secret variable named PAT on your repository, and paste the PAT value","title":"Apply fixes"},{"location":"configuration/#shared-variables","text":"ENV VAR Default Value Notes ADDITIONAL_EXCLUDED_DIRECTORIES [] List of additional excluded directory basenames. They are excluded at any nested level. DEFAULT_BRANCH master The name of the repository default branch. Warning: In new github repositories, master branch is named main , so you need to override this value with main DEFAULT_WORKSPACE /tmp/lint The location containing files to lint if you are running locally. DISABLE_ERRORS false Flag to have the linter complete with exit code 0 even if errors were detected. EXCLUDED_DIRECTORIES [...many values...] List of excluded directory basenames. They are excluded at any nested level. FILTER_REGEX_EXCLUDE none Regular expression defining which files will be excluded from linting (ex: .*src/test.* ) FILTER_REGEX_INCLUDE all Regular expression defining which files will be processed by linters (ex: .*src/.* ) FLAVOR_SUGGESTIONS true Provides suggestions about different Mega-Linter flavors to use to improve runtime performances GITHUB_WORKSPACE `` Base directory for REPORT_OUTPUT_FOLDER , for user-defined linter rules location, for location of linted files if DEFAULT_WORKSPACE is not set LINTER_RULES_PATH .github/linters Directory for all linter configuration rules. Can be a local folder or a remote URL (ex: https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules ) LOG_FILE mega-linter.log The file name for outputting logs. All output is sent to the log file regardless of LOG_LEVEL . LOG_LEVEL INFO How much output the script will generate to the console. One of INFO , DEBUG , WARNING or ERROR . OUTPUT_FOLDER report The location where the output reporting will be generated to. PARALLEL true Process linters in parallel to improve overall Mega-Linter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files PRINT_ALPACA true Enable printing alpaca image to console REPORT_OUTPUT_FOLDER ${GITHUB_WORKSPACE}/report Directory for generating report files SHOW_ELAPSED_TIME false Displays elapsed time in reports VALIDATE_ALL_CODEBASE true Will parse the entire repository and find all files to validate across all types. NOTE: When set to false , only new or edited files will be parsed for validation.","title":"Shared variables"},{"location":"configuration/#filter-linted-files","text":"If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE You can apply filters to a single linter by defining variable <LINTER_KEY>_FILTER_REGEX_INCLUDE and <LINTER_KEY>_FILTER_REGEX_EXCLUDE Examples: Lint only src folder: FILTER_REGEX_INCLUDE: (src/) Do not lint files inside test and example folders: FILTER_REGEX_EXCLUDE: (test/|examples/) Do not lint javascript files inside test folder: FILTER_REGEX_EXCLUDE: (test/.*\\.js)","title":"Filter linted files"},{"location":"configuration/#linter-specific-variables","text":"See linters specific variables in their Mega-Linter documentation","title":"Linter specific variables"},{"location":"configuration/#template-rules-files","text":"You can use the Mega-Linter with or without your own personal rules sets. This allows for greater flexibility for each individual code base. The Template rules all try to follow the standards we believe should be enabled at the basic level. Copy any or all template rules files from TEMPLATES/ into your repository in the location: .github/linters/ of your repository If your repository does not have rules files, they will fall back to defaults in this repository's TEMPLATE folder , or to linter defaults","title":"Template rules files"},{"location":"demo/","text":"Demo","title":"Demo"},{"location":"demo/#demo","text":"","title":"Demo"},{"location":"descriptor-schema/","text":"Mega-Linter descriptor Descriptor definition for mega-linter Properties descriptor_id - Descriptor unique identifier - Uppercase unique identifier for the language, tooling format or identifier - Type: string - Example values: 1. \"PYTHON\" 2. \"XML\" 3. \"OPENAPI\" descriptor_type - Descriptor type - Descriptor type: language, format or tooling format - Type: string - Example values: 1. \"language\" 2. \"format\" 3. \"tooling_format\" - The value is restricted to the following: 1. \"language\" 2. \"format\" 3. \"tooling_format\" file_extensions - Allowed file extensions - File extension filters. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files. Can be overridden at linter level - Type: array - Example values: 1. .py 2. - Default: - Items - Type: string file_names_regex - File name regex filters - Regular expression list for filtering files by their base names using regex full match. Empty list includes all files. Can be overridden at linter level - Type: array - Example values: 1. Dockerfile(-.+)? 2. Jenkinsfile - Default: ` - **_Items_** - Type: string` file_contains_regex - File content regex filters - Regular expression list for filtering files by their content - Type: array - Example values: 1. AWSTemplateFormatVersion 2. (AWS|Alexa|Custom):: - Default: ` - **_Items_** - Type: string` files_sub_directory - Files sub-directory - Set when a linter only lints a sub-directory - Type: string - Example values: 1. ansible 2. kubernetes file_names_not_ends_with - Filter on end of file name - List of strings to filter the files according to their end of file name - Type: array - Example values: 1. vault.yml 2. galaxy.xml - Default: ` - **_Items_** - Type: string` test_folder - Test folder in .automation/ - Test folder containing _good and bad files. Default: lowercase(descriptor_id)_ - Type: string - Example values: 1. bash_shfmt 2. terraform_terrascan linters required - List of linters - List of linter definitions associated to the descriptor - Type: array - Items - Linter definition - Parameters defining behaviour and installation of a linter - Type: object - Properties - linter_name required - Linter name - Name of the linter (same as cli command if possible) - Type: string - Example values: 1. \"eslint\" - name - Linter configuration key - When several linters in a descriptor, set a different name that will be used for configuration - Type: string - Example values: 1. \"JAVASCRIPT_ES\" - linter_url required - Linter URL - URL of the linter home page - Type: string - Example values: 1. \"https://eslint.org\" - linter_banner_image_url - Linter banner image URL - URL of an image used to build header of linter Markdown documentation - Type: string - Example values: 1. \"https://github.com/stylelint/stylelint/raw/master/identity/stylelint-icon-and-text-white.png\" - linter_image_url - Linter image URL - URL of an image used in linter Markdown documentation - Type: string - Example values: 1. \"https://raku.org/camelia-logo.png\" - config_file_name - Default file name for the linter configuration file - An explanation about the purpose of this instance. - Type: string - Example values: 1. \".eslintrc.yml\" 2. \".markdown-lint.yml\" 3. \".python-black\" - cli_config_extra_args - Additional CLI arguments when config file is used - When a configuration file is used with the linter CLI, send these additional arguments - Type: array - Example values: 1. --no-eslintrc 2. --no-ignore - Default: ` - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/examples\">examples</b> required - Linter CLI commands examples - _Please add an example with and without configuration file in the command. They will appear in documentation_ - Type: array - Example values: 1. golangci-lint run myfile.go,golangci-lint run -c .golangci.yml myfile.go 2. eslint myfile.js,eslint -c .eslintrc.yml --no-eslintrc --no-ignore myfile.js - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install\">install</b> required - Installation requirements - _List of apk, dockerfile instructions, npm/pip/gem packages required to install the linter_ - Type: object - **_Properties_** - <b id=\"/properties/linters/items/properties/install/properties/dockerfile\">dockerfile</b> - List of Dockerfile instructions packages - _Will be automatically integrated in generated Dockerfile_ - Type: array - Example values: 1. FROM accurics/terrascan:d182f1c as terrascan 2. COPY --from=terrascan /go/bin/terrascan /usr/bin/ 3. RUN terrascan init - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/apk\">apk</b> - List of APK packages (Linux) - _APK packages identifiers (with or without version)_ - Type: array - Example values: 1. perl 2. perl-dev - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/npm\">npm</b> - List of NPM packages (Node.js) - _NPM packages identifiers (with or without version)_ - Type: array - Example values: 1. eslint 2. eslint-config-airbnb@3.2.1 - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/gem\">gem</b> - List of GEM packages (Ruby) - _GEM packages identifiers (with or without version)_ - Type: array - Example values: 1. rubocop:0.82.0 2. rubocop-github:0.16.0 3. rubocop-performance - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/pip\">pip</b> - List of PIP packages (Python) - _PIP packages identifiers (with or without version)_ - Type: array - Example values: 1. flake8 - **_Items_** - Type: string`","title":"Descriptor schema"},{"location":"descriptor-schema/#mega-linter-descriptor","text":"Descriptor definition for mega-linter Properties descriptor_id - Descriptor unique identifier - Uppercase unique identifier for the language, tooling format or identifier - Type: string - Example values: 1. \"PYTHON\" 2. \"XML\" 3. \"OPENAPI\" descriptor_type - Descriptor type - Descriptor type: language, format or tooling format - Type: string - Example values: 1. \"language\" 2. \"format\" 3. \"tooling_format\" - The value is restricted to the following: 1. \"language\" 2. \"format\" 3. \"tooling_format\" file_extensions - Allowed file extensions - File extension filters. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files. Can be overridden at linter level - Type: array - Example values: 1. .py 2. - Default: - Items - Type: string file_names_regex - File name regex filters - Regular expression list for filtering files by their base names using regex full match. Empty list includes all files. Can be overridden at linter level - Type: array - Example values: 1. Dockerfile(-.+)? 2. Jenkinsfile - Default: ` - **_Items_** - Type: string` file_contains_regex - File content regex filters - Regular expression list for filtering files by their content - Type: array - Example values: 1. AWSTemplateFormatVersion 2. (AWS|Alexa|Custom):: - Default: ` - **_Items_** - Type: string` files_sub_directory - Files sub-directory - Set when a linter only lints a sub-directory - Type: string - Example values: 1. ansible 2. kubernetes file_names_not_ends_with - Filter on end of file name - List of strings to filter the files according to their end of file name - Type: array - Example values: 1. vault.yml 2. galaxy.xml - Default: ` - **_Items_** - Type: string` test_folder - Test folder in .automation/ - Test folder containing _good and bad files. Default: lowercase(descriptor_id)_ - Type: string - Example values: 1. bash_shfmt 2. terraform_terrascan linters required - List of linters - List of linter definitions associated to the descriptor - Type: array - Items - Linter definition - Parameters defining behaviour and installation of a linter - Type: object - Properties - linter_name required - Linter name - Name of the linter (same as cli command if possible) - Type: string - Example values: 1. \"eslint\" - name - Linter configuration key - When several linters in a descriptor, set a different name that will be used for configuration - Type: string - Example values: 1. \"JAVASCRIPT_ES\" - linter_url required - Linter URL - URL of the linter home page - Type: string - Example values: 1. \"https://eslint.org\" - linter_banner_image_url - Linter banner image URL - URL of an image used to build header of linter Markdown documentation - Type: string - Example values: 1. \"https://github.com/stylelint/stylelint/raw/master/identity/stylelint-icon-and-text-white.png\" - linter_image_url - Linter image URL - URL of an image used in linter Markdown documentation - Type: string - Example values: 1. \"https://raku.org/camelia-logo.png\" - config_file_name - Default file name for the linter configuration file - An explanation about the purpose of this instance. - Type: string - Example values: 1. \".eslintrc.yml\" 2. \".markdown-lint.yml\" 3. \".python-black\" - cli_config_extra_args - Additional CLI arguments when config file is used - When a configuration file is used with the linter CLI, send these additional arguments - Type: array - Example values: 1. --no-eslintrc 2. --no-ignore - Default: ` - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/examples\">examples</b> required - Linter CLI commands examples - _Please add an example with and without configuration file in the command. They will appear in documentation_ - Type: array - Example values: 1. golangci-lint run myfile.go,golangci-lint run -c .golangci.yml myfile.go 2. eslint myfile.js,eslint -c .eslintrc.yml --no-eslintrc --no-ignore myfile.js - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install\">install</b> required - Installation requirements - _List of apk, dockerfile instructions, npm/pip/gem packages required to install the linter_ - Type: object - **_Properties_** - <b id=\"/properties/linters/items/properties/install/properties/dockerfile\">dockerfile</b> - List of Dockerfile instructions packages - _Will be automatically integrated in generated Dockerfile_ - Type: array - Example values: 1. FROM accurics/terrascan:d182f1c as terrascan 2. COPY --from=terrascan /go/bin/terrascan /usr/bin/ 3. RUN terrascan init - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/apk\">apk</b> - List of APK packages (Linux) - _APK packages identifiers (with or without version)_ - Type: array - Example values: 1. perl 2. perl-dev - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/npm\">npm</b> - List of NPM packages (Node.js) - _NPM packages identifiers (with or without version)_ - Type: array - Example values: 1. eslint 2. eslint-config-airbnb@3.2.1 - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/gem\">gem</b> - List of GEM packages (Ruby) - _GEM packages identifiers (with or without version)_ - Type: array - Example values: 1. rubocop:0.82.0 2. rubocop-github:0.16.0 3. rubocop-performance - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/pip\">pip</b> - List of PIP packages (Python) - _PIP packages identifiers (with or without version)_ - Type: array - Example values: 1. flake8 - **_Items_** - Type: string`","title":"Mega-Linter descriptor"},{"location":"flavors/","text":"Flavors This capability is in Beta version To improve run performances, we generate Flavored Mega-Linter images containing only the list of linters related to a project type When using default Mega-Linter, if a Mega-Linter Flavor would cover all your project requirements, a message is added in the logs If your project uses a Mega-Linter Flavor not covering linter requirements, an error message will be thrown with instructions about how to solve the issue Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"All flavors"},{"location":"flavors/#flavors","text":"This capability is in Beta version To improve run performances, we generate Flavored Mega-Linter images containing only the list of linters related to a project type When using default Mega-Linter, if a Mega-Linter Flavor would cover all your project requirements, a message is added in the logs If your project uses a Mega-Linter Flavor not covering linter requirements, an error message will be thrown with instructions about how to solve the issue Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Flavors"},{"location":"how-to-contribute/","text":"How to contribute Contributions to Mega-Linter are very welcome, please follow Contributing Guide You can also report problems and request new features , or just star the repository and share it on twitter","title":"Contribute"},{"location":"how-to-contribute/#how-to-contribute","text":"Contributions to Mega-Linter are very welcome, please follow Contributing Guide You can also report problems and request new features , or just star the repository and share it on twitter","title":"How to contribute"},{"location":"installation/","text":"Installation The following instructions examples are using to latest Mega-Linter stable version ( V4 , always corresponding to the latest release GitHub Action: nvuillam/mega-linter:v4 Docker image: nvuillam/mega-linter@v4 You can also use insiders version (beta release, corresponding to the content of master branch) GitHub Action: nvuillam/mega-linter:insiders Docker image: nvuillam/mega-linter@latest GitHub Action Create a new file in your repository called .github/workflows/mega-linter.yml Copy the example workflow from below into that new file, no extra configuration required Commit that file to a new branch Open up a pull request and observe the action working Enjoy your more stable , and cleaner code base NOTES: If you pass the Environment variable GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} in your workflow, then the GitHub Mega-Linter will mark the status of each individual linter run in the Checks section of a pull request. Without this you will only see the overall status of the full run. There is no need to set the GitHub Secret as it is automatically set by GitHub, it only needs to be passed to the action. You can also use it outside of GitHub Actions (CircleCI, Azure Pipelines, Jenkins, GitLab, or even locally with a docker run) In your repository you should have a .github/workflows folder with GitHub Action similar to below: .github/workflows/mega-linter.yml This file should have the following code: --- # Mega-Linter GitHub Action configuration file # More info at https://nvuillam.github.io/mega-linter name: Mega-Linter on: # Trigger mega-linter at every push. Action will also be visible from Pull Requests to master push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions) pull_request: branches: [master, main] env: # Comment env block if you do not want to apply fixes # Apply linter fixes configuration APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool) APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all) APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request) jobs: # Cancel duplicate jobs: https://github.com/fkirc/skip-duplicate-actions#option-3-cancellation-only cancel_duplicates: name: Cancel duplicate jobs runs-on: ubuntu-latest steps: - uses: fkirc/skip-duplicate-actions@master with: github_token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} build: name: Mega-Linter runs-on: ubuntu-latest steps: # Git Checkout - name: Checkout Code uses: actions/checkout@v2 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} fetch-depth: 0 # Mega-Linter - name: Mega-Linter id: ml # You can override Mega-Linter flavor used to have faster performances # More info at https://nvuillam.github.io/mega-linter/flavors/ uses: nvuillam/mega-linter@v4 env: # All available variables are described in documentation # https://nvuillam.github.io/mega-linter/configuration/ VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }} # Validates all source when push on master, else just the git diff with master. Override with true if you always want to lint all sources GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks # Upload Mega-Linter artifacts - name: Archive production artifacts if: ${{ success() }} || ${{ failure() }} uses: actions/upload-artifact@v2 with: name: Mega-Linter reports path: | report mega-linter.log # Create pull request if applicable (for now works only on PR from same repository, not from forks) - name: Create Pull Request with applied fixes id: cpr if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository uses: peter-evans/create-pull-request@v3 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} commit-message: \"[Mega-Linter] Apply linters automatic fixes\" title: \"[Mega-Linter] Apply linters automatic fixes\" labels: bot - name: Create PR output if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository run: | echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\" echo \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\" # Push new commit if applicable (for now works only on PR from same repository, not from forks) - name: Prepare commit if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/master' && github.event.pull_request.head.repo.full_name == github.repository run: sudo chown -Rc $UID .git/ - name: Commit and push applied linter fixes if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/master' && github.event.pull_request.head.repo.full_name == github.repository uses: stefanzweifel/git-auto-commit-action@v4 with: branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }} commit_message: \"[Mega-Linter] Apply linters fixes\" Azure Use the following Azure workflow template You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source - job: megalinter displayName: Mega-Linter pool: vmImage: ubuntu-latest steps: - script: | docker pull nvuillam/mega-linter:v4 docker run -v $(System.DefaultWorkingDirectory):/tmp/lint nvuillam/mega-linter displayName: 'Code Scan using Mega-Linter' Jenkins Add the following stage in your Jenkinsfile You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source // Lint with Mega-Linter: https://nvuillam.github.io/mega-linter/ stage('Mega-Linter') { agent { docker { image 'nvuillam/mega-linter:v4' args \"-e VALIDATE_ALL_CODEBASE=true -v ${WORKSPACE}:/tmp/lint --entrypoint=''\" reuseNode true } } steps { sh '/entrypoint.sh' } } GitLab Example of configuration using GitLab CI You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source megalinter: stage: linting image: nvuillam/mega-linter:v4 script: [ \"true\" ] variables: DEFAULT_WORKSPACE: $CI_BUILDS_DIR ANSIBLE_DIRECTORY: $CI_PROJECT_PATH LINTER_RULES_PATH: $CI_PROJECT_PATH/.github/linters Run Mega-Linter locally You can use mega-linter-runner to locally run Mega-Linter with the same configuration defined in .mega-linter.yml file See mega-linter-runner installation instructions","title":"Installation"},{"location":"installation/#installation","text":"The following instructions examples are using to latest Mega-Linter stable version ( V4 , always corresponding to the latest release GitHub Action: nvuillam/mega-linter:v4 Docker image: nvuillam/mega-linter@v4 You can also use insiders version (beta release, corresponding to the content of master branch) GitHub Action: nvuillam/mega-linter:insiders Docker image: nvuillam/mega-linter@latest","title":"Installation"},{"location":"installation/#github-action","text":"Create a new file in your repository called .github/workflows/mega-linter.yml Copy the example workflow from below into that new file, no extra configuration required Commit that file to a new branch Open up a pull request and observe the action working Enjoy your more stable , and cleaner code base NOTES: If you pass the Environment variable GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} in your workflow, then the GitHub Mega-Linter will mark the status of each individual linter run in the Checks section of a pull request. Without this you will only see the overall status of the full run. There is no need to set the GitHub Secret as it is automatically set by GitHub, it only needs to be passed to the action. You can also use it outside of GitHub Actions (CircleCI, Azure Pipelines, Jenkins, GitLab, or even locally with a docker run) In your repository you should have a .github/workflows folder with GitHub Action similar to below: .github/workflows/mega-linter.yml This file should have the following code: --- # Mega-Linter GitHub Action configuration file # More info at https://nvuillam.github.io/mega-linter name: Mega-Linter on: # Trigger mega-linter at every push. Action will also be visible from Pull Requests to master push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions) pull_request: branches: [master, main] env: # Comment env block if you do not want to apply fixes # Apply linter fixes configuration APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool) APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all) APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request) jobs: # Cancel duplicate jobs: https://github.com/fkirc/skip-duplicate-actions#option-3-cancellation-only cancel_duplicates: name: Cancel duplicate jobs runs-on: ubuntu-latest steps: - uses: fkirc/skip-duplicate-actions@master with: github_token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} build: name: Mega-Linter runs-on: ubuntu-latest steps: # Git Checkout - name: Checkout Code uses: actions/checkout@v2 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} fetch-depth: 0 # Mega-Linter - name: Mega-Linter id: ml # You can override Mega-Linter flavor used to have faster performances # More info at https://nvuillam.github.io/mega-linter/flavors/ uses: nvuillam/mega-linter@v4 env: # All available variables are described in documentation # https://nvuillam.github.io/mega-linter/configuration/ VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }} # Validates all source when push on master, else just the git diff with master. Override with true if you always want to lint all sources GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks # Upload Mega-Linter artifacts - name: Archive production artifacts if: ${{ success() }} || ${{ failure() }} uses: actions/upload-artifact@v2 with: name: Mega-Linter reports path: | report mega-linter.log # Create pull request if applicable (for now works only on PR from same repository, not from forks) - name: Create Pull Request with applied fixes id: cpr if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository uses: peter-evans/create-pull-request@v3 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} commit-message: \"[Mega-Linter] Apply linters automatic fixes\" title: \"[Mega-Linter] Apply linters automatic fixes\" labels: bot - name: Create PR output if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository run: | echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\" echo \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\" # Push new commit if applicable (for now works only on PR from same repository, not from forks) - name: Prepare commit if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/master' && github.event.pull_request.head.repo.full_name == github.repository run: sudo chown -Rc $UID .git/ - name: Commit and push applied linter fixes if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/master' && github.event.pull_request.head.repo.full_name == github.repository uses: stefanzweifel/git-auto-commit-action@v4 with: branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }} commit_message: \"[Mega-Linter] Apply linters fixes\"","title":"GitHub Action"},{"location":"installation/#azure","text":"Use the following Azure workflow template You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source - job: megalinter displayName: Mega-Linter pool: vmImage: ubuntu-latest steps: - script: | docker pull nvuillam/mega-linter:v4 docker run -v $(System.DefaultWorkingDirectory):/tmp/lint nvuillam/mega-linter displayName: 'Code Scan using Mega-Linter'","title":"Azure"},{"location":"installation/#jenkins","text":"Add the following stage in your Jenkinsfile You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source // Lint with Mega-Linter: https://nvuillam.github.io/mega-linter/ stage('Mega-Linter') { agent { docker { image 'nvuillam/mega-linter:v4' args \"-e VALIDATE_ALL_CODEBASE=true -v ${WORKSPACE}:/tmp/lint --entrypoint=''\" reuseNode true } } steps { sh '/entrypoint.sh' } }","title":"Jenkins"},{"location":"installation/#gitlab","text":"Example of configuration using GitLab CI You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source megalinter: stage: linting image: nvuillam/mega-linter:v4 script: [ \"true\" ] variables: DEFAULT_WORKSPACE: $CI_BUILDS_DIR ANSIBLE_DIRECTORY: $CI_PROJECT_PATH LINTER_RULES_PATH: $CI_PROJECT_PATH/.github/linters","title":"GitLab"},{"location":"installation/#run-mega-linter-locally","text":"You can use mega-linter-runner to locally run Mega-Linter with the same configuration defined in .mega-linter.yml file See mega-linter-runner installation instructions","title":"Run Mega-Linter locally"},{"location":"license/","text":"License MIT License","title":"License"},{"location":"license/#license","text":"MIT License","title":"License"},{"location":"mega-linter-runner/","text":"Mega-Linter Runner This package allows to run Mega-Linter locally before running it in your CD/CI workflow, or simply to locally apply reformatting and fixes without having to install up to date linters for your files Installation Pre-requisites You need to have NodeJS and Docker installed on your computer to run Mega-Linter locally with Mega-Linter Runner Global installation npm install mega-linter-runner -g Local installation npm install mega-linter-runner --save-dev No installation You can run mega-linter-runner without installation by using npx Example: npx mega-linter-runner -r insiders -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' Usage mega-linter-runner [OPTIONS] The options are only related to mega-linter-runner. For Mega-Linter options, please use a .mega-linter.yml configuration file Option Description Default -p --path Directory containing the files to lint current directory --flavor Set this parameter to use a Mega-Linter flavor all -e --env Environment variables for Mega-Linter, following format 'ENV_VAR_NAME=VALUE' Warning: Quotes are mandatory --fix Automatically apply formatting and fixes in your files -r --release Allows to override Mega-Linter version used v4 -h --help Show mega-linter-runner help -v --version Show mega-linter-runner version You can also use npx mega-linter-runner if you do not want to install the package Examples mega-linter-runner mega-linter-runner -p myFolder --fix mega-linter-runner -r insiders -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' Configuration Default configuration is ready out of the box You can define a .mega-linter.yml configuration file at the root of your repository to customize or deactivate the included linters","title":"Run locally"},{"location":"mega-linter-runner/#mega-linter-runner","text":"This package allows to run Mega-Linter locally before running it in your CD/CI workflow, or simply to locally apply reformatting and fixes without having to install up to date linters for your files","title":"Mega-Linter Runner"},{"location":"mega-linter-runner/#installation","text":"","title":"Installation"},{"location":"mega-linter-runner/#pre-requisites","text":"You need to have NodeJS and Docker installed on your computer to run Mega-Linter locally with Mega-Linter Runner","title":"Pre-requisites"},{"location":"mega-linter-runner/#global-installation","text":"npm install mega-linter-runner -g","title":"Global installation"},{"location":"mega-linter-runner/#local-installation","text":"npm install mega-linter-runner --save-dev","title":"Local installation"},{"location":"mega-linter-runner/#no-installation","text":"You can run mega-linter-runner without installation by using npx Example: npx mega-linter-runner -r insiders -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true'","title":"No installation"},{"location":"mega-linter-runner/#usage","text":"mega-linter-runner [OPTIONS] The options are only related to mega-linter-runner. For Mega-Linter options, please use a .mega-linter.yml configuration file Option Description Default -p --path Directory containing the files to lint current directory --flavor Set this parameter to use a Mega-Linter flavor all -e --env Environment variables for Mega-Linter, following format 'ENV_VAR_NAME=VALUE' Warning: Quotes are mandatory --fix Automatically apply formatting and fixes in your files -r --release Allows to override Mega-Linter version used v4 -h --help Show mega-linter-runner help -v --version Show mega-linter-runner version You can also use npx mega-linter-runner if you do not want to install the package","title":"Usage"},{"location":"mega-linter-runner/#examples","text":"mega-linter-runner mega-linter-runner -p myFolder --fix mega-linter-runner -r insiders -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true'","title":"Examples"},{"location":"mega-linter-runner/#configuration","text":"Default configuration is ready out of the box You can define a .mega-linter.yml configuration file at the root of your repository to customize or deactivate the included linters","title":"Configuration"},{"location":"mega-linter-vs-super-linter/","text":"Mega-Linter vs Super-Linter The hard-fork of Super-Linter to be rewritten in Python is not just a language switch: use of python flexibility and libraries allowed to define lots of additional functions More languages and formats linted C , C++ , Copy-Paste detection , GraphQL , Puppet , reStructuredText , Rust , Scala , Spell checker , Visual Basic .NET Performances Mega-Linter Flavors allow to use smaller docker images , so the pull time is reduced Thanks to python multiprocessing capabilities, linters are run in parallel , which is way faster than Super-Linter bash script who runs all linters in sequence Automatically apply formatting and fixes Mega-Linter can automatically apply fixes performed by linters , and push them to the same branch , or create a Pull Request that you can validate This is pretty handy, especially for linter errors related to formatting (in that case, you don't have any manual update to perform) Run locally Mega-Linter can be run locally thanks to mega-linter-runner More reporters Text files Pull Request comments Updated sources Email File.io Enhanced Configuration Configure include and exclude regexes for a single language or linter : ex: JAVASCRIPT_FILTER_REGEX_INCLUDE (src) Configure additional CLI arguments for a linter: ex: JAVASCRIPT_ES_ARGUMENTS \"--debug --env-info\" Configure non blocking errors for a single language or linter : ex: JAVASCRIPT_DISABLE_ERRORS Simplify languages and linters variables ENABLE = list of languages and formats to apply lint on codebase (default: all) ENABLE_LINTERS = list of linters to apply lint on codebase (default: all) DISABLE = list of languages and formats to skip (default: none) DISABLE_LINTERS = list of linters to skip (default: none) Variables VALIDATE_XXX are still taken in account (but should not be used in association with ENABLE and DISABLE variables) Enhanced Documentation HTML documentation One page per linter documentation : All variables that can be used with this linter List of file extensions, names and filters applied by the linter Link to Mega-Linter default linter configuration Link to linter Web-Site Link to official page explaining how to customize the linter rules Link to official page explaining how to disable rules from source comments Examples of linter command line calls behind the hood Help command text Installation commands README Separate languages, formats and tooling formats in the linters table Add logos for each descriptor Enhanced logging and reports Show linter version and applied filters for each linter processed Reports stored as artefacts on GitHub Action run General log One report file by linter Simplify architecture and evolutive maintenance Refactoring runtime in Python, for easier handling than bash thanks to classes and python modules Everything related to each linter in a single descriptor YML file easier evolutive maintenance less conflicts to manage between PRs. Few special cases require a python linter class ) Default behaviours for all linters , with possibility to override part of them for special cases Hierarchical architecture: Apply fixes and new behaviours to all linters with a single code update Documentation as code Generate linters tables (ordered by type: language, format & tooling format) and include it in README. (see result) Generate one markdown file per Linter, containing all configuration variables, infos and examples (See examples) Automatic generation of Dockerfile using YML descriptors, always using the linter latest version Dockerfile commands (FROM, ARG, ENV, COPY, RUN ) APK packages (linux) NPM packages (node) PIP packages (python) GEM packages (ruby) Phive packages (PHP) Have a centralized exclude list (node_modules,.rbenv, etc...) Improve robustness & stability Test classes for each capability Test classes for each linter : Automatic generation of test classes using .automation/build.py Setup code coverage Development CD / CI Validate multi-status on PR inside each PR (posted from step \"Run against all code base\") Run test classes and code coverage with pytest during validation GitHub Action Validate descriptor YML files with json schema during build Automated job to upgrade linters to their latest stable version","title":"Mega-Linter vs Super-Linter"},{"location":"mega-linter-vs-super-linter/#mega-linter-vs-super-linter","text":"The hard-fork of Super-Linter to be rewritten in Python is not just a language switch: use of python flexibility and libraries allowed to define lots of additional functions","title":"Mega-Linter vs Super-Linter"},{"location":"mega-linter-vs-super-linter/#more-languages-and-formats-linted","text":"C , C++ , Copy-Paste detection , GraphQL , Puppet , reStructuredText , Rust , Scala , Spell checker , Visual Basic .NET","title":"More languages and formats linted"},{"location":"mega-linter-vs-super-linter/#performances","text":"Mega-Linter Flavors allow to use smaller docker images , so the pull time is reduced Thanks to python multiprocessing capabilities, linters are run in parallel , which is way faster than Super-Linter bash script who runs all linters in sequence","title":"Performances"},{"location":"mega-linter-vs-super-linter/#automatically-apply-formatting-and-fixes","text":"Mega-Linter can automatically apply fixes performed by linters , and push them to the same branch , or create a Pull Request that you can validate This is pretty handy, especially for linter errors related to formatting (in that case, you don't have any manual update to perform)","title":"Automatically apply formatting and fixes"},{"location":"mega-linter-vs-super-linter/#run-locally","text":"Mega-Linter can be run locally thanks to mega-linter-runner","title":"Run locally"},{"location":"mega-linter-vs-super-linter/#more-reporters","text":"Text files Pull Request comments Updated sources Email File.io","title":"More reporters"},{"location":"mega-linter-vs-super-linter/#enhanced-configuration","text":"Configure include and exclude regexes for a single language or linter : ex: JAVASCRIPT_FILTER_REGEX_INCLUDE (src) Configure additional CLI arguments for a linter: ex: JAVASCRIPT_ES_ARGUMENTS \"--debug --env-info\" Configure non blocking errors for a single language or linter : ex: JAVASCRIPT_DISABLE_ERRORS Simplify languages and linters variables ENABLE = list of languages and formats to apply lint on codebase (default: all) ENABLE_LINTERS = list of linters to apply lint on codebase (default: all) DISABLE = list of languages and formats to skip (default: none) DISABLE_LINTERS = list of linters to skip (default: none) Variables VALIDATE_XXX are still taken in account (but should not be used in association with ENABLE and DISABLE variables)","title":"Enhanced Configuration"},{"location":"mega-linter-vs-super-linter/#enhanced-documentation","text":"HTML documentation One page per linter documentation : All variables that can be used with this linter List of file extensions, names and filters applied by the linter Link to Mega-Linter default linter configuration Link to linter Web-Site Link to official page explaining how to customize the linter rules Link to official page explaining how to disable rules from source comments Examples of linter command line calls behind the hood Help command text Installation commands README Separate languages, formats and tooling formats in the linters table Add logos for each descriptor","title":"Enhanced Documentation"},{"location":"mega-linter-vs-super-linter/#enhanced-logging-and-reports","text":"Show linter version and applied filters for each linter processed Reports stored as artefacts on GitHub Action run General log One report file by linter","title":"Enhanced logging and reports"},{"location":"mega-linter-vs-super-linter/#simplify-architecture-and-evolutive-maintenance","text":"Refactoring runtime in Python, for easier handling than bash thanks to classes and python modules Everything related to each linter in a single descriptor YML file easier evolutive maintenance less conflicts to manage between PRs. Few special cases require a python linter class ) Default behaviours for all linters , with possibility to override part of them for special cases Hierarchical architecture: Apply fixes and new behaviours to all linters with a single code update Documentation as code Generate linters tables (ordered by type: language, format & tooling format) and include it in README. (see result) Generate one markdown file per Linter, containing all configuration variables, infos and examples (See examples) Automatic generation of Dockerfile using YML descriptors, always using the linter latest version Dockerfile commands (FROM, ARG, ENV, COPY, RUN ) APK packages (linux) NPM packages (node) PIP packages (python) GEM packages (ruby) Phive packages (PHP) Have a centralized exclude list (node_modules,.rbenv, etc...)","title":"Simplify architecture and evolutive maintenance"},{"location":"mega-linter-vs-super-linter/#improve-robustness-stability","text":"Test classes for each capability Test classes for each linter : Automatic generation of test classes using .automation/build.py Setup code coverage Development CD / CI Validate multi-status on PR inside each PR (posted from step \"Run against all code base\") Run test classes and code coverage with pytest during validation GitHub Action Validate descriptor YML files with json schema during build Automated job to upgrade linters to their latest stable version","title":"Improve robustness &amp; stability"},{"location":"quick-start/","text":"Quick Start Save mega-linter.yml in a folder .github/workflows of your repository If you do not want to apply formatters and auto-fixers in a new commit/PR, comment APPLY_FIXES block variables If you do not want to check copy-pastes and spell, uncomment # DISABLE: COPYPASTE,SPELL in mega-linter.yml Commit, push, and create a pull request Watch ! Notes : This repo is a hard-fork of GitHub Super-Linter, rewritten in python to add lots of additional features If you are a Super-Linter user, you can transparently switch to Mega-Linter and keep the same configuration (just replace github/super-linter@v3 by nvuillam/mega-linter@v4 in your GT Action YML file, like on this PR ) If you want to use some advanced additional features like applying fixes during CI , please take 5 minutes to define mega-linter.yml :)","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"Save mega-linter.yml in a folder .github/workflows of your repository If you do not want to apply formatters and auto-fixers in a new commit/PR, comment APPLY_FIXES block variables If you do not want to check copy-pastes and spell, uncomment # DISABLE: COPYPASTE,SPELL in mega-linter.yml Commit, push, and create a pull request Watch ! Notes : This repo is a hard-fork of GitHub Super-Linter, rewritten in python to add lots of additional features If you are a Super-Linter user, you can transparently switch to Mega-Linter and keep the same configuration (just replace github/super-linter@v3 by nvuillam/mega-linter@v4 in your GT Action YML file, like on this PR ) If you want to use some advanced additional features like applying fixes during CI , please take 5 minutes to define mega-linter.yml :)","title":"Quick Start"},{"location":"reporters/","text":"Reporters Mega-Linter can generate various reports that you can activate / deactivate and customize Reporter Description Default Text files One log file by linter + suggestions for fixes that can not be automated Active Pull Request comments Mega-Linter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if GitHub Action Updated sources Zip containing all formatted and auto-fixed sources so you can extract them in your repository Active GitHub Status One GitHub status by linter on the PR, with links to detailed logs Active if GitHub Action File.io Send reports on file.io so you can access them with a simple hyperlink provided at the end of console log Inactive Email Receive all reports on your e-mail, if you can not use artifacts Active TAP files One log file by linter following Test Anything Protocol format Active Console Execution logs visible in console Active","title":"All reporters"},{"location":"reporters/#reporters","text":"Mega-Linter can generate various reports that you can activate / deactivate and customize Reporter Description Default Text files One log file by linter + suggestions for fixes that can not be automated Active Pull Request comments Mega-Linter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if GitHub Action Updated sources Zip containing all formatted and auto-fixed sources so you can extract them in your repository Active GitHub Status One GitHub status by linter on the PR, with links to detailed logs Active if GitHub Action File.io Send reports on file.io so you can access them with a simple hyperlink provided at the end of console log Inactive Email Receive all reports on your e-mail, if you can not use artifacts Active TAP files One log file by linter following Test Anything Protocol format Active Console Execution logs visible in console Active","title":"Reporters"},{"location":"supported-linters/","text":"Supported Linters All linters are integrated in the Mega-Linter docker image , which is frequently upgraded with their latest versions Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK PERL perlcritic PERL_PERLCRITIC PHP php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner SALESFORCE_SFDX_SCANNER SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK rstfmt RST_RSTFMT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"All supported linters"},{"location":"supported-linters/#supported-linters","text":"All linters are integrated in the Mega-Linter docker image , which is frequently upgraded with their latest versions","title":"Supported Linters"},{"location":"supported-linters/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK PERL perlcritic PERL_PERLCRITIC PHP php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner SALESFORCE_SFDX_SCANNER SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT","title":"Languages"},{"location":"supported-linters/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK rstfmt RST_RSTFMT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"supported-linters/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT","title":"Tooling formats"},{"location":"supported-linters/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"descriptors/ansible/","text":"ANSIBLE Linters Linter Configuration key ansible-lint ANSIBLE Linted files File extensions: .yml .yaml Configuration in Mega-Linter Variable Description Default value ANSIBLE_FILTER_REGEX_INCLUDE Custom regex including filter ANSIBLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All ANSIBLE linters"},{"location":"descriptors/ansible/#ansible","text":"","title":"ANSIBLE"},{"location":"descriptors/ansible/#linters","text":"Linter Configuration key ansible-lint ANSIBLE","title":"Linters"},{"location":"descriptors/ansible/#linted-files","text":"File extensions: .yml .yaml","title":"Linted files"},{"location":"descriptors/ansible/#configuration-in-mega-linter","text":"Variable Description Default value ANSIBLE_FILTER_REGEX_INCLUDE Custom regex including filter ANSIBLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/ansible_ansible_lint/","text":"ansible-lint ansible-lint documentation Version in Mega-Linter: 4.2.0 Visit Official Web Site See How to configure ansible-lint rules If custom .ansible-lint.yml is not found, .ansible-lint.yml will be used See How to disable ansible-lint rules in files See Index of problems detected by ansible-lint Configuration in Mega-Linter Enable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in ENABLE_LINTERS variable Disable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in DISABLE_LINTERS variable Variable Description Default value ANSIBLE_ANSIBLE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ANSIBLE_ANSIBLE_LINT_FILE_NAME ansible-lint configuration file name Use LINTER_DEFAULT to let the linter find it .ansible-lint.yml ANSIBLE_ANSIBLE_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false ANSIBLE_DIRECTORY Directory containing ANSIBLE files ansible Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .yml .yaml Example calls ansible-lint -v myfile.yml ansible-lint -v -c .ansible-lint.yml myfile.yml Help content Usage: ansible-lint [options] [playbook.yml [playbook2 ...]] Options: --version show program's version number and exit -h, --help show this help message and exit -L list all the rules -q quieter, although not silent output -p parseable output in the format of pep8 --parseable-severity parseable output including severity of rule -r RULESDIR specify one or more rules directories using one or more -r arguments. Any -r flags override the default rules in /usr/lib/python3.8/site- packages/ansiblelint/rules, unless -R is also used. -R Use default rules in /usr/lib/python3.8/site- packages/ansiblelint/rules in addition to any extra rules directories specified with -r. There is no need to specify this if no -r flags are used -t TAGS only check rules whose id/tags match these values -T list all the tags -v Increase verbosity level -x SKIP_LIST only check rules whose id/tags do not match these values --nocolor disable colored output --force-color Try force colored output (relying on ansible's code) --exclude=EXCLUDE_PATHS path to directories or files to skip. This option is repeatable. -c C Specify configuration file to use. Defaults to \".ansible-lint\" Installation on mega-linter Docker image APK packages (Linux): ansible-lint Example success log Results of ansible-lint linter (version 4.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ansible_ansible_lint/ ----------------------------------------------- [SUCCESS] .automation/test/ansible/ansible/ansible_good_1.yml Examining .automation/test/ansible/ansible/ansible_good_1.yml of type playbook Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-api-config-apply.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-config-apply.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/collectd-settings.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-ldap-configuration.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/splunk-settings.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/main.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-initial-configuration.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/handlers/main.yml of type handlers Example error log Results of ansible-lint linter (version 4.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ansible_ansible_lint/ ----------------------------------------------- [ERROR] .automation/test/ansible/ansible/ansible_bad_1.yml Traceback (most recent call last): File \"/usr/bin/ansible-lint\", line 11, in <module> load_entry_point('ansible-lint==4.2.0', 'console_scripts', 'ansible-lint')() File \"/usr/lib/python3.8/site-packages/ansiblelint/__main__.py\", line 187, in main matches.extend(runner.run()) File \"/usr/lib/python3.8/site-packages/ansiblelint/__init__.py\", line 267, in run for child in ansiblelint.utils.find_children(arg, self.playbook_dir): File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 163, in find_children for child in play_children(basedir, item, playbook[1], playbook_dir): File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 215, in play_children return delegate_map[k](basedir, k, v, parent_type) File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 246, in _taskshandlers_children results.extend(_roles_children(basedir, k, [th['action'].get('name')], File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 285, in _roles_children results.extend(_look_for_role_files(basedir, role, main=main)) File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 330, in _look_for_role_files role_path = _rolepath(basedir, role) File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 299, in _rolepath path_dwim(basedir, os.path.join('roles', role)), File \"/usr/lib/python3.8/posixpath.py\", line 90, in join genericpath._check_arg_types('join', a, *p) File \"/usr/lib/python3.8/genericpath.py\", line 152, in _check_arg_types raise TypeError(f'{funcname}() argument must be str, bytes, or ' TypeError: join() argument must be str, bytes, or os.PathLike object, not 'NoneType'","title":"ansible-lint"},{"location":"descriptors/ansible_ansible_lint/#ansible-lint","text":"","title":"ansible-lint"},{"location":"descriptors/ansible_ansible_lint/#ansible-lint-documentation","text":"Version in Mega-Linter: 4.2.0 Visit Official Web Site See How to configure ansible-lint rules If custom .ansible-lint.yml is not found, .ansible-lint.yml will be used See How to disable ansible-lint rules in files See Index of problems detected by ansible-lint","title":"ansible-lint documentation"},{"location":"descriptors/ansible_ansible_lint/#configuration-in-mega-linter","text":"Enable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in ENABLE_LINTERS variable Disable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in DISABLE_LINTERS variable Variable Description Default value ANSIBLE_ANSIBLE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ANSIBLE_ANSIBLE_LINT_FILE_NAME ansible-lint configuration file name Use LINTER_DEFAULT to let the linter find it .ansible-lint.yml ANSIBLE_ANSIBLE_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false ANSIBLE_DIRECTORY Directory containing ANSIBLE files ansible","title":"Configuration in Mega-Linter"},{"location":"descriptors/ansible_ansible_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/ansible_ansible_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/ansible_ansible_lint/#how-are-identified-applicable-files","text":"File extensions: .yml .yaml","title":"How are identified applicable files"},{"location":"descriptors/ansible_ansible_lint/#example-calls","text":"ansible-lint -v myfile.yml ansible-lint -v -c .ansible-lint.yml myfile.yml","title":"Example calls"},{"location":"descriptors/ansible_ansible_lint/#help-content","text":"Usage: ansible-lint [options] [playbook.yml [playbook2 ...]] Options: --version show program's version number and exit -h, --help show this help message and exit -L list all the rules -q quieter, although not silent output -p parseable output in the format of pep8 --parseable-severity parseable output including severity of rule -r RULESDIR specify one or more rules directories using one or more -r arguments. Any -r flags override the default rules in /usr/lib/python3.8/site- packages/ansiblelint/rules, unless -R is also used. -R Use default rules in /usr/lib/python3.8/site- packages/ansiblelint/rules in addition to any extra rules directories specified with -r. There is no need to specify this if no -r flags are used -t TAGS only check rules whose id/tags match these values -T list all the tags -v Increase verbosity level -x SKIP_LIST only check rules whose id/tags do not match these values --nocolor disable colored output --force-color Try force colored output (relying on ansible's code) --exclude=EXCLUDE_PATHS path to directories or files to skip. This option is repeatable. -c C Specify configuration file to use. Defaults to \".ansible-lint\"","title":"Help content"},{"location":"descriptors/ansible_ansible_lint/#installation-on-mega-linter-docker-image","text":"APK packages (Linux): ansible-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/ansible_ansible_lint/#example-success-log","text":"Results of ansible-lint linter (version 4.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ansible_ansible_lint/ ----------------------------------------------- [SUCCESS] .automation/test/ansible/ansible/ansible_good_1.yml Examining .automation/test/ansible/ansible/ansible_good_1.yml of type playbook Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-api-config-apply.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-config-apply.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/collectd-settings.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-ldap-configuration.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/splunk-settings.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/main.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/tasks/ghe-initial-configuration.yml of type tasks Examining .automation/test/ansible/ansible/ghe-initialize/handlers/main.yml of type handlers","title":"Example success log"},{"location":"descriptors/ansible_ansible_lint/#example-error-log","text":"Results of ansible-lint linter (version 4.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ansible_ansible_lint/ ----------------------------------------------- [ERROR] .automation/test/ansible/ansible/ansible_bad_1.yml Traceback (most recent call last): File \"/usr/bin/ansible-lint\", line 11, in <module> load_entry_point('ansible-lint==4.2.0', 'console_scripts', 'ansible-lint')() File \"/usr/lib/python3.8/site-packages/ansiblelint/__main__.py\", line 187, in main matches.extend(runner.run()) File \"/usr/lib/python3.8/site-packages/ansiblelint/__init__.py\", line 267, in run for child in ansiblelint.utils.find_children(arg, self.playbook_dir): File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 163, in find_children for child in play_children(basedir, item, playbook[1], playbook_dir): File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 215, in play_children return delegate_map[k](basedir, k, v, parent_type) File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 246, in _taskshandlers_children results.extend(_roles_children(basedir, k, [th['action'].get('name')], File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 285, in _roles_children results.extend(_look_for_role_files(basedir, role, main=main)) File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 330, in _look_for_role_files role_path = _rolepath(basedir, role) File \"/usr/lib/python3.8/site-packages/ansiblelint/utils.py\", line 299, in _rolepath path_dwim(basedir, os.path.join('roles', role)), File \"/usr/lib/python3.8/posixpath.py\", line 90, in join genericpath._check_arg_types('join', a, *p) File \"/usr/lib/python3.8/genericpath.py\", line 152, in _check_arg_types raise TypeError(f'{funcname}() argument must be str, bytes, or ' TypeError: join() argument must be str, bytes, or os.PathLike object, not 'NoneType'","title":"Example error log"},{"location":"descriptors/arm/","text":"ARM Linters Linter Configuration key arm-ttk ARM Linted files File extensions: .json Detected file content: schema\\.management\\.azure\\.com Configuration in Mega-Linter Variable Description Default value ARM_FILTER_REGEX_INCLUDE Custom regex including filter ARM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All ARM linters"},{"location":"descriptors/arm/#arm","text":"","title":"ARM"},{"location":"descriptors/arm/#linters","text":"Linter Configuration key arm-ttk ARM","title":"Linters"},{"location":"descriptors/arm/#linted-files","text":"File extensions: .json Detected file content: schema\\.management\\.azure\\.com","title":"Linted files"},{"location":"descriptors/arm/#configuration-in-mega-linter","text":"Variable Description Default value ARM_FILTER_REGEX_INCLUDE Custom regex including filter ARM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/arm_arm_ttk/","text":"arm-ttk arm-ttk documentation Visit Official Web Site See How to configure arm-ttk rules If custom .arm-ttk.psd1 is not found, .arm-ttk.psd1 will be used Configuration in Mega-Linter Enable arm-ttk by adding ARM_ARM_TTK in ENABLE_LINTERS variable Disable arm-ttk by adding ARM_ARM_TTK in DISABLE_LINTERS variable Variable Description Default value ARM_ARM_TTK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ARM_ARM_TTK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file ARM_ARM_TTK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file ARM_ARM_TTK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] ARM_ARM_TTK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ARM_ARM_TTK_FILE_NAME arm-ttk configuration file name Use LINTER_DEFAULT to let the linter find it .arm-ttk.psd1 ARM_ARM_TTK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules ARM_ARM_TTK_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use arm-ttk in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code ARMTTKExtension Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 Behind the scenes How are identified applicable files File extensions: .json Detected file content: schema\\.management\\.azure\\.com Example calls pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; Test-AzTemplate -TemplatePath myfile.json; if (${Error}.Count) {exit 1}\" \" \"pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; ${config} = $(Import-PowerShellDataFile -Path \".arm-ttk.psd1\"); Test-AzTemplate @config -TemplatePath myfile.json; if (${Error}.Count) {exit 1} \" Help content \u001b[91mTest-AzTemplate: \u001b[96mLine | \u001b[96m 2 | \u001b[0m $TAZ_V = (Test-AzTemplate \u001b[96m-help\u001b[0m); \u001b[96m | \u001b[91m ~~~~~ \u001b[91m\u001b[96m | \u001b[91mA parameter cannot be found that matches parameter name 'help'.\u001b[0m Installation on mega-linter Docker image Dockerfile commands : ARG ARM_TTK_NAME='master.zip' ARG ARM_TTK_URI='https://github.com/Azure/arm-ttk/archive/master.zip' ARG ARM_TTK_DIRECTORY='/opt/microsoft' ENV ARM_TTK_PSD1=\"${ARM_TTK_DIRECTORY}/arm-ttk-master/arm-ttk/arm-ttk.psd1\" RUN curl --retry 5 --retry-delay 5 -sLO \"${ARM_TTK_URI}\" \\ && unzip \"${ARM_TTK_NAME}\" -d \"${ARM_TTK_DIRECTORY}\" \\ && rm \"${ARM_TTK_NAME}\" \\ && ln -sTf \"${ARM_TTK_PSD1}\" /usr/bin/arm-ttk \\ && chmod a+x /usr/bin/arm-ttk Example success log Results of arm-ttk linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/arm_arm_ttk/ ----------------------------------------------- [SUCCESS] .automation/test/arm/arm_good_1.json Validating arm\\arm_good_1.json deploymentTemplate [+] adminUsername Should Not Be A Literal (70 ms) [+] apiVersions Should Be Recent (67 ms) [+] artifacts parameter (12 ms) [+] DependsOn Best Practices (8 ms) [+] Deployment Resources Must Not Be Debug (8 ms) [+] DeploymentTemplate Must Not Contain Hardcoded Uri (17 ms) [+] DeploymentTemplate Schema Is Correct (4 ms) [+] Dynamic Variable References Should Not Use Concat (69 ms) [+] IDs Should Be Derived From ResourceIDs (33 ms) [+] Location Should Not Be Hardcoded (30 ms) [+] ManagedIdentityExtension must not be used (2 ms) [+] Min And Max Value Are Numbers (6 ms) [+] Outputs Must Not Contain Secrets (9 ms) [+] Parameters Must Be Referenced (9 ms) [+] Parameters Property Must Exist (3 ms) [+] providers apiVersions Is Not Permitted (2 ms) [+] ResourceIds should not contain (9 ms) [+] Resources Should Have Location (2 ms) [+] Secure String Parameters Cannot Have Default (3 ms) [+] Template Should Not Contain Blanks (6 ms) [+] Variables Must Be Referenced (28 ms) [+] Virtual Machines Should Not Be Preview (16 ms) [+] VM Images Should Use Latest Version (1 ms) [+] VM Size Should Be A Parameter (15 ms) Example error log Results of arm-ttk linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/arm_arm_ttk/ ----------------------------------------------- [ERROR] .automation/test/arm/arm_bad_1.json Validating arm\\arm_bad_1.json deploymentTemplate [+] adminUsername Should Not Be A Literal (69 ms) [+] apiVersions Should Be Recent (97 ms) [+] artifacts parameter (11 ms) [+] DependsOn Best Practices (6 ms) [+] Deployment Resources Must Not Be Debug (7 ms) [+] DeploymentTemplate Must Not Contain Hardcoded Uri (17 ms) [+] DeploymentTemplate Schema Is Correct (4 ms) [+] Dynamic Variable References Should Not Use Concat (3 ms) [+] IDs Should Be Derived From ResourceIDs (18 ms) [+] Location Should Not Be Hardcoded (27 ms) [+] ManagedIdentityExtension must not be used (3 ms) [+] Min And Max Value Are Numbers (7 ms) [+] Outputs Must Not Contain Secrets (10 ms) [+] Parameters Must Be Referenced (10 ms) [+] Parameters Property Must Exist (3 ms) [+] providers apiVersions Is Not Permitted (2 ms) [+] ResourceIds should not contain (10 ms) [+] Resources Should Have Location (2 ms) [+] Secure String Parameters Cannot Have Default (3 ms) [-] Template Should Not Contain Blanks (21 ms) ::error:: Empty property: [] found on line: 28 Index:1331 ::error:: Empty property: \"\" found on line: 3 Index:121 [-] Variables Must Be Referenced (80 ms) ::error:: Unreferenced variable: Network.Location ::error:: Unreferenced variable: Test.Blank.Variable [+] Virtual Machines Should Not Be Preview (18 ms) [+] VM Images Should Use Latest Version (1 ms) [+] VM Size Should Be A Parameter (13 ms)","title":"arm-ttk"},{"location":"descriptors/arm_arm_ttk/#arm-ttk","text":"","title":"arm-ttk"},{"location":"descriptors/arm_arm_ttk/#arm-ttk-documentation","text":"Visit Official Web Site See How to configure arm-ttk rules If custom .arm-ttk.psd1 is not found, .arm-ttk.psd1 will be used","title":"arm-ttk documentation"},{"location":"descriptors/arm_arm_ttk/#configuration-in-mega-linter","text":"Enable arm-ttk by adding ARM_ARM_TTK in ENABLE_LINTERS variable Disable arm-ttk by adding ARM_ARM_TTK in DISABLE_LINTERS variable Variable Description Default value ARM_ARM_TTK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ARM_ARM_TTK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file ARM_ARM_TTK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file ARM_ARM_TTK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] ARM_ARM_TTK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ARM_ARM_TTK_FILE_NAME arm-ttk configuration file name Use LINTER_DEFAULT to let the linter find it .arm-ttk.psd1 ARM_ARM_TTK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules ARM_ARM_TTK_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/arm_arm_ttk/#ide-integration","text":"Use arm-ttk in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code ARMTTKExtension","title":"IDE Integration"},{"location":"descriptors/arm_arm_ttk/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35","title":"Mega-Linter Flavours"},{"location":"descriptors/arm_arm_ttk/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/arm_arm_ttk/#how-are-identified-applicable-files","text":"File extensions: .json Detected file content: schema\\.management\\.azure\\.com","title":"How are identified applicable files"},{"location":"descriptors/arm_arm_ttk/#example-calls","text":"pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; Test-AzTemplate -TemplatePath myfile.json; if (${Error}.Count) {exit 1}\" \" \"pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; ${config} = $(Import-PowerShellDataFile -Path \".arm-ttk.psd1\"); Test-AzTemplate @config -TemplatePath myfile.json; if (${Error}.Count) {exit 1} \"","title":"Example calls"},{"location":"descriptors/arm_arm_ttk/#help-content","text":"\u001b[91mTest-AzTemplate: \u001b[96mLine | \u001b[96m 2 | \u001b[0m $TAZ_V = (Test-AzTemplate \u001b[96m-help\u001b[0m); \u001b[96m | \u001b[91m ~~~~~ \u001b[91m\u001b[96m | \u001b[91mA parameter cannot be found that matches parameter name 'help'.\u001b[0m","title":"Help content"},{"location":"descriptors/arm_arm_ttk/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : ARG ARM_TTK_NAME='master.zip' ARG ARM_TTK_URI='https://github.com/Azure/arm-ttk/archive/master.zip' ARG ARM_TTK_DIRECTORY='/opt/microsoft' ENV ARM_TTK_PSD1=\"${ARM_TTK_DIRECTORY}/arm-ttk-master/arm-ttk/arm-ttk.psd1\" RUN curl --retry 5 --retry-delay 5 -sLO \"${ARM_TTK_URI}\" \\ && unzip \"${ARM_TTK_NAME}\" -d \"${ARM_TTK_DIRECTORY}\" \\ && rm \"${ARM_TTK_NAME}\" \\ && ln -sTf \"${ARM_TTK_PSD1}\" /usr/bin/arm-ttk \\ && chmod a+x /usr/bin/arm-ttk","title":"Installation on mega-linter Docker image"},{"location":"descriptors/arm_arm_ttk/#example-success-log","text":"Results of arm-ttk linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/arm_arm_ttk/ ----------------------------------------------- [SUCCESS] .automation/test/arm/arm_good_1.json Validating arm\\arm_good_1.json deploymentTemplate [+] adminUsername Should Not Be A Literal (70 ms) [+] apiVersions Should Be Recent (67 ms) [+] artifacts parameter (12 ms) [+] DependsOn Best Practices (8 ms) [+] Deployment Resources Must Not Be Debug (8 ms) [+] DeploymentTemplate Must Not Contain Hardcoded Uri (17 ms) [+] DeploymentTemplate Schema Is Correct (4 ms) [+] Dynamic Variable References Should Not Use Concat (69 ms) [+] IDs Should Be Derived From ResourceIDs (33 ms) [+] Location Should Not Be Hardcoded (30 ms) [+] ManagedIdentityExtension must not be used (2 ms) [+] Min And Max Value Are Numbers (6 ms) [+] Outputs Must Not Contain Secrets (9 ms) [+] Parameters Must Be Referenced (9 ms) [+] Parameters Property Must Exist (3 ms) [+] providers apiVersions Is Not Permitted (2 ms) [+] ResourceIds should not contain (9 ms) [+] Resources Should Have Location (2 ms) [+] Secure String Parameters Cannot Have Default (3 ms) [+] Template Should Not Contain Blanks (6 ms) [+] Variables Must Be Referenced (28 ms) [+] Virtual Machines Should Not Be Preview (16 ms) [+] VM Images Should Use Latest Version (1 ms) [+] VM Size Should Be A Parameter (15 ms)","title":"Example success log"},{"location":"descriptors/arm_arm_ttk/#example-error-log","text":"Results of arm-ttk linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/arm_arm_ttk/ ----------------------------------------------- [ERROR] .automation/test/arm/arm_bad_1.json Validating arm\\arm_bad_1.json deploymentTemplate [+] adminUsername Should Not Be A Literal (69 ms) [+] apiVersions Should Be Recent (97 ms) [+] artifacts parameter (11 ms) [+] DependsOn Best Practices (6 ms) [+] Deployment Resources Must Not Be Debug (7 ms) [+] DeploymentTemplate Must Not Contain Hardcoded Uri (17 ms) [+] DeploymentTemplate Schema Is Correct (4 ms) [+] Dynamic Variable References Should Not Use Concat (3 ms) [+] IDs Should Be Derived From ResourceIDs (18 ms) [+] Location Should Not Be Hardcoded (27 ms) [+] ManagedIdentityExtension must not be used (3 ms) [+] Min And Max Value Are Numbers (7 ms) [+] Outputs Must Not Contain Secrets (10 ms) [+] Parameters Must Be Referenced (10 ms) [+] Parameters Property Must Exist (3 ms) [+] providers apiVersions Is Not Permitted (2 ms) [+] ResourceIds should not contain (10 ms) [+] Resources Should Have Location (2 ms) [+] Secure String Parameters Cannot Have Default (3 ms) [-] Template Should Not Contain Blanks (21 ms) ::error:: Empty property: [] found on line: 28 Index:1331 ::error:: Empty property: \"\" found on line: 3 Index:121 [-] Variables Must Be Referenced (80 ms) ::error:: Unreferenced variable: Network.Location ::error:: Unreferenced variable: Test.Blank.Variable [+] Virtual Machines Should Not Be Preview (18 ms) [+] VM Images Should Use Latest Version (1 ms) [+] VM Size Should Be A Parameter (13 ms)","title":"Example error log"},{"location":"descriptors/bash/","text":"BASH Linters Linter Configuration key bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT Linted files File extensions: .sh .bash .dash .ksh Configuration in Mega-Linter Variable Description Default value BASH_FILTER_REGEX_INCLUDE Custom regex including filter BASH_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All BASH linters"},{"location":"descriptors/bash/#bash","text":"","title":"BASH"},{"location":"descriptors/bash/#linters","text":"Linter Configuration key bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT","title":"Linters"},{"location":"descriptors/bash/#linted-files","text":"File extensions: .sh .bash .dash .ksh","title":"Linted files"},{"location":"descriptors/bash/#configuration-in-mega-linter","text":"Variable Description Default value BASH_FILTER_REGEX_INCLUDE Custom regex including filter BASH_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/bash_bash_exec/","text":"bash-exec bash-exec documentation Version in Mega-Linter: 5.0.17 Visit Official Web Site Configuration in Mega-Linter Enable bash-exec by adding BASH_EXEC in ENABLE_LINTERS variable Disable bash-exec by adding BASH_EXEC in DISABLE_LINTERS variable Variable Description Default value ERROR_ON_MISSING_EXEC_BIT If set to false , the bash-exec linter will report a warning if a shell script is not executable. If set to true , the bash-exec linter will report an arror instead false BASH_EXEC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_EXEC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file BASH_EXEC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file BASH_EXEC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_EXEC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_EXEC_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .sh .bash .dash .ksh Example calls bash-exec myfile.sh Help content GNU bash, version 5.0.17(1)-release-(x86_64-alpine-linux-musl) Usage: bash [GNU long option] [option] ... bash [GNU long option] [option] script-file ... GNU long options: --debug --debugger --dump-po-strings --dump-strings --help --init-file --login --noediting --noprofile --norc --posix --pretty-print --rcfile --restricted --verbose --version Shell options: -ilrsD or -c command or -O shopt_option (invocation only) -abefhkmnptuvxBCHP or -o option Type `bash -c \"help set\"' for more information about shell options. Type `bash -c help' for more information about shell builtin commands. Use the `bashbug' command to report bugs. bash home page: <http://www.gnu.org/software/bash> General help using GNU software: <http://www.gnu.org/gethelp/> Installation on mega-linter Docker image Dockerfile commands : RUN printf '#!/bin/bash \\\\n\\\\nif [[ -x \"$1\" ]]; then exit 0; else echo \"Error: File:[$1] is not executable\"; exit 1; fi' > /usr/bin/bash-exec \\ && chmod +x /usr/bin/bash-exec Example success log Results of bash-exec linter (version 5.0.17) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_bash_exec/ ----------------------------------------------- [SUCCESS] .automation/test/shell/shell_good_1.sh Example error log Results of bash-exec linter (version 5.0.17) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_bash_exec/ ----------------------------------------------- [ERROR] .automation/test/shell/shell_bad_1.sh Error: File:[.automation/test/shell/shell_bad_1.sh] is not executable","title":"bash-exec"},{"location":"descriptors/bash_bash_exec/#bash-exec","text":"","title":"bash-exec"},{"location":"descriptors/bash_bash_exec/#bash-exec-documentation","text":"Version in Mega-Linter: 5.0.17 Visit Official Web Site","title":"bash-exec documentation"},{"location":"descriptors/bash_bash_exec/#configuration-in-mega-linter","text":"Enable bash-exec by adding BASH_EXEC in ENABLE_LINTERS variable Disable bash-exec by adding BASH_EXEC in DISABLE_LINTERS variable Variable Description Default value ERROR_ON_MISSING_EXEC_BIT If set to false , the bash-exec linter will report a warning if a shell script is not executable. If set to true , the bash-exec linter will report an arror instead false BASH_EXEC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_EXEC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file BASH_EXEC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file BASH_EXEC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_EXEC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_EXEC_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/bash_bash_exec/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/bash_bash_exec/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash_bash_exec/#how-are-identified-applicable-files","text":"File extensions: .sh .bash .dash .ksh","title":"How are identified applicable files"},{"location":"descriptors/bash_bash_exec/#example-calls","text":"bash-exec myfile.sh","title":"Example calls"},{"location":"descriptors/bash_bash_exec/#help-content","text":"GNU bash, version 5.0.17(1)-release-(x86_64-alpine-linux-musl) Usage: bash [GNU long option] [option] ... bash [GNU long option] [option] script-file ... GNU long options: --debug --debugger --dump-po-strings --dump-strings --help --init-file --login --noediting --noprofile --norc --posix --pretty-print --rcfile --restricted --verbose --version Shell options: -ilrsD or -c command or -O shopt_option (invocation only) -abefhkmnptuvxBCHP or -o option Type `bash -c \"help set\"' for more information about shell options. Type `bash -c help' for more information about shell builtin commands. Use the `bashbug' command to report bugs. bash home page: <http://www.gnu.org/software/bash> General help using GNU software: <http://www.gnu.org/gethelp/>","title":"Help content"},{"location":"descriptors/bash_bash_exec/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN printf '#!/bin/bash \\\\n\\\\nif [[ -x \"$1\" ]]; then exit 0; else echo \"Error: File:[$1] is not executable\"; exit 1; fi' > /usr/bin/bash-exec \\ && chmod +x /usr/bin/bash-exec","title":"Installation on mega-linter Docker image"},{"location":"descriptors/bash_bash_exec/#example-success-log","text":"Results of bash-exec linter (version 5.0.17) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_bash_exec/ ----------------------------------------------- [SUCCESS] .automation/test/shell/shell_good_1.sh","title":"Example success log"},{"location":"descriptors/bash_bash_exec/#example-error-log","text":"Results of bash-exec linter (version 5.0.17) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_bash_exec/ ----------------------------------------------- [ERROR] .automation/test/shell/shell_bad_1.sh Error: File:[.automation/test/shell/shell_bad_1.sh] is not executable","title":"Example error log"},{"location":"descriptors/bash_shellcheck/","text":"shellcheck shellcheck documentation Version in Mega-Linter: 0.7.1 Visit Official Web Site See How to disable shellcheck rules in files See Index of problems detected by shellcheck Configuration in Mega-Linter Enable shellcheck by adding BASH_SHELLCHECK in ENABLE_LINTERS variable Disable shellcheck by adding BASH_SHELLCHECK in DISABLE_LINTERS variable Variable Description Default value BASH_SHELLCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHELLCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file BASH_SHELLCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHELLCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHELLCHECK_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use shellcheck in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-shellcheck Emacs flycheck Emacs flymake-shellcheck Sublime Text SublimeLinter-shellcheck vim ale vim neomake vim syntastic Visual Studio Code vscode-shellcheck Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .sh .bash .dash .ksh Example calls shellcheck --color=auto --external-sources myfile.sh Help content Usage: shellcheck [OPTIONS...] FILES... -a --check-sourced Include warnings from sourced files -C[WHEN] --color[=WHEN] Use color (auto, always, never) -i CODE1,CODE2.. --include=CODE1,CODE2.. Consider only given types of warnings -e CODE1,CODE2.. --exclude=CODE1,CODE2.. Exclude types of warnings -f FORMAT --format=FORMAT Output format (checkstyle, diff, gcc, json, json1, quiet, tty) --list-optional List checks disabled by default --norc Don't look for .shellcheckrc files -o check1,check2.. --enable=check1,check2.. List of optional checks to enable (or 'all') -P SOURCEPATHS --source-path=SOURCEPATHS Specify path when looking for sourced files (\"SCRIPTDIR\" for script's dir) -s SHELLNAME --shell=SHELLNAME Specify dialect (sh, bash, dash, ksh) -S SEVERITY --severity=SEVERITY Minimum severity of errors to consider (error, warning, info, style) -V --version Print version information -W NUM --wiki-link-count=NUM The number of wiki links to show, when applicable -x --external-sources Allow 'source' outside of FILES --help Show this usage summary and exit Installation on mega-linter Docker image Dockerfile commands : RUN wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz\" | tar -xJv \\ && cp \"shellcheck-stable/shellcheck\" /usr/bin/ \\ && shellcheck --version Example success log Results of shellcheck linter (version 0.7.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shellcheck/ ----------------------------------------------- [SUCCESS] .automation/test/shell/shell_good_1.sh Example error log Results of shellcheck linter (version 0.7.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shellcheck/ ----------------------------------------------- [ERROR] .automation/test/shell/shell_bad_1.sh In .automation/test/shell/shell_bad_1.sh line 10: if [ $ERROR_CODE -ne 0]; then ^-- SC1009: The mentioned syntax error was in this if expression. ^-- SC1073: Couldn't parse this test expression. Fix to allow more checks. ^-- SC1020: You need a space before the ]. ^-- SC1072: Missing space before ]. Fix any mentioned problems and try again. For more information: https://www.shellcheck.net/wiki/SC1020 -- You need a space before the ]. https://www.shellcheck.net/wiki/SC1072 -- Missing space before ]. Fix any m... https://www.shellcheck.net/wiki/SC1073 -- Couldn't parse this test expressi...","title":"shellcheck"},{"location":"descriptors/bash_shellcheck/#shellcheck","text":"","title":"shellcheck"},{"location":"descriptors/bash_shellcheck/#shellcheck-documentation","text":"Version in Mega-Linter: 0.7.1 Visit Official Web Site See How to disable shellcheck rules in files See Index of problems detected by shellcheck","title":"shellcheck documentation"},{"location":"descriptors/bash_shellcheck/#configuration-in-mega-linter","text":"Enable shellcheck by adding BASH_SHELLCHECK in ENABLE_LINTERS variable Disable shellcheck by adding BASH_SHELLCHECK in DISABLE_LINTERS variable Variable Description Default value BASH_SHELLCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHELLCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file BASH_SHELLCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHELLCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHELLCHECK_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/bash_shellcheck/#ide-integration","text":"Use shellcheck in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-shellcheck Emacs flycheck Emacs flymake-shellcheck Sublime Text SublimeLinter-shellcheck vim ale vim neomake vim syntastic Visual Studio Code vscode-shellcheck","title":"IDE Integration"},{"location":"descriptors/bash_shellcheck/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/bash_shellcheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash_shellcheck/#how-are-identified-applicable-files","text":"File extensions: .sh .bash .dash .ksh","title":"How are identified applicable files"},{"location":"descriptors/bash_shellcheck/#example-calls","text":"shellcheck --color=auto --external-sources myfile.sh","title":"Example calls"},{"location":"descriptors/bash_shellcheck/#help-content","text":"Usage: shellcheck [OPTIONS...] FILES... -a --check-sourced Include warnings from sourced files -C[WHEN] --color[=WHEN] Use color (auto, always, never) -i CODE1,CODE2.. --include=CODE1,CODE2.. Consider only given types of warnings -e CODE1,CODE2.. --exclude=CODE1,CODE2.. Exclude types of warnings -f FORMAT --format=FORMAT Output format (checkstyle, diff, gcc, json, json1, quiet, tty) --list-optional List checks disabled by default --norc Don't look for .shellcheckrc files -o check1,check2.. --enable=check1,check2.. List of optional checks to enable (or 'all') -P SOURCEPATHS --source-path=SOURCEPATHS Specify path when looking for sourced files (\"SCRIPTDIR\" for script's dir) -s SHELLNAME --shell=SHELLNAME Specify dialect (sh, bash, dash, ksh) -S SEVERITY --severity=SEVERITY Minimum severity of errors to consider (error, warning, info, style) -V --version Print version information -W NUM --wiki-link-count=NUM The number of wiki links to show, when applicable -x --external-sources Allow 'source' outside of FILES --help Show this usage summary and exit","title":"Help content"},{"location":"descriptors/bash_shellcheck/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz\" | tar -xJv \\ && cp \"shellcheck-stable/shellcheck\" /usr/bin/ \\ && shellcheck --version","title":"Installation on mega-linter Docker image"},{"location":"descriptors/bash_shellcheck/#example-success-log","text":"Results of shellcheck linter (version 0.7.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shellcheck/ ----------------------------------------------- [SUCCESS] .automation/test/shell/shell_good_1.sh","title":"Example success log"},{"location":"descriptors/bash_shellcheck/#example-error-log","text":"Results of shellcheck linter (version 0.7.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shellcheck/ ----------------------------------------------- [ERROR] .automation/test/shell/shell_bad_1.sh In .automation/test/shell/shell_bad_1.sh line 10: if [ $ERROR_CODE -ne 0]; then ^-- SC1009: The mentioned syntax error was in this if expression. ^-- SC1073: Couldn't parse this test expression. Fix to allow more checks. ^-- SC1020: You need a space before the ]. ^-- SC1072: Missing space before ]. Fix any mentioned problems and try again. For more information: https://www.shellcheck.net/wiki/SC1020 -- You need a space before the ]. https://www.shellcheck.net/wiki/SC1072 -- Missing space before ]. Fix any m... https://www.shellcheck.net/wiki/SC1073 -- Couldn't parse this test expressi...","title":"Example error log"},{"location":"descriptors/bash_shfmt/","text":"shfmt shfmt documentation Version in Mega-Linter: 3.2.1 Visit Official Web Site Configuration in Mega-Linter Enable shfmt by adding BASH_SHFMT in ENABLE_LINTERS variable Disable shfmt by adding BASH_SHFMT in DISABLE_LINTERS variable Enable auto-fixes by adding BASH_SHFMT in APPLY_FIXES variable Variable Description Default value BASH_SHFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file BASH_SHFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file BASH_SHFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHFMT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use shfmt in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom format-shell Emacs emacs-shfmt IDEA shell-scripts micro micro Sublime Text Sublime-Pretty-Shell vim vim-shfmt Visual Studio Code shell-format Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .sh .bash .dash .ksh Example calls shfmt -d myfile.sh shfmt -w myfile.sh Help content usage: shfmt [flags] [path ...] shfmt formats shell programs. If the only argument is a dash ('-') or no arguments are given, standard input will be used. If a given path is a directory, all shell scripts found under that directory will be used. -version show version and exit -l list files whose formatting differs from shfmt's -w write result to file instead of stdout -d error with a diff when the formatting differs -s simplify the code -mn minify the code to reduce its size (implies -s) Parser options: -ln str language variant to parse (bash/posix/mksh/bats, default \"bash\") -p shorthand for -ln=posix -filename str provide a name for the standard input file Printer options: -i uint indent: 0 for tabs (default), >0 for number of spaces -bn binary ops like && and | may start a line -ci switch cases will be indented -sr redirect operators will be followed by a space -kp keep column alignment paddings -fn function opening braces are placed on a separate line Utilities: -f recursively find all shell files and print the paths -tojson print syntax tree to stdout as a typed JSON For more information, see 'man shfmt' and https://github.com/mvdan/sh. Installation on mega-linter Docker image Dockerfile commands : ENV GO111MODULE=on RUN go get mvdan.cc/sh/v3/cmd/shfmt Example success log Results of shfmt linter (version 3.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shfmt/ ----------------------------------------------- [SUCCESS] .automation/test/shell_shfmt/shell-shfmt_good_1.sh Example error log Results of shfmt linter (version 3.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shfmt/ ----------------------------------------------- [ERROR] .automation/test/shell_shfmt/shell-shfmt_bad_1.sh --- .automation/test/shell_shfmt/shell-shfmt_bad_1.sh.orig +++ .automation/test/shell_shfmt/shell-shfmt_bad_1.sh @@ -8,10 +8,10 @@ # Check the shell if [ ${ERROR_CODE} -ne 0 ]; then - echo \"We did it!\" - exit 0 + echo \"We did it!\" + exit 0 else - echo \"We done goofed it...\" - echo \"${HELLO_WORLD}\" - exit 1 + echo \"We done goofed it...\" + echo \"${HELLO_WORLD}\" + exit 1 fi","title":"shfmt"},{"location":"descriptors/bash_shfmt/#shfmt","text":"","title":"shfmt"},{"location":"descriptors/bash_shfmt/#shfmt-documentation","text":"Version in Mega-Linter: 3.2.1 Visit Official Web Site","title":"shfmt documentation"},{"location":"descriptors/bash_shfmt/#configuration-in-mega-linter","text":"Enable shfmt by adding BASH_SHFMT in ENABLE_LINTERS variable Disable shfmt by adding BASH_SHFMT in DISABLE_LINTERS variable Enable auto-fixes by adding BASH_SHFMT in APPLY_FIXES variable Variable Description Default value BASH_SHFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file BASH_SHFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file BASH_SHFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHFMT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/bash_shfmt/#ide-integration","text":"Use shfmt in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom format-shell Emacs emacs-shfmt IDEA shell-scripts micro micro Sublime Text Sublime-Pretty-Shell vim vim-shfmt Visual Studio Code shell-format","title":"IDE Integration"},{"location":"descriptors/bash_shfmt/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/bash_shfmt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash_shfmt/#how-are-identified-applicable-files","text":"File extensions: .sh .bash .dash .ksh","title":"How are identified applicable files"},{"location":"descriptors/bash_shfmt/#example-calls","text":"shfmt -d myfile.sh shfmt -w myfile.sh","title":"Example calls"},{"location":"descriptors/bash_shfmt/#help-content","text":"usage: shfmt [flags] [path ...] shfmt formats shell programs. If the only argument is a dash ('-') or no arguments are given, standard input will be used. If a given path is a directory, all shell scripts found under that directory will be used. -version show version and exit -l list files whose formatting differs from shfmt's -w write result to file instead of stdout -d error with a diff when the formatting differs -s simplify the code -mn minify the code to reduce its size (implies -s) Parser options: -ln str language variant to parse (bash/posix/mksh/bats, default \"bash\") -p shorthand for -ln=posix -filename str provide a name for the standard input file Printer options: -i uint indent: 0 for tabs (default), >0 for number of spaces -bn binary ops like && and | may start a line -ci switch cases will be indented -sr redirect operators will be followed by a space -kp keep column alignment paddings -fn function opening braces are placed on a separate line Utilities: -f recursively find all shell files and print the paths -tojson print syntax tree to stdout as a typed JSON For more information, see 'man shfmt' and https://github.com/mvdan/sh.","title":"Help content"},{"location":"descriptors/bash_shfmt/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : ENV GO111MODULE=on RUN go get mvdan.cc/sh/v3/cmd/shfmt","title":"Installation on mega-linter Docker image"},{"location":"descriptors/bash_shfmt/#example-success-log","text":"Results of shfmt linter (version 3.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shfmt/ ----------------------------------------------- [SUCCESS] .automation/test/shell_shfmt/shell-shfmt_good_1.sh","title":"Example success log"},{"location":"descriptors/bash_shfmt/#example-error-log","text":"Results of shfmt linter (version 3.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/bash_shfmt/ ----------------------------------------------- [ERROR] .automation/test/shell_shfmt/shell-shfmt_bad_1.sh --- .automation/test/shell_shfmt/shell-shfmt_bad_1.sh.orig +++ .automation/test/shell_shfmt/shell-shfmt_bad_1.sh @@ -8,10 +8,10 @@ # Check the shell if [ ${ERROR_CODE} -ne 0 ]; then - echo \"We did it!\" - exit 0 + echo \"We did it!\" + exit 0 else - echo \"We done goofed it...\" - echo \"${HELLO_WORLD}\" - exit 1 + echo \"We done goofed it...\" + echo \"${HELLO_WORLD}\" + exit 1 fi","title":"Example error log"},{"location":"descriptors/c/","text":"C Linters Linter Configuration key cpplint C_CPPLINT Linted files File extensions: .c .h Configuration in Mega-Linter Variable Description Default value C_FILTER_REGEX_INCLUDE Custom regex including filter C_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All C linters"},{"location":"descriptors/c/#c","text":"","title":"C"},{"location":"descriptors/c/#linters","text":"Linter Configuration key cpplint C_CPPLINT","title":"Linters"},{"location":"descriptors/c/#linted-files","text":"File extensions: .c .h","title":"Linted files"},{"location":"descriptors/c/#configuration-in-mega-linter","text":"Variable Description Default value C_FILTER_REGEX_INCLUDE Custom regex including filter C_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/c_cpplint/","text":"cpplint cpplint documentation Version in Mega-Linter: 1.5.4 Visit Official Web Site See Index of problems detected by cpplint Configuration in Mega-Linter Enable cpplint by adding C_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding C_CPPLINT in DISABLE_LINTERS variable Variable Description Default value C_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" C_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file C_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file C_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".c\", \".h\"] C_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file C_CPPLINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 Behind the scenes How are identified applicable files File extensions: .c .h Example calls cpplint myfile.cpp Help content Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['cxx', 'cc', 'cu', 'hpp', 'h', 'h++', 'cpp', 'c++', 'cuh', 'hh', 'hxx', 'c']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" and \"FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=whitespace,runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=cxx,cc,cu,hpp,h,h++,cpp,c++,cuh,hh,hxx,c includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions {'hpp', 'h++', 'h', 'cuh', 'hh', 'hxx'} will be assumed to be headers) Examples: --headers=hpp,h++,h,cuh,hh,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories. Installation on mega-linter Docker image PIP packages (Python): cpplint Example success log Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/c_cpplint/ ----------------------------------------------- [SUCCESS] .automation/test/c/c_good_01.c Done processing .automation/test/c/c_good_01.c Example error log Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/c_cpplint/ ----------------------------------------------- [ERROR] .automation/test/c/c_bad_01.c .automation/test/c/c_bad_01.c:0: No copyright message found. You should have a line: \"Copyright [year] <Copyright Owner>\" [legal/copyright] [5] .automation/test/c/c_bad_01.c:6: Could not find a newline character at the end of the file. [whitespace/ending_newline] [5] Done processing .automation/test/c/c_bad_01.c Total errors found: 2","title":"cpplint"},{"location":"descriptors/c_cpplint/#cpplint","text":"","title":"cpplint"},{"location":"descriptors/c_cpplint/#cpplint-documentation","text":"Version in Mega-Linter: 1.5.4 Visit Official Web Site See Index of problems detected by cpplint","title":"cpplint documentation"},{"location":"descriptors/c_cpplint/#configuration-in-mega-linter","text":"Enable cpplint by adding C_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding C_CPPLINT in DISABLE_LINTERS variable Variable Description Default value C_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" C_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file C_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file C_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".c\", \".h\"] C_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file C_CPPLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/c_cpplint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35","title":"Mega-Linter Flavours"},{"location":"descriptors/c_cpplint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/c_cpplint/#how-are-identified-applicable-files","text":"File extensions: .c .h","title":"How are identified applicable files"},{"location":"descriptors/c_cpplint/#example-calls","text":"cpplint myfile.cpp","title":"Example calls"},{"location":"descriptors/c_cpplint/#help-content","text":"Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['cxx', 'cc', 'cu', 'hpp', 'h', 'h++', 'cpp', 'c++', 'cuh', 'hh', 'hxx', 'c']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" and \"FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=whitespace,runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=cxx,cc,cu,hpp,h,h++,cpp,c++,cuh,hh,hxx,c includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions {'hpp', 'h++', 'h', 'cuh', 'hh', 'hxx'} will be assumed to be headers) Examples: --headers=hpp,h++,h,cuh,hh,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories.","title":"Help content"},{"location":"descriptors/c_cpplint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): cpplint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/c_cpplint/#example-success-log","text":"Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/c_cpplint/ ----------------------------------------------- [SUCCESS] .automation/test/c/c_good_01.c Done processing .automation/test/c/c_good_01.c","title":"Example success log"},{"location":"descriptors/c_cpplint/#example-error-log","text":"Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/c_cpplint/ ----------------------------------------------- [ERROR] .automation/test/c/c_bad_01.c .automation/test/c/c_bad_01.c:0: No copyright message found. You should have a line: \"Copyright [year] <Copyright Owner>\" [legal/copyright] [5] .automation/test/c/c_bad_01.c:6: Could not find a newline character at the end of the file. [whitespace/ending_newline] [5] Done processing .automation/test/c/c_bad_01.c Total errors found: 2","title":"Example error log"},{"location":"descriptors/clojure/","text":"CLOJURE Linters Linter Configuration key clj-kondo CLOJURE Linted files File extensions: .clj .cljs .cljc .edn Configuration in Mega-Linter Variable Description Default value CLOJURE_FILTER_REGEX_INCLUDE Custom regex including filter CLOJURE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All CLOJURE linters"},{"location":"descriptors/clojure/#clojure","text":"","title":"CLOJURE"},{"location":"descriptors/clojure/#linters","text":"Linter Configuration key clj-kondo CLOJURE","title":"Linters"},{"location":"descriptors/clojure/#linted-files","text":"File extensions: .clj .cljs .cljc .edn","title":"Linted files"},{"location":"descriptors/clojure/#configuration-in-mega-linter","text":"Variable Description Default value CLOJURE_FILTER_REGEX_INCLUDE Custom regex including filter CLOJURE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/clojure_clj_kondo/","text":"clj-kondo documentation Version in Mega-Linter: 2020.09.09 Visit Official Web Site See How to configure clj-kondo rules If custom .clj-kondo/config.edn is not found, .clj-kondo/config.edn will be used See Index of problems detected by clj-kondo Configuration in Mega-Linter Enable clj-kondo by adding CLOJURE_CLJ_KONDO in ENABLE_LINTERS variable Disable clj-kondo by adding CLOJURE_CLJ_KONDO in DISABLE_LINTERS variable Variable Description Default value CLOJURE_CLJ_KONDO_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CLOJURE_CLJ_KONDO_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".clj\", \".cljs\", \".cljc\", \".edn\"] CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOJURE_CLJ_KONDO_FILE_NAME clj-kondo configuration file name Use LINTER_DEFAULT to let the linter find it .clj-kondo/config.edn CLOJURE_CLJ_KONDO_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CLOJURE_CLJ_KONDO_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use clj-kondo in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-kondo Emacs flycheck-clj-kondo Visual Studio Code clj-kondo Visual Studio Code Clojure lint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .clj .cljs .cljc .edn Example calls clj-kondo --lint myfile.clj clj-kondo --lint --config .clj-kondo/config.edn myfile.clj Help content clj-kondo v2020.09.09 Options: --lint <file>: a file can either be a normal file, directory or classpath. In the case of a directory or classpath, only .clj, .cljs and .cljc will be processed. Use - as filename for reading from stdin. --lang <lang>: if lang cannot be derived from the file extension this option will be used. Supported values: clj, cljs, cljc. --cache-dir: when this option is provided, the cache will be resolved to this directory. If --cache is false, this option will be ignored. --cache: if false, won't use cache. Otherwise, will try to resolve cache using `--cache-dir`. If `--cache-dir` is not set, cache is resolved using the nearest `.clj-kondo` directory in the current and parent directories. --config <config>: config may be a file or an EDN expression. See https://cljdoc.org/d/clj-kondo/clj-kondo/2020.09.09/doc/configuration --config-dir <config-dir>: use this config directory instead of auto-detected .clj-kondo dir. --run-as-pod: run clj-kondo as a babashka pod --parallel: lint sources in parallel. Installation on mega-linter Docker image Dockerfile commands : FROM borkdude/clj-kondo:2020.09.09 as clj-kondo COPY --from=clj-kondo /usr/local/bin/clj-kondo /usr/bin/ Example success log Results of clj-kondo linter (version 2020.09.09) See documentation on https://nvuillam.github.io/mega-linter/descriptors/clojure_clj_kondo/ ----------------------------------------------- [SUCCESS] .automation/test/clojure/clojure_good_1.clj linting took 14ms, errors: 0, warnings: 0 Example error log Results of clj-kondo linter (version 2020.09.09) See documentation on https://nvuillam.github.io/mega-linter/descriptors/clojure_clj_kondo/ ----------------------------------------------- [ERROR] .automation/test/clojure/clojure_bad_1.clj .automation/test/clojure/clojure_bad_1.clj:5:5: warning: namespace clojure.set is required but never used .automation/test/clojure/clojure_bad_1.clj:8:2: error: unresolved symbol but-last .automation/test/clojure/clojure_bad_1.clj:12:1: error: clojure.string/join is called with 0 args but expects 1 or 2 .automation/test/clojure/clojure_bad_1.clj:15:17: warning: unused binding y .automation/test/clojure/clojure_bad_1.clj:17:3: warning: redundant do .automation/test/clojure/clojure_bad_1.clj:19:5: warning: inline def .automation/test/clojure/clojure_bad_1.clj:22:7: warning: Redundant let expression. .automation/test/clojure/clojure_bad_1.clj:22:13: warning: unused binding z .automation/test/clojure/clojure_bad_1.clj:24:9: error: y is called with 1 arg but expects 0 .automation/test/clojure/clojure_bad_1.clj:26:9: error: recur argument count mismatch (expected 2, got 0) .automation/test/clojure/clojure_bad_1.clj:29:9: error: h is called with 1 arg but expects 0 .automation/test/clojure/clojure_bad_1.clj:30:9: error: f is called with 1 arg but expects 0 .automation/test/clojure/clojure_bad_1.clj:34:1: warning: redefined var #'foo/private-fn .automation/test/clojure/clojure_bad_1.clj:34:8: warning: Unused private var foo/private-fn .automation/test/clojure/clojure_bad_1.clj:38:6: error: Expected: number, received: keyword. .automation/test/clojure/clojure_bad_1.clj:42:1: error: java.lang.Thread/sleep is called with 3 args but expects 1 or 2 .automation/test/clojure/clojure_bad_1.clj:48:1: error: foo/foo-fn is called with 0 args but expects 2 .automation/test/clojure/clojure_bad_1.clj:51:1: error: #'foo/private-fn is private .automation/test/clojure/clojure_bad_1.clj:54:7: error: duplicate key :a .automation/test/clojure/clojure_bad_1.clj:56:5: error: duplicate set element 1 .automation/test/clojure/clojure_bad_1.clj:58:7: error: missing value for key :b .automation/test/clojure/clojure_bad_1.clj:64:3: warning: missing test assertion linting took 14ms, errors: 13, warnings: 9","title":"clj-kondo"},{"location":"descriptors/clojure_clj_kondo/#clj-kondo-documentation","text":"Version in Mega-Linter: 2020.09.09 Visit Official Web Site See How to configure clj-kondo rules If custom .clj-kondo/config.edn is not found, .clj-kondo/config.edn will be used See Index of problems detected by clj-kondo","title":"clj-kondo documentation"},{"location":"descriptors/clojure_clj_kondo/#configuration-in-mega-linter","text":"Enable clj-kondo by adding CLOJURE_CLJ_KONDO in ENABLE_LINTERS variable Disable clj-kondo by adding CLOJURE_CLJ_KONDO in DISABLE_LINTERS variable Variable Description Default value CLOJURE_CLJ_KONDO_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CLOJURE_CLJ_KONDO_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".clj\", \".cljs\", \".cljc\", \".edn\"] CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOJURE_CLJ_KONDO_FILE_NAME clj-kondo configuration file name Use LINTER_DEFAULT to let the linter find it .clj-kondo/config.edn CLOJURE_CLJ_KONDO_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CLOJURE_CLJ_KONDO_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/clojure_clj_kondo/#ide-integration","text":"Use clj-kondo in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-kondo Emacs flycheck-clj-kondo Visual Studio Code clj-kondo Visual Studio Code Clojure lint","title":"IDE Integration"},{"location":"descriptors/clojure_clj_kondo/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/clojure_clj_kondo/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/clojure_clj_kondo/#how-are-identified-applicable-files","text":"File extensions: .clj .cljs .cljc .edn","title":"How are identified applicable files"},{"location":"descriptors/clojure_clj_kondo/#example-calls","text":"clj-kondo --lint myfile.clj clj-kondo --lint --config .clj-kondo/config.edn myfile.clj","title":"Example calls"},{"location":"descriptors/clojure_clj_kondo/#help-content","text":"clj-kondo v2020.09.09 Options: --lint <file>: a file can either be a normal file, directory or classpath. In the case of a directory or classpath, only .clj, .cljs and .cljc will be processed. Use - as filename for reading from stdin. --lang <lang>: if lang cannot be derived from the file extension this option will be used. Supported values: clj, cljs, cljc. --cache-dir: when this option is provided, the cache will be resolved to this directory. If --cache is false, this option will be ignored. --cache: if false, won't use cache. Otherwise, will try to resolve cache using `--cache-dir`. If `--cache-dir` is not set, cache is resolved using the nearest `.clj-kondo` directory in the current and parent directories. --config <config>: config may be a file or an EDN expression. See https://cljdoc.org/d/clj-kondo/clj-kondo/2020.09.09/doc/configuration --config-dir <config-dir>: use this config directory instead of auto-detected .clj-kondo dir. --run-as-pod: run clj-kondo as a babashka pod --parallel: lint sources in parallel.","title":"Help content"},{"location":"descriptors/clojure_clj_kondo/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM borkdude/clj-kondo:2020.09.09 as clj-kondo COPY --from=clj-kondo /usr/local/bin/clj-kondo /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/clojure_clj_kondo/#example-success-log","text":"Results of clj-kondo linter (version 2020.09.09) See documentation on https://nvuillam.github.io/mega-linter/descriptors/clojure_clj_kondo/ ----------------------------------------------- [SUCCESS] .automation/test/clojure/clojure_good_1.clj linting took 14ms, errors: 0, warnings: 0","title":"Example success log"},{"location":"descriptors/clojure_clj_kondo/#example-error-log","text":"Results of clj-kondo linter (version 2020.09.09) See documentation on https://nvuillam.github.io/mega-linter/descriptors/clojure_clj_kondo/ ----------------------------------------------- [ERROR] .automation/test/clojure/clojure_bad_1.clj .automation/test/clojure/clojure_bad_1.clj:5:5: warning: namespace clojure.set is required but never used .automation/test/clojure/clojure_bad_1.clj:8:2: error: unresolved symbol but-last .automation/test/clojure/clojure_bad_1.clj:12:1: error: clojure.string/join is called with 0 args but expects 1 or 2 .automation/test/clojure/clojure_bad_1.clj:15:17: warning: unused binding y .automation/test/clojure/clojure_bad_1.clj:17:3: warning: redundant do .automation/test/clojure/clojure_bad_1.clj:19:5: warning: inline def .automation/test/clojure/clojure_bad_1.clj:22:7: warning: Redundant let expression. .automation/test/clojure/clojure_bad_1.clj:22:13: warning: unused binding z .automation/test/clojure/clojure_bad_1.clj:24:9: error: y is called with 1 arg but expects 0 .automation/test/clojure/clojure_bad_1.clj:26:9: error: recur argument count mismatch (expected 2, got 0) .automation/test/clojure/clojure_bad_1.clj:29:9: error: h is called with 1 arg but expects 0 .automation/test/clojure/clojure_bad_1.clj:30:9: error: f is called with 1 arg but expects 0 .automation/test/clojure/clojure_bad_1.clj:34:1: warning: redefined var #'foo/private-fn .automation/test/clojure/clojure_bad_1.clj:34:8: warning: Unused private var foo/private-fn .automation/test/clojure/clojure_bad_1.clj:38:6: error: Expected: number, received: keyword. .automation/test/clojure/clojure_bad_1.clj:42:1: error: java.lang.Thread/sleep is called with 3 args but expects 1 or 2 .automation/test/clojure/clojure_bad_1.clj:48:1: error: foo/foo-fn is called with 0 args but expects 2 .automation/test/clojure/clojure_bad_1.clj:51:1: error: #'foo/private-fn is private .automation/test/clojure/clojure_bad_1.clj:54:7: error: duplicate key :a .automation/test/clojure/clojure_bad_1.clj:56:5: error: duplicate set element 1 .automation/test/clojure/clojure_bad_1.clj:58:7: error: missing value for key :b .automation/test/clojure/clojure_bad_1.clj:64:3: warning: missing test assertion linting took 14ms, errors: 13, warnings: 9","title":"Example error log"},{"location":"descriptors/cloudformation/","text":"CLOUDFORMATION Linters Linter Configuration key cfn-lint CLOUDFORMATION Linted files File extensions: .yml .yaml .json Detected file content: AWSTemplateFormatVersion (AWS|Alexa|Custom):: Configuration in Mega-Linter Variable Description Default value CLOUDFORMATION_FILTER_REGEX_INCLUDE Custom regex including filter CLOUDFORMATION_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All CLOUDFORMATION linters"},{"location":"descriptors/cloudformation/#cloudformation","text":"","title":"CLOUDFORMATION"},{"location":"descriptors/cloudformation/#linters","text":"Linter Configuration key cfn-lint CLOUDFORMATION","title":"Linters"},{"location":"descriptors/cloudformation/#linted-files","text":"File extensions: .yml .yaml .json Detected file content: AWSTemplateFormatVersion (AWS|Alexa|Custom)::","title":"Linted files"},{"location":"descriptors/cloudformation/#configuration-in-mega-linter","text":"Variable Description Default value CLOUDFORMATION_FILTER_REGEX_INCLUDE Custom regex including filter CLOUDFORMATION_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/cloudformation_cfn_lint/","text":"cfn-lint documentation Version in Mega-Linter: 0.44.1 Visit Official Web Site If custom .cfnlintrc.yml is not found, .cfnlintrc.yml will be used See Index of problems detected by cfn-lint Configuration in Mega-Linter Enable cfn-lint by adding CLOUDFORMATION_CFN_LINT in ENABLE_LINTERS variable Disable cfn-lint by adding CLOUDFORMATION_CFN_LINT in DISABLE_LINTERS variable Variable Description Default value CLOUDFORMATION_CFN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOUDFORMATION_CFN_LINT_FILE_NAME cfn-lint configuration file name Use LINTER_DEFAULT to let the linter find it .cfnlintrc.yml CLOUDFORMATION_CFN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use cfn-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom atom-cfn-lint IDEA cfn-lint Visual Studio Code vscode-cfn-lint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .yml .yaml .json Detected file content: AWSTemplateFormatVersion (AWS|Alexa|Custom):: Example calls cfn-lint myfile.yml cfn-lint --config-file .cfnlintrc.yml myfile.yml Help content usage: Basic: cfn-lint test.yaml Ignore a rule: cfn-lint -i E3012 -- test.yaml Configure a rule: cfn-lint -x E3012:strict=false -t test.yaml Lint all yaml files in a folder: cfn-lint dir/**/*.yaml CloudFormation Linter optional arguments: -h, --help show this help message and exit Standard: TEMPLATE The CloudFormation template to be linted -t TEMPLATE [TEMPLATE ...], --template TEMPLATE [TEMPLATE ...] The CloudFormation template to be linted -b, --ignore-bad-template Ignore failures with Bad template --ignore-templates IGNORE_TEMPLATES [IGNORE_TEMPLATES ...] Ignore templates -f {quiet,parseable,json,junit,pretty}, --format {quiet,parseable,json,junit,pretty} Output Format -l, --list-rules list all the rules -r REGIONS [REGIONS ...], --regions REGIONS [REGIONS ...] list the regions to validate against. -i IGNORE_CHECKS [IGNORE_CHECKS ...], --ignore-checks IGNORE_CHECKS [IGNORE_CHECKS ...] only check rules whose id do not match these values -c INCLUDE_CHECKS [INCLUDE_CHECKS ...], --include-checks INCLUDE_CHECKS [INCLUDE_CHECKS ...] include rules whose id match these values -m MANDATORY_CHECKS [MANDATORY_CHECKS ...], --mandatory-checks MANDATORY_CHECKS [MANDATORY_CHECKS ...] always check rules whose id match these values, regardless of template exclusions -e, --include-experimental Include experimental rules -x CONFIGURE_RULES [CONFIGURE_RULES ...], --configure-rule CONFIGURE_RULES [CONFIGURE_RULES ...] Provide configuration for a rule. Format RuleId:key=value. Example: E3012:strict=false --config-file CONFIG_FILE Specify the cfnlintrc file to use -v, --version Version of cfn-lint --output-file OUTPUT_FILE Writes the output to the specified file, ideal for producing reports Advanced / Debugging: -D, --debug Enable debug logging -I, --info Enable information logging -a APPEND_RULES [APPEND_RULES ...], --append-rules APPEND_RULES [APPEND_RULES ...] specify one or more rules directories using one or more --append-rules arguments. -o OVERRIDE_SPEC, --override-spec OVERRIDE_SPEC A CloudFormation Spec override file that allows customization -g, --build-graph Creates a file in the same directory as the template that models the template's resources in DOT format -s REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...], --registry-schemas REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...] one or more directories of CloudFormation Registry Schemas -u, --update-specs Update the CloudFormation Specs Installation on mega-linter Docker image NPM packages (node.js): asl-validator PIP packages (Python): cfn-lint Example success log Results of cfn-lint linter (version 0.43.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cloudformation_cfn_lint/ ----------------------------------------------- [SUCCESS] .automation/test/cloudformation/cloudformation_good_1.json [SUCCESS] .automation/test/cloudformation/cloudformation_good_2.yaml [SUCCESS] .automation/test/cloudformation/cloudformation_good_3.json [SUCCESS] .automation/test/cloudformation/cloudformation_good_4.yaml Example error log Results of cfn-lint linter (version 0.43.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cloudformation_cfn_lint/ ----------------------------------------------- [ERROR] .automation/test/cloudformation/cloudformation_bad_1.json E3001 Invalid or unsupported Type AWS::Route53::HostedZonee for resource DNS in us-east-1 .automation/test/cloudformation/cloudformation_bad_1.json:6:10 [ERROR] .automation/test/cloudformation/cloudformation_bad_2.yaml E3001 Invalid or unsupported Type AWS::Route53::HostedZonee for resource DNS in us-east-1 .automation/test/cloudformation/cloudformation_bad_2.yaml:5:5 [ERROR] .automation/test/cloudformation/cloudformation_bad_3.json E3002 Invalid Property Resources/myDNSRecord/Properties/Ttl .automation/test/cloudformation/cloudformation_bad_3.json:11:13 [ERROR] .automation/test/cloudformation/cloudformation_bad_4.yaml E3002 Invalid Property Resources/myDNSRecord/Properties/Ttl .automation/test/cloudformation/cloudformation_bad_4.yaml:9:7","title":"cfn-lint"},{"location":"descriptors/cloudformation_cfn_lint/#cfn-lint-documentation","text":"Version in Mega-Linter: 0.44.1 Visit Official Web Site If custom .cfnlintrc.yml is not found, .cfnlintrc.yml will be used See Index of problems detected by cfn-lint","title":"cfn-lint documentation"},{"location":"descriptors/cloudformation_cfn_lint/#configuration-in-mega-linter","text":"Enable cfn-lint by adding CLOUDFORMATION_CFN_LINT in ENABLE_LINTERS variable Disable cfn-lint by adding CLOUDFORMATION_CFN_LINT in DISABLE_LINTERS variable Variable Description Default value CLOUDFORMATION_CFN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOUDFORMATION_CFN_LINT_FILE_NAME cfn-lint configuration file name Use LINTER_DEFAULT to let the linter find it .cfnlintrc.yml CLOUDFORMATION_CFN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/cloudformation_cfn_lint/#ide-integration","text":"Use cfn-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom atom-cfn-lint IDEA cfn-lint Visual Studio Code vscode-cfn-lint","title":"IDE Integration"},{"location":"descriptors/cloudformation_cfn_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/cloudformation_cfn_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/cloudformation_cfn_lint/#how-are-identified-applicable-files","text":"File extensions: .yml .yaml .json Detected file content: AWSTemplateFormatVersion (AWS|Alexa|Custom)::","title":"How are identified applicable files"},{"location":"descriptors/cloudformation_cfn_lint/#example-calls","text":"cfn-lint myfile.yml cfn-lint --config-file .cfnlintrc.yml myfile.yml","title":"Example calls"},{"location":"descriptors/cloudformation_cfn_lint/#help-content","text":"usage: Basic: cfn-lint test.yaml Ignore a rule: cfn-lint -i E3012 -- test.yaml Configure a rule: cfn-lint -x E3012:strict=false -t test.yaml Lint all yaml files in a folder: cfn-lint dir/**/*.yaml CloudFormation Linter optional arguments: -h, --help show this help message and exit Standard: TEMPLATE The CloudFormation template to be linted -t TEMPLATE [TEMPLATE ...], --template TEMPLATE [TEMPLATE ...] The CloudFormation template to be linted -b, --ignore-bad-template Ignore failures with Bad template --ignore-templates IGNORE_TEMPLATES [IGNORE_TEMPLATES ...] Ignore templates -f {quiet,parseable,json,junit,pretty}, --format {quiet,parseable,json,junit,pretty} Output Format -l, --list-rules list all the rules -r REGIONS [REGIONS ...], --regions REGIONS [REGIONS ...] list the regions to validate against. -i IGNORE_CHECKS [IGNORE_CHECKS ...], --ignore-checks IGNORE_CHECKS [IGNORE_CHECKS ...] only check rules whose id do not match these values -c INCLUDE_CHECKS [INCLUDE_CHECKS ...], --include-checks INCLUDE_CHECKS [INCLUDE_CHECKS ...] include rules whose id match these values -m MANDATORY_CHECKS [MANDATORY_CHECKS ...], --mandatory-checks MANDATORY_CHECKS [MANDATORY_CHECKS ...] always check rules whose id match these values, regardless of template exclusions -e, --include-experimental Include experimental rules -x CONFIGURE_RULES [CONFIGURE_RULES ...], --configure-rule CONFIGURE_RULES [CONFIGURE_RULES ...] Provide configuration for a rule. Format RuleId:key=value. Example: E3012:strict=false --config-file CONFIG_FILE Specify the cfnlintrc file to use -v, --version Version of cfn-lint --output-file OUTPUT_FILE Writes the output to the specified file, ideal for producing reports Advanced / Debugging: -D, --debug Enable debug logging -I, --info Enable information logging -a APPEND_RULES [APPEND_RULES ...], --append-rules APPEND_RULES [APPEND_RULES ...] specify one or more rules directories using one or more --append-rules arguments. -o OVERRIDE_SPEC, --override-spec OVERRIDE_SPEC A CloudFormation Spec override file that allows customization -g, --build-graph Creates a file in the same directory as the template that models the template's resources in DOT format -s REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...], --registry-schemas REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...] one or more directories of CloudFormation Registry Schemas -u, --update-specs Update the CloudFormation Specs","title":"Help content"},{"location":"descriptors/cloudformation_cfn_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): asl-validator PIP packages (Python): cfn-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/cloudformation_cfn_lint/#example-success-log","text":"Results of cfn-lint linter (version 0.43.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cloudformation_cfn_lint/ ----------------------------------------------- [SUCCESS] .automation/test/cloudformation/cloudformation_good_1.json [SUCCESS] .automation/test/cloudformation/cloudformation_good_2.yaml [SUCCESS] .automation/test/cloudformation/cloudformation_good_3.json [SUCCESS] .automation/test/cloudformation/cloudformation_good_4.yaml","title":"Example success log"},{"location":"descriptors/cloudformation_cfn_lint/#example-error-log","text":"Results of cfn-lint linter (version 0.43.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cloudformation_cfn_lint/ ----------------------------------------------- [ERROR] .automation/test/cloudformation/cloudformation_bad_1.json E3001 Invalid or unsupported Type AWS::Route53::HostedZonee for resource DNS in us-east-1 .automation/test/cloudformation/cloudformation_bad_1.json:6:10 [ERROR] .automation/test/cloudformation/cloudformation_bad_2.yaml E3001 Invalid or unsupported Type AWS::Route53::HostedZonee for resource DNS in us-east-1 .automation/test/cloudformation/cloudformation_bad_2.yaml:5:5 [ERROR] .automation/test/cloudformation/cloudformation_bad_3.json E3002 Invalid Property Resources/myDNSRecord/Properties/Ttl .automation/test/cloudformation/cloudformation_bad_3.json:11:13 [ERROR] .automation/test/cloudformation/cloudformation_bad_4.yaml E3002 Invalid Property Resources/myDNSRecord/Properties/Ttl .automation/test/cloudformation/cloudformation_bad_4.yaml:9:7","title":"Example error log"},{"location":"descriptors/coffee/","text":"COFFEE Linters Linter Configuration key coffeelint COFFEE Linted files File extensions: .coffee Configuration in Mega-Linter Variable Description Default value COFFEE_FILTER_REGEX_INCLUDE Custom regex including filter COFFEE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All COFFEE linters"},{"location":"descriptors/coffee/#coffee","text":"","title":"COFFEE"},{"location":"descriptors/coffee/#linters","text":"Linter Configuration key coffeelint COFFEE","title":"Linters"},{"location":"descriptors/coffee/#linted-files","text":"File extensions: .coffee","title":"Linted files"},{"location":"descriptors/coffee/#configuration-in-mega-linter","text":"Variable Description Default value COFFEE_FILTER_REGEX_INCLUDE Custom regex including filter COFFEE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/coffee_coffeelint/","text":"coffeelint coffeelint documentation Version in Mega-Linter: 4.1.2 Visit Official Web Site See How to configure coffeelint rules If custom .coffee-lint.json is not found, .coffee-lint.json will be used See How to disable coffeelint rules in files See Index of problems detected by coffeelint Configuration in Mega-Linter Enable coffeelint by adding COFFEE_COFFEELINT in ENABLE_LINTERS variable Disable coffeelint by adding COFFEE_COFFEELINT in DISABLE_LINTERS variable Variable Description Default value COFFEE_COFFEELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file COFFEE_COFFEELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".coffee\"] COFFEE_COFFEELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file COFFEE_COFFEELINT_FILE_NAME coffeelint configuration file name Use LINTER_DEFAULT to let the linter find it .coffee-lint.json COFFEE_COFFEELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules COFFEE_COFFEELINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use coffeelint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-coffeelint IDEA coffeelint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .coffee Example calls coffeelint myfile.coffee coffeelint -f .coffee-lint.json myfile.coffee Help content Usage: coffeelint [options] source [...] Options: -f, --file Specify a custom configuration file. --rules Specify a custom rule or directory of rules. --makeconfig Prints a default config file [boolean] --trimconfig Compares your config with the default and prints a minimal configuration [boolean] --noconfig Ignores any config file. [boolean] -h, --help Show help [boolean] -v, --version Show version number [boolean] -r (not used, but left for backward compatibility) [boolean] --reporter built in reporter (default, csv, jslint, checkstyle, raw), or module, or path to reporter file. --csv [deprecated] use --reporter csv [boolean] --jslint [deprecated] use --reporter jslint [boolean] --nocolor [deprecated] use --color=never [boolean] --checkstyle [deprecated] use --reporter checkstyle [boolean] --color=<when> When to colorize the output. <when> can be one of always, never , or auto. -s, --stdin Lint the source from stdin [boolean] -q, --quiet Only print errors. [boolean] --literate Used with --stdin to process as Literate CoffeeScript [boolean] -c, --cache Cache linting results [boolean] --ext Specify an additional file extension, separated by comma. Installation on mega-linter Docker image NPM packages (node.js): @coffeelint/cli Example success log Results of coffeelint linter (version 4.1.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/coffee_coffeelint/ ----------------------------------------------- [SUCCESS] .automation/test/coffeescript/coffeescript_good_1.coffee \u26a1 .automation/test/coffeescript/coffeescript_good_1.coffee \u26a1 #65-65: Line contains inconsistent indentation. (indentation) Expected 2 got 3. \u26a1 Warning! \u00bb 0 errors and 1 warning in 1 file Example error log Results of coffeelint linter (version 4.1.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/coffee_coffeelint/ ----------------------------------------------- [ERROR] .automation/test/coffeescript/coffeescript_bad_1.coffee \u2717 .automation/test/coffeescript/coffeescript_bad_1.coffee \u2717 #39: [stdin]:39:29: error: unmatched ) module.exports = (robot) -> ) ^. (coffeescript_error) \u2717 Lint! \u00bb 1 error and 0 warnings in 1 file","title":"coffeelint"},{"location":"descriptors/coffee_coffeelint/#coffeelint","text":"","title":"coffeelint"},{"location":"descriptors/coffee_coffeelint/#coffeelint-documentation","text":"Version in Mega-Linter: 4.1.2 Visit Official Web Site See How to configure coffeelint rules If custom .coffee-lint.json is not found, .coffee-lint.json will be used See How to disable coffeelint rules in files See Index of problems detected by coffeelint","title":"coffeelint documentation"},{"location":"descriptors/coffee_coffeelint/#configuration-in-mega-linter","text":"Enable coffeelint by adding COFFEE_COFFEELINT in ENABLE_LINTERS variable Disable coffeelint by adding COFFEE_COFFEELINT in DISABLE_LINTERS variable Variable Description Default value COFFEE_COFFEELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file COFFEE_COFFEELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".coffee\"] COFFEE_COFFEELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file COFFEE_COFFEELINT_FILE_NAME coffeelint configuration file name Use LINTER_DEFAULT to let the linter find it .coffee-lint.json COFFEE_COFFEELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules COFFEE_COFFEELINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/coffee_coffeelint/#ide-integration","text":"Use coffeelint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-coffeelint IDEA coffeelint","title":"IDE Integration"},{"location":"descriptors/coffee_coffeelint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/coffee_coffeelint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/coffee_coffeelint/#how-are-identified-applicable-files","text":"File extensions: .coffee","title":"How are identified applicable files"},{"location":"descriptors/coffee_coffeelint/#example-calls","text":"coffeelint myfile.coffee coffeelint -f .coffee-lint.json myfile.coffee","title":"Example calls"},{"location":"descriptors/coffee_coffeelint/#help-content","text":"Usage: coffeelint [options] source [...] Options: -f, --file Specify a custom configuration file. --rules Specify a custom rule or directory of rules. --makeconfig Prints a default config file [boolean] --trimconfig Compares your config with the default and prints a minimal configuration [boolean] --noconfig Ignores any config file. [boolean] -h, --help Show help [boolean] -v, --version Show version number [boolean] -r (not used, but left for backward compatibility) [boolean] --reporter built in reporter (default, csv, jslint, checkstyle, raw), or module, or path to reporter file. --csv [deprecated] use --reporter csv [boolean] --jslint [deprecated] use --reporter jslint [boolean] --nocolor [deprecated] use --color=never [boolean] --checkstyle [deprecated] use --reporter checkstyle [boolean] --color=<when> When to colorize the output. <when> can be one of always, never , or auto. -s, --stdin Lint the source from stdin [boolean] -q, --quiet Only print errors. [boolean] --literate Used with --stdin to process as Literate CoffeeScript [boolean] -c, --cache Cache linting results [boolean] --ext Specify an additional file extension, separated by comma.","title":"Help content"},{"location":"descriptors/coffee_coffeelint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): @coffeelint/cli","title":"Installation on mega-linter Docker image"},{"location":"descriptors/coffee_coffeelint/#example-success-log","text":"Results of coffeelint linter (version 4.1.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/coffee_coffeelint/ ----------------------------------------------- [SUCCESS] .automation/test/coffeescript/coffeescript_good_1.coffee \u26a1 .automation/test/coffeescript/coffeescript_good_1.coffee \u26a1 #65-65: Line contains inconsistent indentation. (indentation) Expected 2 got 3. \u26a1 Warning! \u00bb 0 errors and 1 warning in 1 file","title":"Example success log"},{"location":"descriptors/coffee_coffeelint/#example-error-log","text":"Results of coffeelint linter (version 4.1.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/coffee_coffeelint/ ----------------------------------------------- [ERROR] .automation/test/coffeescript/coffeescript_bad_1.coffee \u2717 .automation/test/coffeescript/coffeescript_bad_1.coffee \u2717 #39: [stdin]:39:29: error: unmatched ) module.exports = (robot) -> ) ^. (coffeescript_error) \u2717 Lint! \u00bb 1 error and 0 warnings in 1 file","title":"Example error log"},{"location":"descriptors/copypaste/","text":"COPYPASTE Linters Linter Configuration key jscpd COPYPASTE Linted files Configuration in Mega-Linter Variable Description Default value COPYPASTE_FILTER_REGEX_INCLUDE Custom regex including filter COPYPASTE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All COPYPASTE linters"},{"location":"descriptors/copypaste/#copypaste","text":"","title":"COPYPASTE"},{"location":"descriptors/copypaste/#linters","text":"Linter Configuration key jscpd COPYPASTE","title":"Linters"},{"location":"descriptors/copypaste/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/copypaste/#configuration-in-mega-linter","text":"Variable Description Default value COPYPASTE_FILTER_REGEX_INCLUDE Custom regex including filter COPYPASTE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/copypaste_jscpd/","text":"jscpd documentation Version in Mega-Linter: 3.3.23 Visit Official Web Site See How to configure jscpd rules If custom .jscpd.json is not found, .jscpd.json will be used See How to disable jscpd rules in files Configuration in Mega-Linter Enable jscpd by adding COPYPASTE_JSCPD in ENABLE_LINTERS variable Disable jscpd by adding COPYPASTE_JSCPD in DISABLE_LINTERS variable Variable Description Default value COPYPASTE_JSCPD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COPYPASTE_JSCPD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file COPYPASTE_JSCPD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file COPYPASTE_JSCPD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file COPYPASTE_JSCPD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file COPYPASTE_JSCPD_FILE_NAME jscpd configuration file name Use LINTER_DEFAULT to let the linter find it .jscpd.json COPYPASTE_JSCPD_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules COPYPASTE_JSCPD_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use jscpd in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code vscode-jscpd Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files Example calls jscpd --output ./report/copy-paste/ . jscpd --output ./report/copy-paste/ -c .jscpd.json . Help content Usage: jscpd [options] <path ...> detector of copy/paste in files Options: -V, --version output the version number -l, --min-lines [number] min size of duplication in code lines (Default is 5) -k, --min-tokens [number] min size of duplication in code tokens (Default is 50) -x, --max-lines [number] max size of source in lines (Default is 1000) -z, --max-size [string] max size of source in bytes, examples: 1kb, 1mb, 120kb (Default is 100kb) -t, --threshold [number] threshold for duplication, in case duplications >= threshold jscpd will exit with error -c, --config [string] path to config file (Default is .jscpd.json in <path>) -i, --ignore [string] glob pattern for files what should be excluded from duplication detection -r, --reporters [string] reporters or list of reporters separated with comma to use (Default is time,console) -o, --output [string] reporters to use (Default is ./report/) -m, --mode [string] mode of quality of search, can be \"strict\", \"mild\" and \"weak\" (Default is \"function mild(token) { return strict(token) && token.type !== 'empty' && token.type !== 'new_line'; }\") -f, --format [string] format or formats separated by comma (Example php,javascript,python) -p, --pattern [string] glob pattern to file search (Example **/*.txt) -b, --blame blame authors of duplications (get information about authors from git) -s, --silent do not write detection progress and result to a console --store [string] use for define custom store (e.g. --store leveldb used for big codebase) -a, --absolute use absolute path in reports -n, --noSymlinks dont use symlinks for detection in files --ignoreCase ignore case of symbols in code (experimental) -g, --gitignore ignore all files from .gitignore file --formats-exts [string] list of formats with file extensions (javascript:es,es6;dart:dt) -d, --debug show debug information, not run detection process(options list and selected files) -v, --verbose show full information during detection process --list show list of total supported formats --skipLocal skip duplicates in local folders, just detect cross folders duplications -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): jscpd Example success log Results of jscpd linter (version 3.3.22) See documentation on https://nvuillam.github.io/mega-linter/descriptors/copypaste_jscpd/ ----------------------------------------------- [SUCCESS] .automation/test/copypaste/good \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Format \u2502 Files analyzed \u2502 Total lines \u2502 Total tokens \u2502 Clones found \u2502 Duplicated lines \u2502 Duplicated tokens \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 go \u2502 2 \u2502 12 \u2502 52 \u2502 0 \u2502 0 (0%) \u2502 0 (0%) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Total: \u2502 2 \u2502 12 \u2502 52 \u2502 0 \u2502 0 (0%) \u2502 0 (0%) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Found 0 clones. HTML report saved to report/copy-paste/html/ Detection time:: 42.298ms Example error log Results of jscpd linter (version 3.3.22) See documentation on https://nvuillam.github.io/mega-linter/descriptors/copypaste_jscpd/ ----------------------------------------------- [ERROR] .automation/test/copypaste/bad Clone found (go): - copypaste_bad_1.go [1:1 - 33:2] (32 lines, 222 tokens) copypaste_bad_2.go [1:1 - 33:2] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Format \u2502 Files analyzed \u2502 Total lines \u2502 Total tokens \u2502 Clones found \u2502 Duplicated lines \u2502 Duplicated tokens \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 go \u2502 2 \u2502 64 \u2502 444 \u2502 1 \u2502 32 (50%) \u2502 222 (50%) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Total: \u2502 2 \u2502 64 \u2502 444 \u2502 1 \u2502 32 (50%) \u2502 222 (50%) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Found 1 clones. HTML report saved to report/copy-paste/html/ ERROR: jscpd found too many duplicates (50%) over threshold (0%) Error: ERROR: jscpd found too many duplicates (50%) over threshold (0%) at ThresholdReporter.report (/node_modules/@jscpd/finder/dist/reporters/threshold.js:12:19) at /node_modules/@jscpd/finder/dist/in-files-detector.js:82:26 at Array.forEach (<anonymous>) at /node_modules/@jscpd/finder/dist/in-files-detector.js:81:28","title":"jscpd"},{"location":"descriptors/copypaste_jscpd/#jscpd-documentation","text":"Version in Mega-Linter: 3.3.23 Visit Official Web Site See How to configure jscpd rules If custom .jscpd.json is not found, .jscpd.json will be used See How to disable jscpd rules in files","title":"jscpd documentation"},{"location":"descriptors/copypaste_jscpd/#configuration-in-mega-linter","text":"Enable jscpd by adding COPYPASTE_JSCPD in ENABLE_LINTERS variable Disable jscpd by adding COPYPASTE_JSCPD in DISABLE_LINTERS variable Variable Description Default value COPYPASTE_JSCPD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COPYPASTE_JSCPD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file COPYPASTE_JSCPD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file COPYPASTE_JSCPD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file COPYPASTE_JSCPD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file COPYPASTE_JSCPD_FILE_NAME jscpd configuration file name Use LINTER_DEFAULT to let the linter find it .jscpd.json COPYPASTE_JSCPD_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules COPYPASTE_JSCPD_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/copypaste_jscpd/#ide-integration","text":"Use jscpd in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code vscode-jscpd","title":"IDE Integration"},{"location":"descriptors/copypaste_jscpd/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/copypaste_jscpd/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/copypaste_jscpd/#how-are-identified-applicable-files","text":"","title":"How are identified applicable files"},{"location":"descriptors/copypaste_jscpd/#example-calls","text":"jscpd --output ./report/copy-paste/ . jscpd --output ./report/copy-paste/ -c .jscpd.json .","title":"Example calls"},{"location":"descriptors/copypaste_jscpd/#help-content","text":"Usage: jscpd [options] <path ...> detector of copy/paste in files Options: -V, --version output the version number -l, --min-lines [number] min size of duplication in code lines (Default is 5) -k, --min-tokens [number] min size of duplication in code tokens (Default is 50) -x, --max-lines [number] max size of source in lines (Default is 1000) -z, --max-size [string] max size of source in bytes, examples: 1kb, 1mb, 120kb (Default is 100kb) -t, --threshold [number] threshold for duplication, in case duplications >= threshold jscpd will exit with error -c, --config [string] path to config file (Default is .jscpd.json in <path>) -i, --ignore [string] glob pattern for files what should be excluded from duplication detection -r, --reporters [string] reporters or list of reporters separated with comma to use (Default is time,console) -o, --output [string] reporters to use (Default is ./report/) -m, --mode [string] mode of quality of search, can be \"strict\", \"mild\" and \"weak\" (Default is \"function mild(token) { return strict(token) && token.type !== 'empty' && token.type !== 'new_line'; }\") -f, --format [string] format or formats separated by comma (Example php,javascript,python) -p, --pattern [string] glob pattern to file search (Example **/*.txt) -b, --blame blame authors of duplications (get information about authors from git) -s, --silent do not write detection progress and result to a console --store [string] use for define custom store (e.g. --store leveldb used for big codebase) -a, --absolute use absolute path in reports -n, --noSymlinks dont use symlinks for detection in files --ignoreCase ignore case of symbols in code (experimental) -g, --gitignore ignore all files from .gitignore file --formats-exts [string] list of formats with file extensions (javascript:es,es6;dart:dt) -d, --debug show debug information, not run detection process(options list and selected files) -v, --verbose show full information during detection process --list show list of total supported formats --skipLocal skip duplicates in local folders, just detect cross folders duplications -h, --help display help for command","title":"Help content"},{"location":"descriptors/copypaste_jscpd/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): jscpd","title":"Installation on mega-linter Docker image"},{"location":"descriptors/copypaste_jscpd/#example-success-log","text":"Results of jscpd linter (version 3.3.22) See documentation on https://nvuillam.github.io/mega-linter/descriptors/copypaste_jscpd/ ----------------------------------------------- [SUCCESS] .automation/test/copypaste/good \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Format \u2502 Files analyzed \u2502 Total lines \u2502 Total tokens \u2502 Clones found \u2502 Duplicated lines \u2502 Duplicated tokens \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 go \u2502 2 \u2502 12 \u2502 52 \u2502 0 \u2502 0 (0%) \u2502 0 (0%) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Total: \u2502 2 \u2502 12 \u2502 52 \u2502 0 \u2502 0 (0%) \u2502 0 (0%) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Found 0 clones. HTML report saved to report/copy-paste/html/ Detection time:: 42.298ms","title":"Example success log"},{"location":"descriptors/copypaste_jscpd/#example-error-log","text":"Results of jscpd linter (version 3.3.22) See documentation on https://nvuillam.github.io/mega-linter/descriptors/copypaste_jscpd/ ----------------------------------------------- [ERROR] .automation/test/copypaste/bad Clone found (go): - copypaste_bad_1.go [1:1 - 33:2] (32 lines, 222 tokens) copypaste_bad_2.go [1:1 - 33:2] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Format \u2502 Files analyzed \u2502 Total lines \u2502 Total tokens \u2502 Clones found \u2502 Duplicated lines \u2502 Duplicated tokens \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 go \u2502 2 \u2502 64 \u2502 444 \u2502 1 \u2502 32 (50%) \u2502 222 (50%) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Total: \u2502 2 \u2502 64 \u2502 444 \u2502 1 \u2502 32 (50%) \u2502 222 (50%) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Found 1 clones. HTML report saved to report/copy-paste/html/ ERROR: jscpd found too many duplicates (50%) over threshold (0%) Error: ERROR: jscpd found too many duplicates (50%) over threshold (0%) at ThresholdReporter.report (/node_modules/@jscpd/finder/dist/reporters/threshold.js:12:19) at /node_modules/@jscpd/finder/dist/in-files-detector.js:82:26 at Array.forEach (<anonymous>) at /node_modules/@jscpd/finder/dist/in-files-detector.js:81:28","title":"Example error log"},{"location":"descriptors/cpp/","text":"C++ Linters Linter Configuration key cpplint CPP_CPPLINT Linted files File extensions: .cpp .h .cc .hpp .cxx .cu .hxx .c++ .hh .h++ .cuh Configuration in Mega-Linter Variable Description Default value CPP_FILTER_REGEX_INCLUDE Custom regex including filter CPP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All C++ (CPP) linters"},{"location":"descriptors/cpp/#c","text":"","title":"C++"},{"location":"descriptors/cpp/#linters","text":"Linter Configuration key cpplint CPP_CPPLINT","title":"Linters"},{"location":"descriptors/cpp/#linted-files","text":"File extensions: .cpp .h .cc .hpp .cxx .cu .hxx .c++ .hh .h++ .cuh","title":"Linted files"},{"location":"descriptors/cpp/#configuration-in-mega-linter","text":"Variable Description Default value CPP_FILTER_REGEX_INCLUDE Custom regex including filter CPP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/cpp_cpplint/","text":"cpplint cpplint documentation Version in Mega-Linter: 1.5.4 Visit Official Web Site See Index of problems detected by cpplint Configuration in Mega-Linter Enable cpplint by adding CPP_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding CPP_CPPLINT in DISABLE_LINTERS variable Variable Description Default value CPP_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CPP_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CPP_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CPP_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"] CPP_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CPP_CPPLINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 Behind the scenes How are identified applicable files File extensions: .cpp .h .cc .hpp .cxx .cu .hxx .c++ .hh .h++ .cuh Example calls cpplint myfile.cpp Help content Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['cxx', 'cc', 'cu', 'hpp', 'h', 'h++', 'cpp', 'c++', 'cuh', 'hh', 'hxx', 'c']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" and \"FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=whitespace,runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=cxx,cc,cu,hpp,h,h++,cpp,c++,cuh,hh,hxx,c includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions {'hpp', 'h++', 'h', 'cuh', 'hh', 'hxx'} will be assumed to be headers) Examples: --headers=hpp,h++,h,cuh,hh,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories. Installation on mega-linter Docker image PIP packages (Python): cpplint Example success log Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cpp_cpplint/ ----------------------------------------------- [SUCCESS] .automation/test/cpp/cpp_good_01.cpp Done processing .automation/test/cpp/cpp_good_01.cpp Example error log Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cpp_cpplint/ ----------------------------------------------- [ERROR] .automation/test/cpp/cpp_bad_01.cpp .automation/test/cpp/cpp_bad_01.cpp:0: No copyright message found. You should have a line: \"Copyright [year] <Copyright Owner>\" [legal/copyright] [5] .automation/test/cpp/cpp_bad_01.cpp:6: Could not find a newline character at the end of the file. [whitespace/ending_newline] [5] Done processing .automation/test/cpp/cpp_bad_01.cpp Total errors found: 2","title":"cpplint"},{"location":"descriptors/cpp_cpplint/#cpplint","text":"","title":"cpplint"},{"location":"descriptors/cpp_cpplint/#cpplint-documentation","text":"Version in Mega-Linter: 1.5.4 Visit Official Web Site See Index of problems detected by cpplint","title":"cpplint documentation"},{"location":"descriptors/cpp_cpplint/#configuration-in-mega-linter","text":"Enable cpplint by adding CPP_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding CPP_CPPLINT in DISABLE_LINTERS variable Variable Description Default value CPP_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CPP_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CPP_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CPP_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"] CPP_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CPP_CPPLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/cpp_cpplint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35","title":"Mega-Linter Flavours"},{"location":"descriptors/cpp_cpplint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/cpp_cpplint/#how-are-identified-applicable-files","text":"File extensions: .cpp .h .cc .hpp .cxx .cu .hxx .c++ .hh .h++ .cuh","title":"How are identified applicable files"},{"location":"descriptors/cpp_cpplint/#example-calls","text":"cpplint myfile.cpp","title":"Example calls"},{"location":"descriptors/cpp_cpplint/#help-content","text":"Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['cxx', 'cc', 'cu', 'hpp', 'h', 'h++', 'cpp', 'c++', 'cuh', 'hh', 'hxx', 'c']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" and \"FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=whitespace,runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=cxx,cc,cu,hpp,h,h++,cpp,c++,cuh,hh,hxx,c includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions {'hpp', 'h++', 'h', 'cuh', 'hh', 'hxx'} will be assumed to be headers) Examples: --headers=hpp,h++,h,cuh,hh,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories.","title":"Help content"},{"location":"descriptors/cpp_cpplint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): cpplint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/cpp_cpplint/#example-success-log","text":"Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cpp_cpplint/ ----------------------------------------------- [SUCCESS] .automation/test/cpp/cpp_good_01.cpp Done processing .automation/test/cpp/cpp_good_01.cpp","title":"Example success log"},{"location":"descriptors/cpp_cpplint/#example-error-log","text":"Results of cpplint linter (version 1.5.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/cpp_cpplint/ ----------------------------------------------- [ERROR] .automation/test/cpp/cpp_bad_01.cpp .automation/test/cpp/cpp_bad_01.cpp:0: No copyright message found. You should have a line: \"Copyright [year] <Copyright Owner>\" [legal/copyright] [5] .automation/test/cpp/cpp_bad_01.cpp:6: Could not find a newline character at the end of the file. [whitespace/ending_newline] [5] Done processing .automation/test/cpp/cpp_bad_01.cpp Total errors found: 2","title":"Example error log"},{"location":"descriptors/csharp/","text":"C Linters Linter Configuration key dotnet-format CSHARP Linted files File extensions: .cs Configuration in Mega-Linter Variable Description Default value CSHARP_FILTER_REGEX_INCLUDE Custom regex including filter CSHARP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN wget --tries=5 -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel Current -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" APK packages (Linux): lttng-ust-dev zlib zlib-dev","title":"All C# (CSHARP) linters"},{"location":"descriptors/csharp/#c","text":"","title":"C"},{"location":"descriptors/csharp/#linters","text":"Linter Configuration key dotnet-format CSHARP","title":"Linters"},{"location":"descriptors/csharp/#linted-files","text":"File extensions: .cs","title":"Linted files"},{"location":"descriptors/csharp/#configuration-in-mega-linter","text":"Variable Description Default value CSHARP_FILTER_REGEX_INCLUDE Custom regex including filter CSHARP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/csharp/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/csharp/#installation","text":"Dockerfile commands : RUN wget --tries=5 -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel Current -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" APK packages (Linux): lttng-ust-dev zlib zlib-dev","title":"Installation"},{"location":"descriptors/csharp_dotnet_format/","text":"dotnet-format dotnet-format documentation Version in Mega-Linter: 4.1.131201 Visit Official Web Site Configuration in Mega-Linter Enable dotnet-format by adding CSHARP_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding CSHARP_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding CSHARP_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value CSHARP_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSHARP_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CSHARP_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cs\"] CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSHARP_DOTNET_FORMAT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 Behind the scenes How are identified applicable files File extensions: .cs Example calls dotnet-format --folder --check --exclude / --include myfile.cs dotnet-format --folder --exclude / --include myfile.cs Help content dotnet-format: dotnet-format Usage: dotnet-format [options] [<project>] Arguments: <project> The solution or project file to operate on. If a file is not specified, the command will search the current directory for one. Options: -f, --folder <folder> Whether to treat the `<project>` path as a folder of files. [default: ] --files, --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: System.String[]] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: System.String[]] --check, --dry-run Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report> Accepts a file path, which if provided, will produce a json report in the given directory. [default: ] -v, --verbosity <verbosity> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --version Show version information -?, -h, --help Show help and usage information Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel Current -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" # Linter install RUN /usr/share/dotnet/dotnet tool install -g dotnet-format Example success log Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/csharp_dotnet_format/ ----------------------------------------------- [SUCCESS] .automation/test/csharp/csharp_good_01.cs Formatting code files in workspace '.automation/test/csharp'. Format complete in 1181ms. Example error log Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/csharp_dotnet_format/ ----------------------------------------------- [ERROR] .automation/test/csharp/csharp_bad_01.cs Formatting code files in workspace '.automation/test/csharp'. csharp/csharp_bad_01.cs(1,33): Fix whitespace formatting. Formatted code file '.automation/test/csharp/csharp_bad_01.cs'. Format complete in 1295ms.","title":"dotnet-format"},{"location":"descriptors/csharp_dotnet_format/#dotnet-format","text":"","title":"dotnet-format"},{"location":"descriptors/csharp_dotnet_format/#dotnet-format-documentation","text":"Version in Mega-Linter: 4.1.131201 Visit Official Web Site","title":"dotnet-format documentation"},{"location":"descriptors/csharp_dotnet_format/#configuration-in-mega-linter","text":"Enable dotnet-format by adding CSHARP_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding CSHARP_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding CSHARP_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value CSHARP_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSHARP_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CSHARP_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cs\"] CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSHARP_DOTNET_FORMAT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/csharp_dotnet_format/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35","title":"Mega-Linter Flavours"},{"location":"descriptors/csharp_dotnet_format/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/csharp_dotnet_format/#how-are-identified-applicable-files","text":"File extensions: .cs","title":"How are identified applicable files"},{"location":"descriptors/csharp_dotnet_format/#example-calls","text":"dotnet-format --folder --check --exclude / --include myfile.cs dotnet-format --folder --exclude / --include myfile.cs","title":"Example calls"},{"location":"descriptors/csharp_dotnet_format/#help-content","text":"dotnet-format: dotnet-format Usage: dotnet-format [options] [<project>] Arguments: <project> The solution or project file to operate on. If a file is not specified, the command will search the current directory for one. Options: -f, --folder <folder> Whether to treat the `<project>` path as a folder of files. [default: ] --files, --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: System.String[]] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: System.String[]] --check, --dry-run Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report> Accepts a file path, which if provided, will produce a json report in the given directory. [default: ] -v, --verbosity <verbosity> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --version Show version information -?, -h, --help Show help and usage information","title":"Help content"},{"location":"descriptors/csharp_dotnet_format/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel Current -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" # Linter install RUN /usr/share/dotnet/dotnet tool install -g dotnet-format","title":"Installation on mega-linter Docker image"},{"location":"descriptors/csharp_dotnet_format/#example-success-log","text":"Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/csharp_dotnet_format/ ----------------------------------------------- [SUCCESS] .automation/test/csharp/csharp_good_01.cs Formatting code files in workspace '.automation/test/csharp'. Format complete in 1181ms.","title":"Example success log"},{"location":"descriptors/csharp_dotnet_format/#example-error-log","text":"Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/csharp_dotnet_format/ ----------------------------------------------- [ERROR] .automation/test/csharp/csharp_bad_01.cs Formatting code files in workspace '.automation/test/csharp'. csharp/csharp_bad_01.cs(1,33): Fix whitespace formatting. Formatted code file '.automation/test/csharp/csharp_bad_01.cs'. Format complete in 1295ms.","title":"Example error log"},{"location":"descriptors/css/","text":"CSS Linters Linter Configuration key stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT Linted files File extensions: .css .scss .saas Configuration in Mega-Linter Variable Description Default value CSS_FILTER_REGEX_INCLUDE Custom regex including filter CSS_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All CSS linters"},{"location":"descriptors/css/#css","text":"","title":"CSS"},{"location":"descriptors/css/#linters","text":"Linter Configuration key stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT","title":"Linters"},{"location":"descriptors/css/#linted-files","text":"File extensions: .css .scss .saas","title":"Linted files"},{"location":"descriptors/css/#configuration-in-mega-linter","text":"Variable Description Default value CSS_FILTER_REGEX_INCLUDE Custom regex including filter CSS_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/css_scss_lint/","text":"scss-lint documentation Version in Mega-Linter: 0.59.0 Visit Official Web Site See How to configure scss-lint rules See How to disable scss-lint rules in files Configuration in Mega-Linter Enable scss-lint by adding CSS_SCSS_LINT in ENABLE_LINTERS variable Disable scss-lint by adding CSS_SCSS_LINT in DISABLE_LINTERS variable Variable Description Default value CSS_SCSS_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_SCSS_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CSS_SCSS_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scss\", \".saas\"] CSS_SCSS_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_SCSS_LINT_FILE_NAME scss-lint configuration file name Use LINTER_DEFAULT to let the linter find it .scss-lint.yml CSS_SCSS_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CSS_SCSS_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use scss-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-scss-lint IDEA scss-lint-plugin Visual Studio Code scss-lint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .scss .saas Example calls scss-lint myfile.scss scss-lint -config .scss-lint.yml myfile.scss Help content Usage: scss-lint [options] [scss-files] -f, --format Formatter Specify how to display lints -r, --require path Require Ruby file -i, --include-linter linter,... Specify which linters you want to run -x, --exclude-linter linter,... Specify which linters you don't want to run -c, --config config-file Specify which configuration file you want to use -e, --exclude file,... List of file names to exclude --stdin-file-path file-path Specify the path to assume for the file passed via STDIN -o, --out path Write output to a file instead of STDOUT --[no-]color Force output to be colorized --show-formatters Shows available formatters --show-linters Display available linters -h, --help Display help documentation -v, --version Display version Installation on mega-linter Docker image GEM packages (Ruby) : scss_lint Example success log Results of scss-lint linter (version 0.59.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_scss_lint/ ----------------------------------------------- [SUCCESS] .automation/test/scss/scss_good_01.scss Example error log Results of scss-lint linter (version 0.59.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_scss_lint/ ----------------------------------------------- [ERROR] .automation/test/scss/scss_bad_01.scss .automation/test/scss/scss_bad_01.scss:15:1 [E] Syntax: Syntax Error: Invalid CSS after \" }\": expected selector or at-rule, was \"}\"","title":"scss-lint"},{"location":"descriptors/css_scss_lint/#scss-lint-documentation","text":"Version in Mega-Linter: 0.59.0 Visit Official Web Site See How to configure scss-lint rules See How to disable scss-lint rules in files","title":"scss-lint documentation"},{"location":"descriptors/css_scss_lint/#configuration-in-mega-linter","text":"Enable scss-lint by adding CSS_SCSS_LINT in ENABLE_LINTERS variable Disable scss-lint by adding CSS_SCSS_LINT in DISABLE_LINTERS variable Variable Description Default value CSS_SCSS_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_SCSS_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CSS_SCSS_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scss\", \".saas\"] CSS_SCSS_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_SCSS_LINT_FILE_NAME scss-lint configuration file name Use LINTER_DEFAULT to let the linter find it .scss-lint.yml CSS_SCSS_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CSS_SCSS_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/css_scss_lint/#ide-integration","text":"Use scss-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-scss-lint IDEA scss-lint-plugin Visual Studio Code scss-lint","title":"IDE Integration"},{"location":"descriptors/css_scss_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/css_scss_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/css_scss_lint/#how-are-identified-applicable-files","text":"File extensions: .scss .saas","title":"How are identified applicable files"},{"location":"descriptors/css_scss_lint/#example-calls","text":"scss-lint myfile.scss scss-lint -config .scss-lint.yml myfile.scss","title":"Example calls"},{"location":"descriptors/css_scss_lint/#help-content","text":"Usage: scss-lint [options] [scss-files] -f, --format Formatter Specify how to display lints -r, --require path Require Ruby file -i, --include-linter linter,... Specify which linters you want to run -x, --exclude-linter linter,... Specify which linters you don't want to run -c, --config config-file Specify which configuration file you want to use -e, --exclude file,... List of file names to exclude --stdin-file-path file-path Specify the path to assume for the file passed via STDIN -o, --out path Write output to a file instead of STDOUT --[no-]color Force output to be colorized --show-formatters Shows available formatters --show-linters Display available linters -h, --help Display help documentation -v, --version Display version","title":"Help content"},{"location":"descriptors/css_scss_lint/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : scss_lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/css_scss_lint/#example-success-log","text":"Results of scss-lint linter (version 0.59.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_scss_lint/ ----------------------------------------------- [SUCCESS] .automation/test/scss/scss_good_01.scss","title":"Example success log"},{"location":"descriptors/css_scss_lint/#example-error-log","text":"Results of scss-lint linter (version 0.59.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_scss_lint/ ----------------------------------------------- [ERROR] .automation/test/scss/scss_bad_01.scss .automation/test/scss/scss_bad_01.scss:15:1 [E] Syntax: Syntax Error: Invalid CSS after \" }\": expected selector or at-rule, was \"}\"","title":"Example error log"},{"location":"descriptors/css_stylelint/","text":"stylelint documentation Version in Mega-Linter: 13.8.0 Visit Official Web Site See How to configure stylelint rules If custom .stylelintrc.json is not found, .stylelintrc.json will be used See How to disable stylelint rules in files See Index of problems detected by stylelint Configuration in Mega-Linter Enable stylelint by adding CSS_STYLELINT in ENABLE_LINTERS variable Disable stylelint by adding CSS_STYLELINT in DISABLE_LINTERS variable Enable auto-fixes by adding CSS_STYLELINT in APPLY_FIXES variable Variable Description Default value CSS_STYLELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_STYLELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CSS_STYLELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CSS_STYLELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".css\", \".scss\", \".saas\"] CSS_STYLELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_STYLELINT_FILE_NAME stylelint configuration file name Use LINTER_DEFAULT to let the linter find it .stylelintrc.json CSS_STYLELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CSS_STYLELINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use stylelint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-stylelint Emacs flycheck Sublime Text SublimeLinter-stylelint Sublime Text SublimeLinter-contrib-stylelint_d vim ale Visual Studio Code vscode-stylelint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .css .scss .saas Example calls stylelint myfile.css stylelint --config .stylelintrc.json myfile.css stylelint --fix --config .stylelintrc.json myfile.css Help content A mighty, modern CSS linter. Usage: stylelint [input] [options] Input: Files(s), glob(s), or nothing to use stdin. If an input argument is wrapped in quotation marks, it will be passed to globby for cross-platform glob support. node_modules are always ignored. You can also pass no input and use stdin, instead. Options: --config Path to a specific configuration file (JSON, YAML, or CommonJS), or the name of a module in node_modules that points to one. If no --config argument is provided, stylelint will search for configuration files in the following places, in this order: - a stylelint property in package.json - a .stylelintrc file (with or without filename extension: .json, .yaml, .yml, and .js are available) - a stylelint.config.js file exporting a JS object The search will begin in the working directory and move up the directory tree until a configuration file is found. --config-basedir An absolute path to the directory that relative paths defining \"extends\" and \"plugins\" are *relative to*. Only necessary if these values are relative paths. --print-config Print the configuration for the given path. --ignore-path, -i Path to a file containing patterns that describe files to ignore. The path can be absolute or relative to process.cwd(). By default, stylelint looks for .stylelintignore in process.cwd(). --ignore-pattern, --ip Pattern of files to ignore (in addition to those in .stylelintignore) --syntax, -s Specify a syntax. Options: \"css\", \"css-in-js\", \"html\", \"less\", \"markdown\", \"sass\", \"scss\", \"sugarss\". If you do not specify a syntax, syntaxes will be automatically inferred by the file extensions and file content. --fix Automatically fix violations of certain rules. --custom-syntax Module name or path to a JS file exporting a PostCSS-compatible syntax. --stdin Accept stdin input even if it is empty. --stdin-filename A filename to assign stdin input. --ignore-disables, --id Ignore styleline-disable comments. --disable-default-ignores, --di Allow linting of node_modules. --cache [default: false] Store the info about processed files in order to only operate on the changed ones the next time you run stylelint. By default, the cache is stored in \"./.stylelintcache\". To adjust this, use --cache-location. --cache-location [default: '.stylelintcache'] Path to a file or directory to be used for the cache location. Default is \"./.stylelintcache\". If a directory is specified, a cache file will be created inside the specified folder, with a name derived from a hash of the current working directory. If the directory for the cache does not exist, make sure you add a trailing \"/\" on *nix systems or \"\\\" on Windows. Otherwise the path will be assumed to be a file. --formatter, -f [default: \"string\"] The output formatter: \"compact\", \"json\", \"string\", \"unix\" or \"verbose\". --custom-formatter Path to a JS file exporting a custom formatting function. --quiet, -q Only register violations for rules with an \"error\"-level severity (ignore \"warning\"-level). --color --no-color Force enabling/disabling of color. --report-needless-disables, --rd Also report errors for stylelint-disable comments that are not blocking a lint warning. The process will exit with code 2 if needless disables are found. --report-invalid-scope-disables, --risd Report stylelint-disable comments that used for rules that don't exist within the configuration object. The process will exit with code 2 if invalid scope disables are found. --report-descriptionless-disables, --rdd Report stylelint-disable comments without a description. The process will exit with code 2 if descriptionless disables are found. --max-warnings, --mw Number of warnings above which the process will exit with code 2. Useful when setting \"defaultSeverity\" to \"warning\" and expecting the process to fail on warnings (e.g. CI build). --output-file, -o Path of file to write report. --version, -v Show the currently installed version of stylelint. --allow-empty-input, --aei When glob pattern matches no files, the process will exit without throwing an error. Installation on mega-linter Docker image NPM packages (node.js): stylelint stylelint-config-standard Example success log Results of stylelint linter (version 13.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_stylelint/ ----------------------------------------------- [SUCCESS] .automation/test/css/css_good_01.css Example error log Results of stylelint linter (version 13.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_stylelint/ ----------------------------------------------- [ERROR] .automation/test/css/css_bad_01.css .automation/test/css/css_bad_01.css 2:1 \u2716 Expected empty line before comment comment-empty-line-before 3:1 \u2716 Expected empty line before comment comment-empty-line-before 5:5 \u2716 Expected indentation of 2 spaces indentation 5:33 \u2716 Expected \"#FFFFFF\" to be \"#ffffff\" color-hex-case 5:33 \u2716 Expected \"#FFFFFF\" to be \"#FFF\" color-hex-length 6:5 \u2716 Expected indentation of 2 spaces indentation 7:5 \u2716 Expected indentation of 2 spaces indentation 8:5 \u2716 Expected indentation of 2 spaces indentation 8:12 \u2716 Expected \"#AAAAAA\" to be \"#aaaaaa\" color-hex-case 8:12 \u2716 Expected \"#AAAAAA\" to be \"#AAA\" color-hex-length","title":"stylelint"},{"location":"descriptors/css_stylelint/#stylelint-documentation","text":"Version in Mega-Linter: 13.8.0 Visit Official Web Site See How to configure stylelint rules If custom .stylelintrc.json is not found, .stylelintrc.json will be used See How to disable stylelint rules in files See Index of problems detected by stylelint","title":"stylelint documentation"},{"location":"descriptors/css_stylelint/#configuration-in-mega-linter","text":"Enable stylelint by adding CSS_STYLELINT in ENABLE_LINTERS variable Disable stylelint by adding CSS_STYLELINT in DISABLE_LINTERS variable Enable auto-fixes by adding CSS_STYLELINT in APPLY_FIXES variable Variable Description Default value CSS_STYLELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_STYLELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file CSS_STYLELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file CSS_STYLELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".css\", \".scss\", \".saas\"] CSS_STYLELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_STYLELINT_FILE_NAME stylelint configuration file name Use LINTER_DEFAULT to let the linter find it .stylelintrc.json CSS_STYLELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules CSS_STYLELINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/css_stylelint/#ide-integration","text":"Use stylelint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-stylelint Emacs flycheck Sublime Text SublimeLinter-stylelint Sublime Text SublimeLinter-contrib-stylelint_d vim ale Visual Studio Code vscode-stylelint","title":"IDE Integration"},{"location":"descriptors/css_stylelint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/css_stylelint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/css_stylelint/#how-are-identified-applicable-files","text":"File extensions: .css .scss .saas","title":"How are identified applicable files"},{"location":"descriptors/css_stylelint/#example-calls","text":"stylelint myfile.css stylelint --config .stylelintrc.json myfile.css stylelint --fix --config .stylelintrc.json myfile.css","title":"Example calls"},{"location":"descriptors/css_stylelint/#help-content","text":"A mighty, modern CSS linter. Usage: stylelint [input] [options] Input: Files(s), glob(s), or nothing to use stdin. If an input argument is wrapped in quotation marks, it will be passed to globby for cross-platform glob support. node_modules are always ignored. You can also pass no input and use stdin, instead. Options: --config Path to a specific configuration file (JSON, YAML, or CommonJS), or the name of a module in node_modules that points to one. If no --config argument is provided, stylelint will search for configuration files in the following places, in this order: - a stylelint property in package.json - a .stylelintrc file (with or without filename extension: .json, .yaml, .yml, and .js are available) - a stylelint.config.js file exporting a JS object The search will begin in the working directory and move up the directory tree until a configuration file is found. --config-basedir An absolute path to the directory that relative paths defining \"extends\" and \"plugins\" are *relative to*. Only necessary if these values are relative paths. --print-config Print the configuration for the given path. --ignore-path, -i Path to a file containing patterns that describe files to ignore. The path can be absolute or relative to process.cwd(). By default, stylelint looks for .stylelintignore in process.cwd(). --ignore-pattern, --ip Pattern of files to ignore (in addition to those in .stylelintignore) --syntax, -s Specify a syntax. Options: \"css\", \"css-in-js\", \"html\", \"less\", \"markdown\", \"sass\", \"scss\", \"sugarss\". If you do not specify a syntax, syntaxes will be automatically inferred by the file extensions and file content. --fix Automatically fix violations of certain rules. --custom-syntax Module name or path to a JS file exporting a PostCSS-compatible syntax. --stdin Accept stdin input even if it is empty. --stdin-filename A filename to assign stdin input. --ignore-disables, --id Ignore styleline-disable comments. --disable-default-ignores, --di Allow linting of node_modules. --cache [default: false] Store the info about processed files in order to only operate on the changed ones the next time you run stylelint. By default, the cache is stored in \"./.stylelintcache\". To adjust this, use --cache-location. --cache-location [default: '.stylelintcache'] Path to a file or directory to be used for the cache location. Default is \"./.stylelintcache\". If a directory is specified, a cache file will be created inside the specified folder, with a name derived from a hash of the current working directory. If the directory for the cache does not exist, make sure you add a trailing \"/\" on *nix systems or \"\\\" on Windows. Otherwise the path will be assumed to be a file. --formatter, -f [default: \"string\"] The output formatter: \"compact\", \"json\", \"string\", \"unix\" or \"verbose\". --custom-formatter Path to a JS file exporting a custom formatting function. --quiet, -q Only register violations for rules with an \"error\"-level severity (ignore \"warning\"-level). --color --no-color Force enabling/disabling of color. --report-needless-disables, --rd Also report errors for stylelint-disable comments that are not blocking a lint warning. The process will exit with code 2 if needless disables are found. --report-invalid-scope-disables, --risd Report stylelint-disable comments that used for rules that don't exist within the configuration object. The process will exit with code 2 if invalid scope disables are found. --report-descriptionless-disables, --rdd Report stylelint-disable comments without a description. The process will exit with code 2 if descriptionless disables are found. --max-warnings, --mw Number of warnings above which the process will exit with code 2. Useful when setting \"defaultSeverity\" to \"warning\" and expecting the process to fail on warnings (e.g. CI build). --output-file, -o Path of file to write report. --version, -v Show the currently installed version of stylelint. --allow-empty-input, --aei When glob pattern matches no files, the process will exit without throwing an error.","title":"Help content"},{"location":"descriptors/css_stylelint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): stylelint stylelint-config-standard","title":"Installation on mega-linter Docker image"},{"location":"descriptors/css_stylelint/#example-success-log","text":"Results of stylelint linter (version 13.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_stylelint/ ----------------------------------------------- [SUCCESS] .automation/test/css/css_good_01.css","title":"Example success log"},{"location":"descriptors/css_stylelint/#example-error-log","text":"Results of stylelint linter (version 13.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/css_stylelint/ ----------------------------------------------- [ERROR] .automation/test/css/css_bad_01.css .automation/test/css/css_bad_01.css 2:1 \u2716 Expected empty line before comment comment-empty-line-before 3:1 \u2716 Expected empty line before comment comment-empty-line-before 5:5 \u2716 Expected indentation of 2 spaces indentation 5:33 \u2716 Expected \"#FFFFFF\" to be \"#ffffff\" color-hex-case 5:33 \u2716 Expected \"#FFFFFF\" to be \"#FFF\" color-hex-length 6:5 \u2716 Expected indentation of 2 spaces indentation 7:5 \u2716 Expected indentation of 2 spaces indentation 8:5 \u2716 Expected indentation of 2 spaces indentation 8:12 \u2716 Expected \"#AAAAAA\" to be \"#aaaaaa\" color-hex-case 8:12 \u2716 Expected \"#AAAAAA\" to be \"#AAA\" color-hex-length","title":"Example error log"},{"location":"descriptors/dart/","text":"DART Linters Linter Configuration key dartanalyzer DART Linted files File extensions: .dart Configuration in Mega-Linter Variable Description Default value DART_FILTER_REGEX_INCLUDE Custom regex including filter DART_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All DART linters"},{"location":"descriptors/dart/#dart","text":"","title":"DART"},{"location":"descriptors/dart/#linters","text":"Linter Configuration key dartanalyzer DART","title":"Linters"},{"location":"descriptors/dart/#linted-files","text":"File extensions: .dart","title":"Linted files"},{"location":"descriptors/dart/#configuration-in-mega-linter","text":"Variable Description Default value DART_FILTER_REGEX_INCLUDE Custom regex including filter DART_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/dart_dartanalyzer/","text":"dartanalyzer documentation Visit Official Web Site See How to configure dartanalyzer rules If custom analysis_options.yml is not found, analysis_options.yml will be used See How to disable dartanalyzer rules in files Configuration in Mega-Linter Enable dartanalyzer by adding DART_DARTANALYZER in ENABLE_LINTERS variable Disable dartanalyzer by adding DART_DARTANALYZER in DISABLE_LINTERS variable Variable Description Default value DART_DARTANALYZER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DART_DARTANALYZER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file DART_DARTANALYZER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file DART_DARTANALYZER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".dart\"] DART_DARTANALYZER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file DART_DARTANALYZER_FILE_NAME dartanalyzer configuration file name Use LINTER_DEFAULT to let the linter find it analysis_options.yml DART_DARTANALYZER_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules DART_DARTANALYZER_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use dartanalyzer in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA dart-jetbrains-plugin Visual Studio Code dart-code Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 Behind the scenes How are identified applicable files File extensions: .dart Example calls dartanalyzer --fatal-infos --fatal-warnings myfile.dart dartanalyzer --fatal-infos --fatal-warnings --options analysis_options.yml myfile.dart Help content Usage: dartanalyzer [options...] <directory or list of files> --dart-sdk The path to the Dart SDK. --options Path to an analysis options file. --package-root The path to a package root directory (deprecated). This option cannot be used with --packages. --[no-]declaration-casts Disable declaration casts in strong mode (https://goo.gl/cTLz40) This option is now ignored and will be removed in a future release. --[no-]implicit-casts Disable implicit casts in strong mode (https://goo.gl/cTLz40). --no-implicit-dynamic Disable implicit dynamic (https://goo.gl/m0UgXD). --packages The path to the package resolution configuration file, which supplies a mapping of package names to paths. This option cannot be used with --package-root. --[no-]lints Show lint results. --format Specifies the format in which errors are displayed; the only currently allowed value is 'machine'. --version Print the analyzer version. --enable-experiment Enable one or more experimental features. If multiple features are being added, they should be comma separated. --no-hints Do not show hint results. --fatal-infos Treat infos as fatal. --fatal-warnings Treat non-type warnings as fatal. -h, --help Display this help message. Add --verbose to show hidden options. -v, --verbose Verbose output. --default-language-version The default language version when it is not specified via other ways (internal, tests only). Run \"dartanalyzer -h -v\" for verbose help output, including less commonly used options. For more information, see https://www.dartlang.org/tools/analyzer. Installation on mega-linter Docker image Dockerfile commands : ARG DART_VERSION='2.8.4' ARG GLIBC_VERSION='2.31-r0' RUN wget --tries=5 -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\ && wget --tries=5 https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk \\ && apk add --no-cache glibc-${GLIBC_VERSION}.apk && rm glibc-${GLIBC_VERSION}.apk \\ && wget --tries=5 https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-x64-release.zip -O - -q | unzip -q - \\ && chmod +x dart-sdk/bin/dart* \\ && mv dart-sdk/bin/* /usr/bin/ && mv dart-sdk/lib/* /usr/lib/ && mv dart-sdk/include/* /usr/include/ \\ && rm -r dart-sdk/ Example success log Results of dartanalyzer linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dart_dartanalyzer/ ----------------------------------------------- [SUCCESS] .automation/test/dart/dart_good_1.dart Analyzing .automation/test/dart/dart_good_1.dart... No issues found! Example error log Results of dartanalyzer linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dart_dartanalyzer/ ----------------------------------------------- [ERROR] .automation/test/dart/dart_bad_1.dart Analyzing .automation/test/dart/dart_bad_1.dart... lint \u2022 Use `;` instead of `{}` for empty constructor bodies. \u2022 .automation/test/dart/dart_bad_1.dart:4:25 \u2022 empty_constructor_bodies 1 lint found.","title":"dartanalyzer"},{"location":"descriptors/dart_dartanalyzer/#dartanalyzer-documentation","text":"Visit Official Web Site See How to configure dartanalyzer rules If custom analysis_options.yml is not found, analysis_options.yml will be used See How to disable dartanalyzer rules in files","title":"dartanalyzer documentation"},{"location":"descriptors/dart_dartanalyzer/#configuration-in-mega-linter","text":"Enable dartanalyzer by adding DART_DARTANALYZER in ENABLE_LINTERS variable Disable dartanalyzer by adding DART_DARTANALYZER in DISABLE_LINTERS variable Variable Description Default value DART_DARTANALYZER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DART_DARTANALYZER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file DART_DARTANALYZER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file DART_DARTANALYZER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".dart\"] DART_DARTANALYZER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file DART_DARTANALYZER_FILE_NAME dartanalyzer configuration file name Use LINTER_DEFAULT to let the linter find it analysis_options.yml DART_DARTANALYZER_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules DART_DARTANALYZER_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/dart_dartanalyzer/#ide-integration","text":"Use dartanalyzer in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA dart-jetbrains-plugin Visual Studio Code dart-code","title":"IDE Integration"},{"location":"descriptors/dart_dartanalyzer/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30","title":"Mega-Linter Flavours"},{"location":"descriptors/dart_dartanalyzer/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/dart_dartanalyzer/#how-are-identified-applicable-files","text":"File extensions: .dart","title":"How are identified applicable files"},{"location":"descriptors/dart_dartanalyzer/#example-calls","text":"dartanalyzer --fatal-infos --fatal-warnings myfile.dart dartanalyzer --fatal-infos --fatal-warnings --options analysis_options.yml myfile.dart","title":"Example calls"},{"location":"descriptors/dart_dartanalyzer/#help-content","text":"Usage: dartanalyzer [options...] <directory or list of files> --dart-sdk The path to the Dart SDK. --options Path to an analysis options file. --package-root The path to a package root directory (deprecated). This option cannot be used with --packages. --[no-]declaration-casts Disable declaration casts in strong mode (https://goo.gl/cTLz40) This option is now ignored and will be removed in a future release. --[no-]implicit-casts Disable implicit casts in strong mode (https://goo.gl/cTLz40). --no-implicit-dynamic Disable implicit dynamic (https://goo.gl/m0UgXD). --packages The path to the package resolution configuration file, which supplies a mapping of package names to paths. This option cannot be used with --package-root. --[no-]lints Show lint results. --format Specifies the format in which errors are displayed; the only currently allowed value is 'machine'. --version Print the analyzer version. --enable-experiment Enable one or more experimental features. If multiple features are being added, they should be comma separated. --no-hints Do not show hint results. --fatal-infos Treat infos as fatal. --fatal-warnings Treat non-type warnings as fatal. -h, --help Display this help message. Add --verbose to show hidden options. -v, --verbose Verbose output. --default-language-version The default language version when it is not specified via other ways (internal, tests only). Run \"dartanalyzer -h -v\" for verbose help output, including less commonly used options. For more information, see https://www.dartlang.org/tools/analyzer.","title":"Help content"},{"location":"descriptors/dart_dartanalyzer/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : ARG DART_VERSION='2.8.4' ARG GLIBC_VERSION='2.31-r0' RUN wget --tries=5 -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\ && wget --tries=5 https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk \\ && apk add --no-cache glibc-${GLIBC_VERSION}.apk && rm glibc-${GLIBC_VERSION}.apk \\ && wget --tries=5 https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-x64-release.zip -O - -q | unzip -q - \\ && chmod +x dart-sdk/bin/dart* \\ && mv dart-sdk/bin/* /usr/bin/ && mv dart-sdk/lib/* /usr/lib/ && mv dart-sdk/include/* /usr/include/ \\ && rm -r dart-sdk/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/dart_dartanalyzer/#example-success-log","text":"Results of dartanalyzer linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dart_dartanalyzer/ ----------------------------------------------- [SUCCESS] .automation/test/dart/dart_good_1.dart Analyzing .automation/test/dart/dart_good_1.dart... No issues found!","title":"Example success log"},{"location":"descriptors/dart_dartanalyzer/#example-error-log","text":"Results of dartanalyzer linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dart_dartanalyzer/ ----------------------------------------------- [ERROR] .automation/test/dart/dart_bad_1.dart Analyzing .automation/test/dart/dart_bad_1.dart... lint \u2022 Use `;` instead of `{}` for empty constructor bodies. \u2022 .automation/test/dart/dart_bad_1.dart:4:25 \u2022 empty_constructor_bodies 1 lint found.","title":"Example error log"},{"location":"descriptors/dockerfile/","text":"DOCKERFILE Linters Linter Configuration key dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT Linted files File names: Dockerfile Configuration in Mega-Linter Variable Description Default value DOCKERFILE_FILTER_REGEX_INCLUDE Custom regex including filter DOCKERFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All DOCKERFILE linters"},{"location":"descriptors/dockerfile/#dockerfile","text":"","title":"DOCKERFILE"},{"location":"descriptors/dockerfile/#linters","text":"Linter Configuration key dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT","title":"Linters"},{"location":"descriptors/dockerfile/#linted-files","text":"File names: Dockerfile","title":"Linted files"},{"location":"descriptors/dockerfile/#configuration-in-mega-linter","text":"Variable Description Default value DOCKERFILE_FILTER_REGEX_INCLUDE Custom regex including filter DOCKERFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/dockerfile_dockerfilelint/","text":"dockerfilelint dockerfilelint documentation Version in Mega-Linter: 1.8.0 Visit Official Web Site See How to configure dockerfilelint rules If custom .dockerfilelintrc is not found, .dockerfilelintrc will be used See Index of problems detected by dockerfilelint Configuration in Mega-Linter Enable dockerfilelint by adding DOCKERFILE_DOCKERFILELINT in ENABLE_LINTERS variable Disable dockerfilelint by adding DOCKERFILE_DOCKERFILELINT in DISABLE_LINTERS variable Variable Description Default value DOCKERFILE_DOCKERFILELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file DOCKERFILE_DOCKERFILELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file DOCKERFILE_DOCKERFILELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Dockerfile\"] DOCKERFILE_DOCKERFILELINT_FILE_NAME dockerfilelint configuration file name Use LINTER_DEFAULT to let the linter find it .dockerfilelintrc DOCKERFILE_DOCKERFILELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File names: Dockerfile Example calls dockerfilelint Dockerfile Help content Usage: dockerfilelint [files | content..] [options] Options: -o, --output Specify the format to use for output of linting results. Valid values are `json` or `cli` (default). [string] -j, --json Output linting results as JSON, equivalent to `-o json`. [boolean] -c, --config Path for .dockerfilelintrc configuration file [string] -v, --version Show version number [boolean] -h, --help Show help [boolean] Examples: dockerfilelint Dockerfile Lint a Dockerfile in the current working directory dockerfilelint test/example/* -j Lint all files in the test/example directory and output results in JSON dockerfilelint 'FROM latest' Lint the contents given as a string on the command line dockerfilelint < Dockerfile Lint the contents of Dockerfile via stdin Installation on mega-linter Docker image NPM packages (node.js): dockerfilelint Example success log Results of dockerfilelint linter (version 1.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_dockerfilelint/ ----------------------------------------------- [SUCCESS] .automation/test/docker/good/Dockerfile File: .automation/test/docker/good/Dockerfile Issues: None found \ud83d\udc4d [SUCCESS] .automation/test/docker/good/Dockerfile.dev File: .automation/test/docker/good/Dockerfile.dev Issues: None found \ud83d\udc4d Example error log Results of dockerfilelint linter (version 1.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_dockerfilelint/ ----------------------------------------------- [ERROR] .automation/test/docker/bad/Dockerfile File: .automation/test/docker/bad/Dockerfile Issues: 5 Line 1: from node:latest Issue Category Title Description 1 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used. Line 4: run mkdir -p /usr/src/app Issue Category Title Description 2 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used. Line 8: copy package.json /usr/src/app/ /here/there Issue Category Title Description 3 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used. Line 9: RUN sudo npm install Issue Category Title Description 4 Possible Bug Use Of sudo Is Not Use of `sudo` is not allowed in a Dockerfile. From the official Allowed document [Best practices for writing Dockerfiles](https://docs.docker.com/engine/userguide/eng-image/doc kerfile_best-practices/): > You should avoid installing or using `sudo` since it has unpredictable TTY and signal-forwarding behavior that can cause more problems than it solves. > If you absolutely need functionality similar to `sudo` (e.g., initializing the daemon as root but running it as non-root), you may be able to use `gosu`. Line 14: ENtrypoint /tmp/here.sh Issue Category Title Description 5 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used.","title":"dockerfilelint"},{"location":"descriptors/dockerfile_dockerfilelint/#dockerfilelint","text":"","title":"dockerfilelint"},{"location":"descriptors/dockerfile_dockerfilelint/#dockerfilelint-documentation","text":"Version in Mega-Linter: 1.8.0 Visit Official Web Site See How to configure dockerfilelint rules If custom .dockerfilelintrc is not found, .dockerfilelintrc will be used See Index of problems detected by dockerfilelint","title":"dockerfilelint documentation"},{"location":"descriptors/dockerfile_dockerfilelint/#configuration-in-mega-linter","text":"Enable dockerfilelint by adding DOCKERFILE_DOCKERFILELINT in ENABLE_LINTERS variable Disable dockerfilelint by adding DOCKERFILE_DOCKERFILELINT in DISABLE_LINTERS variable Variable Description Default value DOCKERFILE_DOCKERFILELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file DOCKERFILE_DOCKERFILELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file DOCKERFILE_DOCKERFILELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Dockerfile\"] DOCKERFILE_DOCKERFILELINT_FILE_NAME dockerfilelint configuration file name Use LINTER_DEFAULT to let the linter find it .dockerfilelintrc DOCKERFILE_DOCKERFILELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/dockerfile_dockerfilelint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/dockerfile_dockerfilelint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/dockerfile_dockerfilelint/#how-are-identified-applicable-files","text":"File names: Dockerfile","title":"How are identified applicable files"},{"location":"descriptors/dockerfile_dockerfilelint/#example-calls","text":"dockerfilelint Dockerfile","title":"Example calls"},{"location":"descriptors/dockerfile_dockerfilelint/#help-content","text":"Usage: dockerfilelint [files | content..] [options] Options: -o, --output Specify the format to use for output of linting results. Valid values are `json` or `cli` (default). [string] -j, --json Output linting results as JSON, equivalent to `-o json`. [boolean] -c, --config Path for .dockerfilelintrc configuration file [string] -v, --version Show version number [boolean] -h, --help Show help [boolean] Examples: dockerfilelint Dockerfile Lint a Dockerfile in the current working directory dockerfilelint test/example/* -j Lint all files in the test/example directory and output results in JSON dockerfilelint 'FROM latest' Lint the contents given as a string on the command line dockerfilelint < Dockerfile Lint the contents of Dockerfile via stdin","title":"Help content"},{"location":"descriptors/dockerfile_dockerfilelint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): dockerfilelint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/dockerfile_dockerfilelint/#example-success-log","text":"Results of dockerfilelint linter (version 1.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_dockerfilelint/ ----------------------------------------------- [SUCCESS] .automation/test/docker/good/Dockerfile File: .automation/test/docker/good/Dockerfile Issues: None found \ud83d\udc4d [SUCCESS] .automation/test/docker/good/Dockerfile.dev File: .automation/test/docker/good/Dockerfile.dev Issues: None found \ud83d\udc4d","title":"Example success log"},{"location":"descriptors/dockerfile_dockerfilelint/#example-error-log","text":"Results of dockerfilelint linter (version 1.8.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_dockerfilelint/ ----------------------------------------------- [ERROR] .automation/test/docker/bad/Dockerfile File: .automation/test/docker/bad/Dockerfile Issues: 5 Line 1: from node:latest Issue Category Title Description 1 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used. Line 4: run mkdir -p /usr/src/app Issue Category Title Description 2 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used. Line 8: copy package.json /usr/src/app/ /here/there Issue Category Title Description 3 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used. Line 9: RUN sudo npm install Issue Category Title Description 4 Possible Bug Use Of sudo Is Not Use of `sudo` is not allowed in a Dockerfile. From the official Allowed document [Best practices for writing Dockerfiles](https://docs.docker.com/engine/userguide/eng-image/doc kerfile_best-practices/): > You should avoid installing or using `sudo` since it has unpredictable TTY and signal-forwarding behavior that can cause more problems than it solves. > If you absolutely need functionality similar to `sudo` (e.g., initializing the daemon as root but running it as non-root), you may be able to use `gosu`. Line 14: ENtrypoint /tmp/here.sh Issue Category Title Description 5 Clarity Capitalize For clarity and readability, all instructions in a Dockerfile Dockerfile should be uppercase. Instructions This is a convention adopted by most of the official images and greatly improves readability in long Dockerfiles. For an example of why this makes a difference, check out the current [redis Dockerfile](https://github.com/docker-library/redis/blob/b375650fb6 9b7db819e90c0033433c705b28656e/3.0/Dockerfile) and you should be able to easily see the instructions used.","title":"Example error log"},{"location":"descriptors/dockerfile_hadolint/","text":"hadolint hadolint documentation Version in Mega-Linter: 1.19.0 Visit Official Web Site See How to configure hadolint rules If custom .hadolint.yml is not found, .hadolint.yml will be used See How to disable hadolint rules in files See Index of problems detected by hadolint Configuration in Mega-Linter Enable hadolint by adding DOCKERFILE_HADOLINT in ENABLE_LINTERS variable Disable hadolint by adding DOCKERFILE_HADOLINT in DISABLE_LINTERS variable Variable Description Default value DOCKERFILE_HADOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file DOCKERFILE_HADOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file DOCKERFILE_HADOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Dockerfile\"] DOCKERFILE_HADOLINT_FILE_NAME hadolint configuration file name Use LINTER_DEFAULT to let the linter find it .hadolint.yml DOCKERFILE_HADOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules DOCKERFILE_HADOLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use hadolint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-hadolint Visual Studio Code hadolint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File names: Dockerfile Example calls hadolint Dockerfile hadolint -c .dockerfilelintrc Dockerfile Help content hadolint - Dockerfile Linter written in Haskell Usage: hadolint [-v|--version] [-c|--config FILENAME] [-f|--format ARG] [DOCKERFILE...] [--ignore RULECODE] [--trusted-registry REGISTRY (e.g. docker.io)] Lint Dockerfile for errors and best practices Available options: -h,--help Show this help text -v,--version Show version -c,--config FILENAME Path to the configuration file -f,--format ARG The output format for the results [tty | json | checkstyle | codeclimate | codacy] (default: tty) --ignore RULECODE A rule to ignore. If present, the ignore list in the config file is ignored --trusted-registry REGISTRY (e.g. docker.io) A docker registry to allow to appear in FROM instructions Installation on mega-linter Docker image Dockerfile commands : FROM hadolint/hadolint:latest-alpine as dockerfile-lint COPY --from=dockerfile-lint /bin/hadolint /usr/bin/hadolint Example success log Results of hadolint linter (version 1.19.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_hadolint/ ----------------------------------------------- [SUCCESS] .automation/test/docker/good/Dockerfile [SUCCESS] .automation/test/docker/good/Dockerfile.dev Example error log Results of hadolint linter (version 1.19.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_hadolint/ ----------------------------------------------- [ERROR] .automation/test/docker/bad/Dockerfile .automation/test/docker/bad/Dockerfile:1 DL3007 Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag .automation/test/docker/bad/Dockerfile:8 DL3021 COPY with more than 2 arguments requires the last argument to end with / .automation/test/docker/bad/Dockerfile:9 DL3004 Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root .automation/test/docker/bad/Dockerfile:11 DL3020 Use COPY instead of ADD for files and folders .automation/test/docker/bad/Dockerfile:14 DL3025 Use arguments JSON notation for CMD and ENTRYPOINT arguments","title":"hadolint"},{"location":"descriptors/dockerfile_hadolint/#hadolint","text":"","title":"hadolint"},{"location":"descriptors/dockerfile_hadolint/#hadolint-documentation","text":"Version in Mega-Linter: 1.19.0 Visit Official Web Site See How to configure hadolint rules If custom .hadolint.yml is not found, .hadolint.yml will be used See How to disable hadolint rules in files See Index of problems detected by hadolint","title":"hadolint documentation"},{"location":"descriptors/dockerfile_hadolint/#configuration-in-mega-linter","text":"Enable hadolint by adding DOCKERFILE_HADOLINT in ENABLE_LINTERS variable Disable hadolint by adding DOCKERFILE_HADOLINT in DISABLE_LINTERS variable Variable Description Default value DOCKERFILE_HADOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file DOCKERFILE_HADOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file DOCKERFILE_HADOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Dockerfile\"] DOCKERFILE_HADOLINT_FILE_NAME hadolint configuration file name Use LINTER_DEFAULT to let the linter find it .hadolint.yml DOCKERFILE_HADOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules DOCKERFILE_HADOLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/dockerfile_hadolint/#ide-integration","text":"Use hadolint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-hadolint Visual Studio Code hadolint","title":"IDE Integration"},{"location":"descriptors/dockerfile_hadolint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/dockerfile_hadolint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/dockerfile_hadolint/#how-are-identified-applicable-files","text":"File names: Dockerfile","title":"How are identified applicable files"},{"location":"descriptors/dockerfile_hadolint/#example-calls","text":"hadolint Dockerfile hadolint -c .dockerfilelintrc Dockerfile","title":"Example calls"},{"location":"descriptors/dockerfile_hadolint/#help-content","text":"hadolint - Dockerfile Linter written in Haskell Usage: hadolint [-v|--version] [-c|--config FILENAME] [-f|--format ARG] [DOCKERFILE...] [--ignore RULECODE] [--trusted-registry REGISTRY (e.g. docker.io)] Lint Dockerfile for errors and best practices Available options: -h,--help Show this help text -v,--version Show version -c,--config FILENAME Path to the configuration file -f,--format ARG The output format for the results [tty | json | checkstyle | codeclimate | codacy] (default: tty) --ignore RULECODE A rule to ignore. If present, the ignore list in the config file is ignored --trusted-registry REGISTRY (e.g. docker.io) A docker registry to allow to appear in FROM instructions","title":"Help content"},{"location":"descriptors/dockerfile_hadolint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM hadolint/hadolint:latest-alpine as dockerfile-lint COPY --from=dockerfile-lint /bin/hadolint /usr/bin/hadolint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/dockerfile_hadolint/#example-success-log","text":"Results of hadolint linter (version 1.19.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_hadolint/ ----------------------------------------------- [SUCCESS] .automation/test/docker/good/Dockerfile [SUCCESS] .automation/test/docker/good/Dockerfile.dev","title":"Example success log"},{"location":"descriptors/dockerfile_hadolint/#example-error-log","text":"Results of hadolint linter (version 1.19.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/dockerfile_hadolint/ ----------------------------------------------- [ERROR] .automation/test/docker/bad/Dockerfile .automation/test/docker/bad/Dockerfile:1 DL3007 Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag .automation/test/docker/bad/Dockerfile:8 DL3021 COPY with more than 2 arguments requires the last argument to end with / .automation/test/docker/bad/Dockerfile:9 DL3004 Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root .automation/test/docker/bad/Dockerfile:11 DL3020 Use COPY instead of ADD for files and folders .automation/test/docker/bad/Dockerfile:14 DL3025 Use arguments JSON notation for CMD and ENTRYPOINT arguments","title":"Example error log"},{"location":"descriptors/editorconfig/","text":"EDITORCONFIG Linters Linter Configuration key editorconfig-checker EDITORCONFIG Linted files Activated only if file is found: .editorconfig File extensions: * Configuration in Mega-Linter Variable Description Default value EDITORCONFIG_FILTER_REGEX_INCLUDE Custom regex including filter EDITORCONFIG_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All EDITORCONFIG linters"},{"location":"descriptors/editorconfig/#editorconfig","text":"","title":"EDITORCONFIG"},{"location":"descriptors/editorconfig/#linters","text":"Linter Configuration key editorconfig-checker EDITORCONFIG","title":"Linters"},{"location":"descriptors/editorconfig/#linted-files","text":"Activated only if file is found: .editorconfig File extensions: *","title":"Linted files"},{"location":"descriptors/editorconfig/#configuration-in-mega-linter","text":"Variable Description Default value EDITORCONFIG_FILTER_REGEX_INCLUDE Custom regex including filter EDITORCONFIG_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/editorconfig_editorconfig_checker/","text":"editorconfig-checker documentation Visit Official Web Site See How to configure editorconfig-checker rules See How to disable editorconfig-checker rules in files Configuration in Mega-Linter Enable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in ENABLE_LINTERS variable Disable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in DISABLE_LINTERS variable Variable Description Default value EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\"*\"] EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAME editorconfig-checker configuration file name Use LINTER_DEFAULT to let the linter find it .ecrc EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files Activated only if file is found: .editorconfig File extensions: * Example calls editorconfig-checker myfile.js Help content USAGE: -config string config -debug print debugging information -disable-end-of-line disables the trailing whitespace check -disable-indent-size disables only the indent-size check -disable-indentation disables the indentation check -disable-insert-final-newline disables the final newline check -disable-max-line-length disables only the max-line-length check -disable-trim-trailing-whitespace disables the trailing whitespace check -dry-run show which files would be checked -exclude string a regex which files should be excluded from checking - needs to be a valid regular expression -h print the help -help print the help -ignore-defaults ignore default excludes -init creates an initial configuration -no-color dont print colors -v print debugging information -verbose print debugging information -version print the version number Installation on mega-linter Docker image NPM packages (node.js): editorconfig-checker Example success log Results of editorconfig-checker linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/editorconfig_editorconfig_checker/ ----------------------------------------------- [SUCCESS] .automation/test/editorconfig-checker/editorconfig-checker_good_1.ext Example error log Results of editorconfig-checker linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/editorconfig_editorconfig_checker/ ----------------------------------------------- [ERROR] .automation/test/editorconfig-checker/editorconfig-checker_bad_1.ext .automation/test/editorconfig-checker/editorconfig-checker_bad_1.ext: 1: Wrong amount of left-padding spaces(want multiple of 4) 2: Wrong amount of left-padding spaces(want multiple of 4) 3: Wrong amount of left-padding spaces(want multiple of 4) 3 errors found","title":"editorconfig-checker"},{"location":"descriptors/editorconfig_editorconfig_checker/#editorconfig-checker-documentation","text":"Visit Official Web Site See How to configure editorconfig-checker rules See How to disable editorconfig-checker rules in files","title":"editorconfig-checker documentation"},{"location":"descriptors/editorconfig_editorconfig_checker/#configuration-in-mega-linter","text":"Enable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in ENABLE_LINTERS variable Disable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in DISABLE_LINTERS variable Variable Description Default value EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\"*\"] EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAME editorconfig-checker configuration file name Use LINTER_DEFAULT to let the linter find it .ecrc EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/editorconfig_editorconfig_checker/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/editorconfig_editorconfig_checker/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/editorconfig_editorconfig_checker/#how-are-identified-applicable-files","text":"Activated only if file is found: .editorconfig File extensions: *","title":"How are identified applicable files"},{"location":"descriptors/editorconfig_editorconfig_checker/#example-calls","text":"editorconfig-checker myfile.js","title":"Example calls"},{"location":"descriptors/editorconfig_editorconfig_checker/#help-content","text":"USAGE: -config string config -debug print debugging information -disable-end-of-line disables the trailing whitespace check -disable-indent-size disables only the indent-size check -disable-indentation disables the indentation check -disable-insert-final-newline disables the final newline check -disable-max-line-length disables only the max-line-length check -disable-trim-trailing-whitespace disables the trailing whitespace check -dry-run show which files would be checked -exclude string a regex which files should be excluded from checking - needs to be a valid regular expression -h print the help -help print the help -ignore-defaults ignore default excludes -init creates an initial configuration -no-color dont print colors -v print debugging information -verbose print debugging information -version print the version number","title":"Help content"},{"location":"descriptors/editorconfig_editorconfig_checker/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): editorconfig-checker","title":"Installation on mega-linter Docker image"},{"location":"descriptors/editorconfig_editorconfig_checker/#example-success-log","text":"Results of editorconfig-checker linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/editorconfig_editorconfig_checker/ ----------------------------------------------- [SUCCESS] .automation/test/editorconfig-checker/editorconfig-checker_good_1.ext","title":"Example success log"},{"location":"descriptors/editorconfig_editorconfig_checker/#example-error-log","text":"Results of editorconfig-checker linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/editorconfig_editorconfig_checker/ ----------------------------------------------- [ERROR] .automation/test/editorconfig-checker/editorconfig-checker_bad_1.ext .automation/test/editorconfig-checker/editorconfig-checker_bad_1.ext: 1: Wrong amount of left-padding spaces(want multiple of 4) 2: Wrong amount of left-padding spaces(want multiple of 4) 3: Wrong amount of left-padding spaces(want multiple of 4) 3 errors found","title":"Example error log"},{"location":"descriptors/env/","text":"ENV Linters Linter Configuration key dotenv-linter ENV Linted files File extensions: .env Configuration in Mega-Linter Variable Description Default value ENV_FILTER_REGEX_INCLUDE Custom regex including filter ENV_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All ENV linters"},{"location":"descriptors/env/#env","text":"","title":"ENV"},{"location":"descriptors/env/#linters","text":"Linter Configuration key dotenv-linter ENV","title":"Linters"},{"location":"descriptors/env/#linted-files","text":"File extensions: .env","title":"Linted files"},{"location":"descriptors/env/#configuration-in-mega-linter","text":"Variable Description Default value ENV_FILTER_REGEX_INCLUDE Custom regex including filter ENV_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/env_dotenv_linter/","text":"dotenv-linter documentation Version in Mega-Linter: 2.2.1 Visit Official Web Site See Index of problems detected by dotenv-linter Configuration in Mega-Linter Enable dotenv-linter by adding ENV_DOTENV_LINTER in ENABLE_LINTERS variable Disable dotenv-linter by adding ENV_DOTENV_LINTER in DISABLE_LINTERS variable Enable auto-fixes by adding ENV_DOTENV_LINTER in APPLY_FIXES variable Variable Description Default value ENV_DOTENV_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file ENV_DOTENV_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".env\"] ENV_DOTENV_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ENV_DOTENV_LINTER_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .env Example calls dotenv-linter myfile.env dotenv-linter --fix myfile.env Help content dotenv-linter 2.2.1 Mikhail Grachev <work@mgrachev.com> Lightning-fast linter for .env files USAGE: dotenv-linter [FLAGS] [OPTIONS] <input>... FLAGS: -f, --fix Automatically fixes warnings -h, --help Prints help information --no-backup Prevents .env files from being backed up when modified by -f/--fix -q, --quiet Doesn't display additional information -r, --recursive Recursively search and check .env files --show-checks Shows list of available checks -v, --version Prints version information OPTIONS: -e, --exclude <FILE_NAME>... Excludes files from check -s, --skip <CHECK_NAME>... Skips checks ARGS: <input>... files or paths [default: /] Installation on mega-linter Docker image Dockerfile commands : RUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s Example success log Results of dotenv-linter linter (version 2.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/env_dotenv_linter/ ----------------------------------------------- [SUCCESS] .automation/test/env/env_good_1.env Example error log Results of dotenv-linter linter (version 2.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/env_dotenv_linter/ ----------------------------------------------- [ERROR] .automation/test/env/env_bad_1.env .automation/test/env/env_bad_1.env:1 LeadingCharacter: Invalid leading character detected .automation/test/env/env_bad_1.env:2 KeyWithoutValue: The MY_ENV key should be with a value or have an equal sign .automation/test/env/env_bad_1.env:3 IncorrectDelimiter: The DB-NAME key has incorrect delimiter .automation/test/env/env_bad_1.env:3 UnorderedKey: The DB-NAME key should go before the LOGGER_LEVEL key .automation/test/env/env_bad_1.env:4 LowercaseKey: The DEbUG_hTTP key should be in uppercase .automation/test/env/env_bad_1.env:4 UnorderedKey: The DEbUG_hTTP key should go before the LOGGER_LEVEL key .automation/test/env/env_bad_1.env:5 UnorderedKey: The DB_NAME key should go before the DEbUG_hTTP key Found 7 problems","title":"dotenv-linter"},{"location":"descriptors/env_dotenv_linter/#dotenv-linter-documentation","text":"Version in Mega-Linter: 2.2.1 Visit Official Web Site See Index of problems detected by dotenv-linter","title":"dotenv-linter documentation"},{"location":"descriptors/env_dotenv_linter/#configuration-in-mega-linter","text":"Enable dotenv-linter by adding ENV_DOTENV_LINTER in ENABLE_LINTERS variable Disable dotenv-linter by adding ENV_DOTENV_LINTER in DISABLE_LINTERS variable Enable auto-fixes by adding ENV_DOTENV_LINTER in APPLY_FIXES variable Variable Description Default value ENV_DOTENV_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file ENV_DOTENV_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".env\"] ENV_DOTENV_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ENV_DOTENV_LINTER_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/env_dotenv_linter/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/env_dotenv_linter/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/env_dotenv_linter/#how-are-identified-applicable-files","text":"File extensions: .env","title":"How are identified applicable files"},{"location":"descriptors/env_dotenv_linter/#example-calls","text":"dotenv-linter myfile.env dotenv-linter --fix myfile.env","title":"Example calls"},{"location":"descriptors/env_dotenv_linter/#help-content","text":"dotenv-linter 2.2.1 Mikhail Grachev <work@mgrachev.com> Lightning-fast linter for .env files USAGE: dotenv-linter [FLAGS] [OPTIONS] <input>... FLAGS: -f, --fix Automatically fixes warnings -h, --help Prints help information --no-backup Prevents .env files from being backed up when modified by -f/--fix -q, --quiet Doesn't display additional information -r, --recursive Recursively search and check .env files --show-checks Shows list of available checks -v, --version Prints version information OPTIONS: -e, --exclude <FILE_NAME>... Excludes files from check -s, --skip <CHECK_NAME>... Skips checks ARGS: <input>... files or paths [default: /]","title":"Help content"},{"location":"descriptors/env_dotenv_linter/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s","title":"Installation on mega-linter Docker image"},{"location":"descriptors/env_dotenv_linter/#example-success-log","text":"Results of dotenv-linter linter (version 2.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/env_dotenv_linter/ ----------------------------------------------- [SUCCESS] .automation/test/env/env_good_1.env","title":"Example success log"},{"location":"descriptors/env_dotenv_linter/#example-error-log","text":"Results of dotenv-linter linter (version 2.2.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/env_dotenv_linter/ ----------------------------------------------- [ERROR] .automation/test/env/env_bad_1.env .automation/test/env/env_bad_1.env:1 LeadingCharacter: Invalid leading character detected .automation/test/env/env_bad_1.env:2 KeyWithoutValue: The MY_ENV key should be with a value or have an equal sign .automation/test/env/env_bad_1.env:3 IncorrectDelimiter: The DB-NAME key has incorrect delimiter .automation/test/env/env_bad_1.env:3 UnorderedKey: The DB-NAME key should go before the LOGGER_LEVEL key .automation/test/env/env_bad_1.env:4 LowercaseKey: The DEbUG_hTTP key should be in uppercase .automation/test/env/env_bad_1.env:4 UnorderedKey: The DEbUG_hTTP key should go before the LOGGER_LEVEL key .automation/test/env/env_bad_1.env:5 UnorderedKey: The DB_NAME key should go before the DEbUG_hTTP key Found 7 problems","title":"Example error log"},{"location":"descriptors/gherkin/","text":"GHERKIN Linters Linter Configuration key gherkin-lint GHERKIN Linted files File extensions: .feature Configuration in Mega-Linter Variable Description Default value GHERKIN_FILTER_REGEX_INCLUDE Custom regex including filter GHERKIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All GHERKIN linters"},{"location":"descriptors/gherkin/#gherkin","text":"","title":"GHERKIN"},{"location":"descriptors/gherkin/#linters","text":"Linter Configuration key gherkin-lint GHERKIN","title":"Linters"},{"location":"descriptors/gherkin/#linted-files","text":"File extensions: .feature","title":"Linted files"},{"location":"descriptors/gherkin/#configuration-in-mega-linter","text":"Variable Description Default value GHERKIN_FILTER_REGEX_INCLUDE Custom regex including filter GHERKIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/gherkin_gherkin_lint/","text":"gherkin-lint gherkin-lint documentation Visit Official Web Site See How to configure gherkin-lint rules If custom .gherkin-lintrc is not found, .gherkin-lintrc will be used See Index of problems detected by gherkin-lint Configuration in Mega-Linter Enable gherkin-lint by adding GHERKIN_GHERKIN_LINT in ENABLE_LINTERS variable Disable gherkin-lint by adding GHERKIN_GHERKIN_LINT in DISABLE_LINTERS variable Variable Description Default value GHERKIN_GHERKIN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".feature\"] GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GHERKIN_GHERKIN_LINT_FILE_NAME gherkin-lint configuration file name Use LINTER_DEFAULT to let the linter find it .gherkin-lintrc GHERKIN_GHERKIN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GHERKIN_GHERKIN_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .feature Example calls gherkin-lint myfile.feature gherkin-lint -c .gherkin-lintrc myfile.feature Help content Usage: gherkin-lint [options] <feature-files> Options: -f, --format [format] output format. Possible values: json, stylish. Defaults to stylish -i, --ignore <...> comma seperated list of files/glob patterns that the linter should ignore, overrides .gherkin-lintignore file -c, --config [config] configuration file, defaults to .gherkin-lintrc -r, --rulesdir <...> additional rule directories (default: []) -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): gherkin-lint Example success log Results of gherkin-lint linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/gherkin_gherkin_lint/ ----------------------------------------------- [SUCCESS] .automation/test/gherkin/gherkin_good_01.feature Example error log Results of gherkin-lint linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/gherkin_gherkin_lint/ ----------------------------------------------- [ERROR] .automation/test/gherkin/gherkin_bad_01.feature .automation/test/gherkin/gherkin_bad_01.feature 8 Scenario name is already used in: .automation/test/gherkin/gherkin_bad_01.feature:4 no-dupe-scenario-names 11 Trailing spaces are not allowed no-trailing-spaces 12 Multiple empty lines are not allowed no-multiple-empty-lines","title":"gherkin-lint"},{"location":"descriptors/gherkin_gherkin_lint/#gherkin-lint","text":"","title":"gherkin-lint"},{"location":"descriptors/gherkin_gherkin_lint/#gherkin-lint-documentation","text":"Visit Official Web Site See How to configure gherkin-lint rules If custom .gherkin-lintrc is not found, .gherkin-lintrc will be used See Index of problems detected by gherkin-lint","title":"gherkin-lint documentation"},{"location":"descriptors/gherkin_gherkin_lint/#configuration-in-mega-linter","text":"Enable gherkin-lint by adding GHERKIN_GHERKIN_LINT in ENABLE_LINTERS variable Disable gherkin-lint by adding GHERKIN_GHERKIN_LINT in DISABLE_LINTERS variable Variable Description Default value GHERKIN_GHERKIN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".feature\"] GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GHERKIN_GHERKIN_LINT_FILE_NAME gherkin-lint configuration file name Use LINTER_DEFAULT to let the linter find it .gherkin-lintrc GHERKIN_GHERKIN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GHERKIN_GHERKIN_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/gherkin_gherkin_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/gherkin_gherkin_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/gherkin_gherkin_lint/#how-are-identified-applicable-files","text":"File extensions: .feature","title":"How are identified applicable files"},{"location":"descriptors/gherkin_gherkin_lint/#example-calls","text":"gherkin-lint myfile.feature gherkin-lint -c .gherkin-lintrc myfile.feature","title":"Example calls"},{"location":"descriptors/gherkin_gherkin_lint/#help-content","text":"Usage: gherkin-lint [options] <feature-files> Options: -f, --format [format] output format. Possible values: json, stylish. Defaults to stylish -i, --ignore <...> comma seperated list of files/glob patterns that the linter should ignore, overrides .gherkin-lintignore file -c, --config [config] configuration file, defaults to .gherkin-lintrc -r, --rulesdir <...> additional rule directories (default: []) -h, --help display help for command","title":"Help content"},{"location":"descriptors/gherkin_gherkin_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): gherkin-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/gherkin_gherkin_lint/#example-success-log","text":"Results of gherkin-lint linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/gherkin_gherkin_lint/ ----------------------------------------------- [SUCCESS] .automation/test/gherkin/gherkin_good_01.feature","title":"Example success log"},{"location":"descriptors/gherkin_gherkin_lint/#example-error-log","text":"Results of gherkin-lint linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/gherkin_gherkin_lint/ ----------------------------------------------- [ERROR] .automation/test/gherkin/gherkin_bad_01.feature .automation/test/gherkin/gherkin_bad_01.feature 8 Scenario name is already used in: .automation/test/gherkin/gherkin_bad_01.feature:4 no-dupe-scenario-names 11 Trailing spaces are not allowed no-trailing-spaces 12 Multiple empty lines are not allowed no-multiple-empty-lines","title":"Example error log"},{"location":"descriptors/git/","text":"GIT Linters Linter Configuration key git_diff GIT Linted files Configuration in Mega-Linter Variable Description Default value GIT_FILTER_REGEX_INCLUDE Custom regex including filter GIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN git config --global core.autocrlf true","title":"All GIT linters"},{"location":"descriptors/git/#git","text":"","title":"GIT"},{"location":"descriptors/git/#linters","text":"Linter Configuration key git_diff GIT","title":"Linters"},{"location":"descriptors/git/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/git/#configuration-in-mega-linter","text":"Variable Description Default value GIT_FILTER_REGEX_INCLUDE Custom regex including filter GIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/git/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/git/#installation","text":"Dockerfile commands : RUN git config --global core.autocrlf true","title":"Installation"},{"location":"descriptors/git_git_diff/","text":"git_diff Git diff checks for git conflicts markers in files git_diff documentation Version in Mega-Linter: 2.26.2 Visit Official Web Site Configuration in Mega-Linter Enable git_diff by adding GIT_GIT_DIFF in ENABLE_LINTERS variable Disable git_diff by adding GIT_GIT_DIFF in DISABLE_LINTERS variable Variable Description Default value GIT_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GIT_GIT_DIFF_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GIT_GIT_DIFF_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GIT_GIT_DIFF_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file GIT_GIT_DIFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GIT_GIT_DIFF_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files Example calls git diff --check Help content usage: git [--version] [--help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] <command> [<args>] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index sparse-checkout Initialize and modify the sparse-checkout examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept. See 'git help git' for an overview of the system. Installation on mega-linter Docker image Example success log Results of git_diff linter (version 2.26.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/git_git_diff/ ----------------------------------------------- [SUCCESS] .automation/test/git_diff/good","title":"git_diff"},{"location":"descriptors/git_git_diff/#git_diff","text":"Git diff checks for git conflicts markers in files","title":"git_diff"},{"location":"descriptors/git_git_diff/#git_diff-documentation","text":"Version in Mega-Linter: 2.26.2 Visit Official Web Site","title":"git_diff documentation"},{"location":"descriptors/git_git_diff/#configuration-in-mega-linter","text":"Enable git_diff by adding GIT_GIT_DIFF in ENABLE_LINTERS variable Disable git_diff by adding GIT_GIT_DIFF in DISABLE_LINTERS variable Variable Description Default value GIT_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GIT_GIT_DIFF_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GIT_GIT_DIFF_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GIT_GIT_DIFF_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file GIT_GIT_DIFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GIT_GIT_DIFF_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/git_git_diff/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/git_git_diff/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/git_git_diff/#how-are-identified-applicable-files","text":"","title":"How are identified applicable files"},{"location":"descriptors/git_git_diff/#example-calls","text":"git diff --check","title":"Example calls"},{"location":"descriptors/git_git_diff/#help-content","text":"usage: git [--version] [--help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] <command> [<args>] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index sparse-checkout Initialize and modify the sparse-checkout examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"Help content"},{"location":"descriptors/git_git_diff/#installation-on-mega-linter-docker-image","text":"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/git_git_diff/#example-success-log","text":"Results of git_diff linter (version 2.26.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/git_git_diff/ ----------------------------------------------- [SUCCESS] .automation/test/git_diff/good","title":"Example success log"},{"location":"descriptors/go/","text":"GO Linters Linter Configuration key golangci-lint GO Linted files File extensions: .go Configuration in Mega-Linter Variable Description Default value GO_FILTER_REGEX_INCLUDE Custom regex including filter GO_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ENV GOROOT=/usr/lib/go \\ GOPATH=/go ENV PATH=\"$PATH\":\"$GOROOT\"/bin:\"$GOPATH\"/bin RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin APK packages (Linux): go","title":"All GO linters"},{"location":"descriptors/go/#go","text":"","title":"GO"},{"location":"descriptors/go/#linters","text":"Linter Configuration key golangci-lint GO","title":"Linters"},{"location":"descriptors/go/#linted-files","text":"File extensions: .go","title":"Linted files"},{"location":"descriptors/go/#configuration-in-mega-linter","text":"Variable Description Default value GO_FILTER_REGEX_INCLUDE Custom regex including filter GO_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/go/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/go/#installation","text":"Dockerfile commands : ENV GOROOT=/usr/lib/go \\ GOPATH=/go ENV PATH=\"$PATH\":\"$GOROOT\"/bin:\"$GOPATH\"/bin RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin APK packages (Linux): go","title":"Installation"},{"location":"descriptors/go_golangci_lint/","text":"golangci-lint documentation Version in Mega-Linter: 1.33.0 Visit Official Web Site See How to configure golangci-lint rules If custom .golangci.yml is not found, .golangci.yml will be used See How to disable golangci-lint rules in files See Index of problems detected by golangci-lint Configuration in Mega-Linter Enable golangci-lint by adding GO_GOLANGCI_LINT in ENABLE_LINTERS variable Disable golangci-lint by adding GO_GOLANGCI_LINT in DISABLE_LINTERS variable Variable Description Default value GO_GOLANGCI_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GO_GOLANGCI_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GO_GOLANGCI_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GO_GOLANGCI_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".go\"] GO_GOLANGCI_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GO_GOLANGCI_LINT_FILE_NAME golangci-lint configuration file name Use LINTER_DEFAULT to let the linter find it .golangci.yml GO_GOLANGCI_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GO_GOLANGCI_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use golangci-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom go-plus Emacs flycheck-golandci-lint Emacs SpaceMacs goland goland Sublime Text SublimeLinter-contrib-golang-cilint vim vim-go Visual Studio Code vscode.Go Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 go Mega-Linter optimized for GO based projects 30 Behind the scenes How are identified applicable files File extensions: .go Example calls golangci-lint run myfile.go golangci-lint run -c .golangci.yml myfile.go Help content Smart, fast linters runner. Run it in cloud for every GitHub pull request on https://golangci.com Usage: golangci-lint [flags] golangci-lint [command] Available Commands: cache Cache control and information completion Output completion script config Config help Help linters List current linters configuration run Run this tool in cloud on every github pull request in https://golangci.com for free (public repos) version Version Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -j, --concurrency int Concurrency (default NumCPU) (default 2) --cpu-profile-path string Path to CPU profile output file -h, --help help for golangci-lint --mem-profile-path string Path to memory profile output file --trace-path string Path to trace output file -v, --verbose verbose output --version Print version Use \"golangci-lint [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV GOROOT=/usr/lib/go \\ GOPATH=/go ENV PATH=\"$PATH\":\"$GOROOT\"/bin:\"$GOPATH\"/bin RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin # Linter install RUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \\ && golangci-lint --version Example success log Results of golangci-lint linter (version 1.33.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/go_golangci_lint/ ----------------------------------------------- [SUCCESS] .automation/test/golang/golang_good_01.go Example error log Results of golangci-lint linter (version 1.33.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/go_golangci_lint/ ----------------------------------------------- [ERROR] .automation/test/golang/golang_bad_01.go level=error msg=\"[linters context] typechecking error: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if'\" level=warning msg=\"[runner] Can't run linter goanalysis_metalinter: S1020: failed prerequisites: [(inspect@command-line-arguments, isgenerated@command-line-arguments): analysis skipped: errors in package: [-: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if']]\" level=warning msg=\"[runner] Can't run linter unused: buildir: analysis skipped: errors in package: [-: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if']\" level=error msg=\"Running error: buildir: analysis skipped: errors in package: [-: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if']\"","title":"golangci-lint"},{"location":"descriptors/go_golangci_lint/#golangci-lint-documentation","text":"Version in Mega-Linter: 1.33.0 Visit Official Web Site See How to configure golangci-lint rules If custom .golangci.yml is not found, .golangci.yml will be used See How to disable golangci-lint rules in files See Index of problems detected by golangci-lint","title":"golangci-lint documentation"},{"location":"descriptors/go_golangci_lint/#configuration-in-mega-linter","text":"Enable golangci-lint by adding GO_GOLANGCI_LINT in ENABLE_LINTERS variable Disable golangci-lint by adding GO_GOLANGCI_LINT in DISABLE_LINTERS variable Variable Description Default value GO_GOLANGCI_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GO_GOLANGCI_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GO_GOLANGCI_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GO_GOLANGCI_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".go\"] GO_GOLANGCI_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GO_GOLANGCI_LINT_FILE_NAME golangci-lint configuration file name Use LINTER_DEFAULT to let the linter find it .golangci.yml GO_GOLANGCI_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GO_GOLANGCI_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/go_golangci_lint/#ide-integration","text":"Use golangci-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom go-plus Emacs flycheck-golandci-lint Emacs SpaceMacs goland goland Sublime Text SublimeLinter-contrib-golang-cilint vim vim-go Visual Studio Code vscode.Go","title":"IDE Integration"},{"location":"descriptors/go_golangci_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 go Mega-Linter optimized for GO based projects 30","title":"Mega-Linter Flavours"},{"location":"descriptors/go_golangci_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/go_golangci_lint/#how-are-identified-applicable-files","text":"File extensions: .go","title":"How are identified applicable files"},{"location":"descriptors/go_golangci_lint/#example-calls","text":"golangci-lint run myfile.go golangci-lint run -c .golangci.yml myfile.go","title":"Example calls"},{"location":"descriptors/go_golangci_lint/#help-content","text":"Smart, fast linters runner. Run it in cloud for every GitHub pull request on https://golangci.com Usage: golangci-lint [flags] golangci-lint [command] Available Commands: cache Cache control and information completion Output completion script config Config help Help linters List current linters configuration run Run this tool in cloud on every github pull request in https://golangci.com for free (public repos) version Version Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -j, --concurrency int Concurrency (default NumCPU) (default 2) --cpu-profile-path string Path to CPU profile output file -h, --help help for golangci-lint --mem-profile-path string Path to memory profile output file --trace-path string Path to trace output file -v, --verbose verbose output --version Print version Use \"golangci-lint [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/go_golangci_lint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV GOROOT=/usr/lib/go \\ GOPATH=/go ENV PATH=\"$PATH\":\"$GOROOT\"/bin:\"$GOPATH\"/bin RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin # Linter install RUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \\ && golangci-lint --version","title":"Installation on mega-linter Docker image"},{"location":"descriptors/go_golangci_lint/#example-success-log","text":"Results of golangci-lint linter (version 1.33.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/go_golangci_lint/ ----------------------------------------------- [SUCCESS] .automation/test/golang/golang_good_01.go","title":"Example success log"},{"location":"descriptors/go_golangci_lint/#example-error-log","text":"Results of golangci-lint linter (version 1.33.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/go_golangci_lint/ ----------------------------------------------- [ERROR] .automation/test/golang/golang_bad_01.go level=error msg=\"[linters context] typechecking error: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if'\" level=warning msg=\"[runner] Can't run linter goanalysis_metalinter: S1020: failed prerequisites: [(inspect@command-line-arguments, isgenerated@command-line-arguments): analysis skipped: errors in package: [-: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if']]\" level=warning msg=\"[runner] Can't run linter unused: buildir: analysis skipped: errors in package: [-: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if']\" level=error msg=\"Running error: buildir: analysis skipped: errors in package: [-: .automation/test/golang/golang_bad_01.go:1:1: expected 'package', found 'if']\"","title":"Example error log"},{"location":"descriptors/graphql/","text":"GRAPHQL Linters Linter Configuration key graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER Linted files File extensions: .graphql Configuration in Mega-Linter Variable Description Default value GRAPHQL_FILTER_REGEX_INCLUDE Custom regex including filter GRAPHQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All GRAPHQL linters"},{"location":"descriptors/graphql/#graphql","text":"","title":"GRAPHQL"},{"location":"descriptors/graphql/#linters","text":"Linter Configuration key graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER","title":"Linters"},{"location":"descriptors/graphql/#linted-files","text":"File extensions: .graphql","title":"Linted files"},{"location":"descriptors/graphql/#configuration-in-mega-linter","text":"Variable Description Default value GRAPHQL_FILTER_REGEX_INCLUDE Custom regex including filter GRAPHQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/graphql_graphql_schema_linter/","text":"graphql-schema-linter graphql-schema-linter documentation Version in Mega-Linter: 2.0.1 Visit Official Web Site See How to configure graphql-schema-linter rules See How to disable graphql-schema-linter rules in files See Index of problems detected by graphql-schema-linter Configuration in Mega-Linter Enable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in ENABLE_LINTERS variable Disable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in DISABLE_LINTERS variable Variable Description Default value GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".graphql\"] GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAME graphql-schema-linter configuration file name Use LINTER_DEFAULT to let the linter find it .graphql-schema-linterrc GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .graphql Example calls graphql-schema-linter myfile.graphql Help content Usage: graphql-schema-linter [options] [schema.graphql ...] Options: -r, --rules <rules> only the rules specified will be used to validate the schema. Example: fields-have-descriptions,types-have-descriptions -o, --rules-options <rulesOptions> configure the specified rules with the passed in configuration options. example: {\"enum-values-sorted-alphabetically\":{\"sortOrder\":\"lexicographical\"}} -i, --ignore <ignore list> ignore errors for specific schema members, example: {'fields-have-descriptions':['Obvious','Query.obvious','Query.something.obvious']} -f, --format <format> choose the output format of the report. Possible values: json, text, compact -s, --stdin schema definition will be read from STDIN instead of specified file. -c, --config-directory <path> path to begin searching for config files. -p, --custom-rule-paths <paths> path to additional custom rules to be loaded. Example: rules/*.js --comment-descriptions use old way of defining descriptions in GraphQL SDL --old-implements-syntax use old way of defining implemented interfaces in GraphQL SDL -o, --only <rules> This option is DEPRECATED. Use `--rules` instead. -e, --except <rules> This option is DEPRECATED. Use `--rules` instead. --version output the version number -h, --help output usage information Installation on mega-linter Docker image NPM packages (node.js): graphql-schema-linter Example success log Results of graphql-schema-linter linter (version 1.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/graphql_graphql_schema_linter/ ----------------------------------------------- [SUCCESS] .automation/test/graphql/graphql_good_1.graphql \u2714 0 errors detected Example error log Results of graphql-schema-linter linter (version 1.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/graphql_graphql_schema_linter/ ----------------------------------------------- [ERROR] .automation/test/graphql/graphql_bad_1.graphql .automation/test/graphql/graphql_bad_1.graphql 8:11 Unknown type \"Book\". invalid-graphql-schema \u2716 1 error detected","title":"graphql-schema-linter"},{"location":"descriptors/graphql_graphql_schema_linter/#graphql-schema-linter","text":"","title":"graphql-schema-linter"},{"location":"descriptors/graphql_graphql_schema_linter/#graphql-schema-linter-documentation","text":"Version in Mega-Linter: 2.0.1 Visit Official Web Site See How to configure graphql-schema-linter rules See How to disable graphql-schema-linter rules in files See Index of problems detected by graphql-schema-linter","title":"graphql-schema-linter documentation"},{"location":"descriptors/graphql_graphql_schema_linter/#configuration-in-mega-linter","text":"Enable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in ENABLE_LINTERS variable Disable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in DISABLE_LINTERS variable Variable Description Default value GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".graphql\"] GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAME graphql-schema-linter configuration file name Use LINTER_DEFAULT to let the linter find it .graphql-schema-linterrc GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/graphql_graphql_schema_linter/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/graphql_graphql_schema_linter/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/graphql_graphql_schema_linter/#how-are-identified-applicable-files","text":"File extensions: .graphql","title":"How are identified applicable files"},{"location":"descriptors/graphql_graphql_schema_linter/#example-calls","text":"graphql-schema-linter myfile.graphql","title":"Example calls"},{"location":"descriptors/graphql_graphql_schema_linter/#help-content","text":"Usage: graphql-schema-linter [options] [schema.graphql ...] Options: -r, --rules <rules> only the rules specified will be used to validate the schema. Example: fields-have-descriptions,types-have-descriptions -o, --rules-options <rulesOptions> configure the specified rules with the passed in configuration options. example: {\"enum-values-sorted-alphabetically\":{\"sortOrder\":\"lexicographical\"}} -i, --ignore <ignore list> ignore errors for specific schema members, example: {'fields-have-descriptions':['Obvious','Query.obvious','Query.something.obvious']} -f, --format <format> choose the output format of the report. Possible values: json, text, compact -s, --stdin schema definition will be read from STDIN instead of specified file. -c, --config-directory <path> path to begin searching for config files. -p, --custom-rule-paths <paths> path to additional custom rules to be loaded. Example: rules/*.js --comment-descriptions use old way of defining descriptions in GraphQL SDL --old-implements-syntax use old way of defining implemented interfaces in GraphQL SDL -o, --only <rules> This option is DEPRECATED. Use `--rules` instead. -e, --except <rules> This option is DEPRECATED. Use `--rules` instead. --version output the version number -h, --help output usage information","title":"Help content"},{"location":"descriptors/graphql_graphql_schema_linter/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): graphql-schema-linter","title":"Installation on mega-linter Docker image"},{"location":"descriptors/graphql_graphql_schema_linter/#example-success-log","text":"Results of graphql-schema-linter linter (version 1.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/graphql_graphql_schema_linter/ ----------------------------------------------- [SUCCESS] .automation/test/graphql/graphql_good_1.graphql \u2714 0 errors detected","title":"Example success log"},{"location":"descriptors/graphql_graphql_schema_linter/#example-error-log","text":"Results of graphql-schema-linter linter (version 1.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/graphql_graphql_schema_linter/ ----------------------------------------------- [ERROR] .automation/test/graphql/graphql_bad_1.graphql .automation/test/graphql/graphql_bad_1.graphql 8:11 Unknown type \"Book\". invalid-graphql-schema \u2716 1 error detected","title":"Example error log"},{"location":"descriptors/groovy/","text":"GROOVY Linters Linter Configuration key npm-groovy-lint GROOVY Linted files File extensions: .groovy .gvy .gradle .nf File names: Jenkinsfile Configuration in Mega-Linter Variable Description Default value GROOVY_FILTER_REGEX_INCLUDE Custom regex including filter GROOVY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All GROOVY linters"},{"location":"descriptors/groovy/#groovy","text":"","title":"GROOVY"},{"location":"descriptors/groovy/#linters","text":"Linter Configuration key npm-groovy-lint GROOVY","title":"Linters"},{"location":"descriptors/groovy/#linted-files","text":"File extensions: .groovy .gvy .gradle .nf File names: Jenkinsfile","title":"Linted files"},{"location":"descriptors/groovy/#configuration-in-mega-linter","text":"Variable Description Default value GROOVY_FILTER_REGEX_INCLUDE Custom regex including filter GROOVY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/groovy_npm_groovy_lint/","text":"npm-groovy-lint npm-groovy-lint documentation Version in Mega-Linter: 8.1.0 Visit Official Web Site See How to configure npm-groovy-lint rules If custom .groovylintrc.json is not found, .groovylintrc.json will be used See How to disable npm-groovy-lint rules in files See Index of problems detected by npm-groovy-lint Configuration in Mega-Linter Enable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in ENABLE_LINTERS variable Disable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding GROOVY_NPM_GROOVY_LINT in APPLY_FIXES variable Variable Description Default value GROOVY_NPM_GROOVY_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".groovy\", \".gvy\", \".gradle\", \".nf\"] GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Jenkinsfile\"] GROOVY_NPM_GROOVY_LINT_FILE_NAME npm-groovy-lint configuration file name Use LINTER_DEFAULT to let the linter find it .groovylintrc.json GROOVY_NPM_GROOVY_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use npm-groovy-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code VsCode Groovy Lint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .groovy .gvy .gradle .nf File names: Jenkinsfile Example calls npm-groovy-lint --path . --files myfile.groovy npm-groovy-lint --path . --files myfile.groovy -c .groovylintrc.json npm-groovy-lint --path . --files myfile.groovy -c .groovylintrc.json --fix Help content npm-groovy-lint [options] -p, --path path::String Directory containing the files to lint (default: current directory) - default: . -f, --files String Comma-separated list of Ant-style file patterns specifying files that must be included -s, --source String Source text to lint (if no path/files arguments) --sourcefilepath String Full path of the file whose content is sent in source argument --parse Try to parse the source code with GroovyShell and return errors (use argument --no-parse if you want to deactivate) -c, --config String Custom path to directory containing GroovyLint config file. Default: Found groovylintrc.js/json/yml/package.json config file, or default npm-groovy-lint config if not defined. Note: command-line arguments have priority on config file properties - default: / --format Format source code --fix Automatically fix problems when possible -x, --fixrules String Option for --fix argument: List of rule identifiers to fix (if not specified, all available fixes will be applied) - default: all -i, --ignorepattern String Comma-separated list of Ant-style file patterns specifying files that must be ignored. Default: none -r, --rulesets String RuleSet file(s) to use for linting. If it is a directory, all rulesets will be used. RuleSet file definition: http://codenarc.github.io/CodeNarc/codenarc-creating-ruleset.html. If not specified, npm-groovy-script default one will be used. Can also be a list of rule identifiers with parameters --rulesetsoverridetype String If list of rules sent in rulesets option, defines if they replace rules defined in .groovylintrc.json, or if they are appended - either: replaceConfig or appendConfig - default: replaceConfig -o, --output String Output format (txt,json,html,xml), or path to a file with one of these extensions - default: txt -l, --loglevel String Log level (error,warning,info) - either: error, warning, or info - default: info --verbose More outputs in console, including performed fixes --failon String Defines the error level where CLI will fail (return code = 1). error,warning,info or none. Every failure level includes the more critical ones. - either: error, warning, info, or none - default: none --failonerror (Deprecated) Fails if at least one error is found --failonwarning (Deprecated) Fails if at least one warning is found --failoninfo (Deprecated) Fails if at least one error is found --codenarcargs Use core CodeNarc arguments (all npm-groovy-lint arguments will be ignored). Doc: http://codenarc.github.io/CodeNarc/codenarc-command-line.html --noserver For better performances, npm-groovy-lint runs a local server to eep CodeNarc alive instead of loading java/groovy at each call. If you don't want that, send this argument --serverhost String If use of CodeNarc server, host where is the CodeNarc server (default: localhost) - default: http://localhost --serverport String If use of CodeNarc server, port of the CodeNarc server (default: 7484) - default: 7484 -j, --javaexecutable String If you do not want to use default java executable to run CodeNarcServer, you can override it - default: java --javaoptions String Override java options - default: -Xms256m,-Xmx2048m --killserver Terminate the CodeNarcServer if running --nolintafter Do not lint again after format and fix options (useful for client calling Npm Groovy Lint) --returnrules Return rule descriptions and url if this argument is set --insight npm-groovy-lint collects anonymous usage statistics using package https://www.npmjs.com/package/insight. If you do not want to share them, use --no-insight option -h, --help Show help (npm-groovy-lint -help OPTIONNAME to see option detail) -v, --version Show version Installation on mega-linter Docker image NPM packages (node.js): npm-groovy-lint Example success log Results of npm-groovy-lint linter (version 8.0.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/groovy_npm_groovy_lint/ ----------------------------------------------- [SUCCESS] .automation/test/groovy/groovy_good_01.groovy .automation/test/groovy/groovy_good_01.groovy npm-groovy-lint results in 1 linted files: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 (index) \u2502 Severity \u2502 Total found \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 'Error' \u2502 0 \u2502 \u2502 1 \u2502 'Warning' \u2502 0 \u2502 \u2502 2 \u2502 'Info' \u2502 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Example error log Results of npm-groovy-lint linter (version 8.0.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/groovy_npm_groovy_lint/ ----------------------------------------------- [ERROR] .automation/test/groovy/groovy_bad_01.groovy .automation/test/groovy/groovy_bad_01.groovy 4 error Unexpected input: '$' @ line 4, column 16. NglParseError 2 info Line ends with whitespace characters TrailingWhitespace npm-groovy-lint results in 1 linted files: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 (index) \u2502 Severity \u2502 Total found \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 'Error' \u2502 1 \u2502 \u2502 1 \u2502 'Warning' \u2502 0 \u2502 \u2502 2 \u2502 'Info' \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Failure: 1 error(s) have been found 0 warning(s) have been found 1 info(s) have been found","title":"npm-groovy-lint"},{"location":"descriptors/groovy_npm_groovy_lint/#npm-groovy-lint","text":"","title":"npm-groovy-lint"},{"location":"descriptors/groovy_npm_groovy_lint/#npm-groovy-lint-documentation","text":"Version in Mega-Linter: 8.1.0 Visit Official Web Site See How to configure npm-groovy-lint rules If custom .groovylintrc.json is not found, .groovylintrc.json will be used See How to disable npm-groovy-lint rules in files See Index of problems detected by npm-groovy-lint","title":"npm-groovy-lint documentation"},{"location":"descriptors/groovy_npm_groovy_lint/#configuration-in-mega-linter","text":"Enable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in ENABLE_LINTERS variable Disable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding GROOVY_NPM_GROOVY_LINT in APPLY_FIXES variable Variable Description Default value GROOVY_NPM_GROOVY_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".groovy\", \".gvy\", \".gradle\", \".nf\"] GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Jenkinsfile\"] GROOVY_NPM_GROOVY_LINT_FILE_NAME npm-groovy-lint configuration file name Use LINTER_DEFAULT to let the linter find it .groovylintrc.json GROOVY_NPM_GROOVY_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/groovy_npm_groovy_lint/#ide-integration","text":"Use npm-groovy-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code VsCode Groovy Lint","title":"IDE Integration"},{"location":"descriptors/groovy_npm_groovy_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/groovy_npm_groovy_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/groovy_npm_groovy_lint/#how-are-identified-applicable-files","text":"File extensions: .groovy .gvy .gradle .nf File names: Jenkinsfile","title":"How are identified applicable files"},{"location":"descriptors/groovy_npm_groovy_lint/#example-calls","text":"npm-groovy-lint --path . --files myfile.groovy npm-groovy-lint --path . --files myfile.groovy -c .groovylintrc.json npm-groovy-lint --path . --files myfile.groovy -c .groovylintrc.json --fix","title":"Example calls"},{"location":"descriptors/groovy_npm_groovy_lint/#help-content","text":"npm-groovy-lint [options] -p, --path path::String Directory containing the files to lint (default: current directory) - default: . -f, --files String Comma-separated list of Ant-style file patterns specifying files that must be included -s, --source String Source text to lint (if no path/files arguments) --sourcefilepath String Full path of the file whose content is sent in source argument --parse Try to parse the source code with GroovyShell and return errors (use argument --no-parse if you want to deactivate) -c, --config String Custom path to directory containing GroovyLint config file. Default: Found groovylintrc.js/json/yml/package.json config file, or default npm-groovy-lint config if not defined. Note: command-line arguments have priority on config file properties - default: / --format Format source code --fix Automatically fix problems when possible -x, --fixrules String Option for --fix argument: List of rule identifiers to fix (if not specified, all available fixes will be applied) - default: all -i, --ignorepattern String Comma-separated list of Ant-style file patterns specifying files that must be ignored. Default: none -r, --rulesets String RuleSet file(s) to use for linting. If it is a directory, all rulesets will be used. RuleSet file definition: http://codenarc.github.io/CodeNarc/codenarc-creating-ruleset.html. If not specified, npm-groovy-script default one will be used. Can also be a list of rule identifiers with parameters --rulesetsoverridetype String If list of rules sent in rulesets option, defines if they replace rules defined in .groovylintrc.json, or if they are appended - either: replaceConfig or appendConfig - default: replaceConfig -o, --output String Output format (txt,json,html,xml), or path to a file with one of these extensions - default: txt -l, --loglevel String Log level (error,warning,info) - either: error, warning, or info - default: info --verbose More outputs in console, including performed fixes --failon String Defines the error level where CLI will fail (return code = 1). error,warning,info or none. Every failure level includes the more critical ones. - either: error, warning, info, or none - default: none --failonerror (Deprecated) Fails if at least one error is found --failonwarning (Deprecated) Fails if at least one warning is found --failoninfo (Deprecated) Fails if at least one error is found --codenarcargs Use core CodeNarc arguments (all npm-groovy-lint arguments will be ignored). Doc: http://codenarc.github.io/CodeNarc/codenarc-command-line.html --noserver For better performances, npm-groovy-lint runs a local server to eep CodeNarc alive instead of loading java/groovy at each call. If you don't want that, send this argument --serverhost String If use of CodeNarc server, host where is the CodeNarc server (default: localhost) - default: http://localhost --serverport String If use of CodeNarc server, port of the CodeNarc server (default: 7484) - default: 7484 -j, --javaexecutable String If you do not want to use default java executable to run CodeNarcServer, you can override it - default: java --javaoptions String Override java options - default: -Xms256m,-Xmx2048m --killserver Terminate the CodeNarcServer if running --nolintafter Do not lint again after format and fix options (useful for client calling Npm Groovy Lint) --returnrules Return rule descriptions and url if this argument is set --insight npm-groovy-lint collects anonymous usage statistics using package https://www.npmjs.com/package/insight. If you do not want to share them, use --no-insight option -h, --help Show help (npm-groovy-lint -help OPTIONNAME to see option detail) -v, --version Show version","title":"Help content"},{"location":"descriptors/groovy_npm_groovy_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): npm-groovy-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/groovy_npm_groovy_lint/#example-success-log","text":"Results of npm-groovy-lint linter (version 8.0.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/groovy_npm_groovy_lint/ ----------------------------------------------- [SUCCESS] .automation/test/groovy/groovy_good_01.groovy .automation/test/groovy/groovy_good_01.groovy npm-groovy-lint results in 1 linted files: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 (index) \u2502 Severity \u2502 Total found \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 'Error' \u2502 0 \u2502 \u2502 1 \u2502 'Warning' \u2502 0 \u2502 \u2502 2 \u2502 'Info' \u2502 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Example success log"},{"location":"descriptors/groovy_npm_groovy_lint/#example-error-log","text":"Results of npm-groovy-lint linter (version 8.0.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/groovy_npm_groovy_lint/ ----------------------------------------------- [ERROR] .automation/test/groovy/groovy_bad_01.groovy .automation/test/groovy/groovy_bad_01.groovy 4 error Unexpected input: '$' @ line 4, column 16. NglParseError 2 info Line ends with whitespace characters TrailingWhitespace npm-groovy-lint results in 1 linted files: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 (index) \u2502 Severity \u2502 Total found \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 'Error' \u2502 1 \u2502 \u2502 1 \u2502 'Warning' \u2502 0 \u2502 \u2502 2 \u2502 'Info' \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Failure: 1 error(s) have been found 0 warning(s) have been found 1 info(s) have been found","title":"Example error log"},{"location":"descriptors/html/","text":"HTML Linters Linter Configuration key htmlhint HTML Linted files File extensions: .html .htm Configuration in Mega-Linter Variable Description Default value HTML_FILTER_REGEX_INCLUDE Custom regex including filter HTML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All HTML linters"},{"location":"descriptors/html/#html","text":"","title":"HTML"},{"location":"descriptors/html/#linters","text":"Linter Configuration key htmlhint HTML","title":"Linters"},{"location":"descriptors/html/#linted-files","text":"File extensions: .html .htm","title":"Linted files"},{"location":"descriptors/html/#configuration-in-mega-linter","text":"Variable Description Default value HTML_FILTER_REGEX_INCLUDE Custom regex including filter HTML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/html_htmlhint/","text":"htmlhint htmlhint documentation Version in Mega-Linter: 0.14.2 Visit Official Web Site See How to configure htmlhint rules If custom .htmlhintrc is not found, .htmlhintrc will be used See How to disable htmlhint rules in files See Index of problems detected by htmlhint Configuration in Mega-Linter Enable htmlhint by adding HTML_HTMLHINT in ENABLE_LINTERS variable Disable htmlhint by adding HTML_HTMLHINT in DISABLE_LINTERS variable Variable Description Default value HTML_HTMLHINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" HTML_HTMLHINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file HTML_HTMLHINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file HTML_HTMLHINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".html\", \".htm\"] HTML_HTMLHINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file HTML_HTMLHINT_FILE_NAME htmlhint configuration file name Use LINTER_DEFAULT to let the linter find it .htmlhintrc HTML_HTMLHINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules HTML_HTMLHINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use htmlhint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom atom-htmlhint Brackets brackets-htmlhint Sublime Text SublimeLinter-contrib-htmlhint Visual Studio Code vscode-htmlhint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .html .htm Example calls htmlhint myfile.html htmlhint --config .htmlhintrc myfile.html Help content Usage: htmlhint <file|folder|pattern|stdin|url ...> [options] Options: -V, --version output the version number -l, --list show all of the rules available -c, --config <file> custom configuration file -r, --rules <ruleid, ruleid=value ...> set all of the rules available -R, --rulesdir <file|folder> load custom rules from file or folder -f, --format <checkstyle|compact|html|json|junit|markdown|unix> output messages as custom format -i, --ignore <pattern, pattern ...> add pattern to exclude matches --nocolor disable color --warn Warn only, exit with 0 -h, --help display help for command Examples: htmlhint htmlhint www htmlhint www/test.html htmlhint www/**/*.xhtml htmlhint www/**/*.{htm,html} htmlhint http://www.alibaba.com/ cat test.html | htmlhint stdin htmlhint --list htmlhint --rules tag-pair,id-class-value=underline test.html htmlhint --config .htmlhintrc test.html htmlhint --ignore **/build/**,**/test/** htmlhint --rulesdir ./rules/ Installation on mega-linter Docker image NPM packages (node.js): htmlhint Example success log Results of htmlhint linter (version 0.14.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/html_htmlhint/ ----------------------------------------------- [SUCCESS] .automation/test/html/html_good_01.html Config loaded: /action/lib/.automation/.htmlhintrc Scanned 1 files, no errors found (22 ms). Example error log Results of htmlhint linter (version 0.14.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/html_htmlhint/ ----------------------------------------------- [ERROR] .automation/test/html/html_bad_01.html Config loaded: /action/lib/.automation/.htmlhintrc .automation/test/html/html_bad_01.html L8 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L8 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L8 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L9 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L9 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L9 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L10 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L10 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L10 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L11 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L11 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L11 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L12 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L12 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L12 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L13 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L13 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L13 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L14 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L14 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L14 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L15 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L15 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L15 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L16 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L16 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L16 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L17 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L17 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L17 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L18 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L18 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L18 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L19 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L19 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L19 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L20 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L20 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L20 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L21 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L21 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L21 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L22 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L22 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L22 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L23 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L23 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L23 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L24 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L24 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L24 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L25 | <input type=\"text\"></input> ^ Tag must be paired, no start tag: [ </input> ] (tag-pair) L26 | <div class\"foo\"> ^ Special characters must be escaped : [ < ]. (spec-char-escape) L26 | <div class\"foo\"> ^ Special characters must be escaped : [ > ]. (spec-char-escape) L28 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L29 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L30 | </hello> ^ Tag must be paired, no start tag: [ </hello> ] (tag-pair) L31 | </test> ^ Tag must be paired, no start tag: [ </test> ] (tag-pair) L32 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L38 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L38 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L38 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L44 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L50 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L50 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L50 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L56 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L62 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L62 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L62 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L68 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L74 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L74 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L74 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L80 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L81 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L82 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L83 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L84 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L85 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L86 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L87 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L88 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L89 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L90 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L91 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L92 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L93 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L94 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L95 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L96 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L97 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) Scanned 1 files, found 92 errors in 1 files (32 ms)","title":"htmlhint"},{"location":"descriptors/html_htmlhint/#htmlhint","text":"","title":"htmlhint"},{"location":"descriptors/html_htmlhint/#htmlhint-documentation","text":"Version in Mega-Linter: 0.14.2 Visit Official Web Site See How to configure htmlhint rules If custom .htmlhintrc is not found, .htmlhintrc will be used See How to disable htmlhint rules in files See Index of problems detected by htmlhint","title":"htmlhint documentation"},{"location":"descriptors/html_htmlhint/#configuration-in-mega-linter","text":"Enable htmlhint by adding HTML_HTMLHINT in ENABLE_LINTERS variable Disable htmlhint by adding HTML_HTMLHINT in DISABLE_LINTERS variable Variable Description Default value HTML_HTMLHINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" HTML_HTMLHINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file HTML_HTMLHINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file HTML_HTMLHINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".html\", \".htm\"] HTML_HTMLHINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file HTML_HTMLHINT_FILE_NAME htmlhint configuration file name Use LINTER_DEFAULT to let the linter find it .htmlhintrc HTML_HTMLHINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules HTML_HTMLHINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/html_htmlhint/#ide-integration","text":"Use htmlhint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom atom-htmlhint Brackets brackets-htmlhint Sublime Text SublimeLinter-contrib-htmlhint Visual Studio Code vscode-htmlhint","title":"IDE Integration"},{"location":"descriptors/html_htmlhint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/html_htmlhint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/html_htmlhint/#how-are-identified-applicable-files","text":"File extensions: .html .htm","title":"How are identified applicable files"},{"location":"descriptors/html_htmlhint/#example-calls","text":"htmlhint myfile.html htmlhint --config .htmlhintrc myfile.html","title":"Example calls"},{"location":"descriptors/html_htmlhint/#help-content","text":"Usage: htmlhint <file|folder|pattern|stdin|url ...> [options] Options: -V, --version output the version number -l, --list show all of the rules available -c, --config <file> custom configuration file -r, --rules <ruleid, ruleid=value ...> set all of the rules available -R, --rulesdir <file|folder> load custom rules from file or folder -f, --format <checkstyle|compact|html|json|junit|markdown|unix> output messages as custom format -i, --ignore <pattern, pattern ...> add pattern to exclude matches --nocolor disable color --warn Warn only, exit with 0 -h, --help display help for command Examples: htmlhint htmlhint www htmlhint www/test.html htmlhint www/**/*.xhtml htmlhint www/**/*.{htm,html} htmlhint http://www.alibaba.com/ cat test.html | htmlhint stdin htmlhint --list htmlhint --rules tag-pair,id-class-value=underline test.html htmlhint --config .htmlhintrc test.html htmlhint --ignore **/build/**,**/test/** htmlhint --rulesdir ./rules/","title":"Help content"},{"location":"descriptors/html_htmlhint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): htmlhint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/html_htmlhint/#example-success-log","text":"Results of htmlhint linter (version 0.14.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/html_htmlhint/ ----------------------------------------------- [SUCCESS] .automation/test/html/html_good_01.html Config loaded: /action/lib/.automation/.htmlhintrc Scanned 1 files, no errors found (22 ms).","title":"Example success log"},{"location":"descriptors/html_htmlhint/#example-error-log","text":"Results of htmlhint linter (version 0.14.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/html_htmlhint/ ----------------------------------------------- [ERROR] .automation/test/html/html_bad_01.html Config loaded: /action/lib/.automation/.htmlhintrc .automation/test/html/html_bad_01.html L8 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L8 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L8 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L9 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L9 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L9 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L10 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L10 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L10 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L11 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L11 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L11 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L12 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L12 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L12 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L13 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L13 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L13 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L14 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L14 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L14 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L15 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L15 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L15 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L16 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L16 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L16 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L17 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L17 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L17 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L18 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L18 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L18 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L19 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L19 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L19 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L20 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L20 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L20 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L21 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L21 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L21 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L22 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L22 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L22 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L23 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L23 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L23 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L24 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L24 | <div bad='' bad=''></div> ^ The value of attribute [ bad ] must be in double quotes. (attr-value-double-quotes) L24 | <div bad='' bad=''></div> ^ Duplicate of attribute name [ bad ] was found. (attr-no-duplication) L25 | <input type=\"text\"></input> ^ Tag must be paired, no start tag: [ </input> ] (tag-pair) L26 | <div class\"foo\"> ^ Special characters must be escaped : [ < ]. (spec-char-escape) L26 | <div class\"foo\"> ^ Special characters must be escaped : [ > ]. (spec-char-escape) L28 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L29 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L30 | </hello> ^ Tag must be paired, no start tag: [ </hello> ] (tag-pair) L31 | </test> ^ Tag must be paired, no start tag: [ </test> ] (tag-pair) L32 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L38 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L38 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L38 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L44 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L50 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L50 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L50 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L56 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L62 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L62 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L62 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L68 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L74 | <div class='' what='' something=''></div> ^ The value of attribute [ class ] must be in double quotes. (attr-value-double-quotes) L74 | <div class='' what='' something=''></div> ^ The value of attribute [ what ] must be in double quotes. (attr-value-double-quotes) L74 | <div class='' what='' something=''></div> ^ The value of attribute [ something ] must be in double quotes. (attr-value-double-quotes) L80 | </div> ^ Tag must be paired, no start tag: [ </div> ] (tag-pair) L81 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L82 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L83 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L84 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L85 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L86 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L87 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L88 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L89 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L90 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L91 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L92 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L93 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L94 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L95 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L96 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) L97 |</bad> ^ Tag must be paired, no start tag: [ </bad> ] (tag-pair) Scanned 1 files, found 92 errors in 1 files (32 ms)","title":"Example error log"},{"location":"descriptors/java/","text":"JAVA Linters Linter Configuration key checkstyle JAVA Linted files File extensions: .java Configuration in Mega-Linter Variable Description Default value JAVA_FILTER_REGEX_INCLUDE Custom regex including filter JAVA_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" APK packages (Linux): openjdk8","title":"All JAVA linters"},{"location":"descriptors/java/#java","text":"","title":"JAVA"},{"location":"descriptors/java/#linters","text":"Linter Configuration key checkstyle JAVA","title":"Linters"},{"location":"descriptors/java/#linted-files","text":"File extensions: .java","title":"Linted files"},{"location":"descriptors/java/#configuration-in-mega-linter","text":"Variable Description Default value JAVA_FILTER_REGEX_INCLUDE Custom regex including filter JAVA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/java/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/java/#installation","text":"Dockerfile commands : ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" APK packages (Linux): openjdk8","title":"Installation"},{"location":"descriptors/java_checkstyle/","text":"checkstyle documentation Version in Mega-Linter: 8.38 Visit Official Web Site See How to configure checkstyle rules If custom sun_checks.xml is not found, sun_checks.xml will be used See How to disable checkstyle rules in files See Index of problems detected by checkstyle Configuration in Mega-Linter Enable checkstyle by adding JAVA_CHECKSTYLE in ENABLE_LINTERS variable Disable checkstyle by adding JAVA_CHECKSTYLE in DISABLE_LINTERS variable Variable Description Default value JAVA_CHECKSTYLE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JAVA_CHECKSTYLE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".java\"] JAVA_CHECKSTYLE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVA_CHECKSTYLE_FILE_NAME checkstyle configuration file name Use LINTER_DEFAULT to let the linter find it sun_checks.xml JAVA_CHECKSTYLE_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules JAVA_CHECKSTYLE_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use checkstyle in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Eclipse eclipse-cs IDEA checkstyle-idea Visual Studio Code vscode-checkstyle Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 java Mega-Linter optimized for JAVA based projects 30 Behind the scenes How are identified applicable files File extensions: .java Example calls java -jar /usr/bin/checkstyle myfile.java java -jar /usr/bin/checkstyle -c sun_checks.xml myfile.java Help content Usage: java [-options] class [args...] (to execute a class) or java [-options] -jar jarfile [args...] (to execute a jar file) where options include: -d32 use a 32-bit data model if available -d64 use a 64-bit data model if available -server to select the \"server\" VM The default VM is server, because you are running on a server-class machine. -cp <class search path of directories and zip/jar files> -classpath <class search path of directories and zip/jar files> A : separated list of directories, JAR archives, and ZIP archives to search for class files. -D<name>=<value> set a system property -verbose:[class|gc|jni] enable verbose output -version print product version and exit -version:<value> Warning: this feature is deprecated and will be removed in a future release. require the specified version to run -showversion print product version and continue -jre-restrict-search | -no-jre-restrict-search Warning: this feature is deprecated and will be removed in a future release. include/exclude user private JREs in the version search -? -help print this help message -X print help on non-standard options -ea[:<packagename>...|:<classname>] -enableassertions[:<packagename>...|:<classname>] enable assertions with specified granularity -da[:<packagename>...|:<classname>] -disableassertions[:<packagename>...|:<classname>] disable assertions with specified granularity -esa | -enablesystemassertions enable system assertions -dsa | -disablesystemassertions disable system assertions -agentlib:<libname>[=<options>] load native agent library <libname>, e.g. -agentlib:hprof see also, -agentlib:jdwp=help and -agentlib:hprof=help -agentpath:<pathname>[=<options>] load native agent library by full pathname -javaagent:<jarpath>[=<options>] load Java programming language agent, see java.lang.instrument -splash:<imagepath> show splash screen with specified image See http://www.oracle.com/technetwork/java/javase/documentation/index.html for more details. Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install RUN CHECKSTYLE_LATEST=$(curl -s https://api.github.com/repos/checkstyle/checkstyle/releases/latest \\ | grep browser_download_url \\ | grep \".jar\" \\ | cut -d '\"' -f 4) \\ && curl --retry 5 --retry-delay 5 -sSL $CHECKSTYLE_LATEST \\ --output /usr/bin/checkstyle Example success log Results of checkstyle linter (version 8.38) See documentation on https://nvuillam.github.io/mega-linter/descriptors/java_checkstyle/ ----------------------------------------------- [SUCCESS] .automation/test/java/java_good_1.java Starting audit... Audit done. Example error log Results of checkstyle linter (version 8.38) See documentation on https://nvuillam.github.io/mega-linter/descriptors/java_checkstyle/ ----------------------------------------------- [ERROR] .automation/test/java/java_bad_1.java Starting audit... [ERROR] .automation/test/java/java_bad_1.java:1:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor] [ERROR] .automation/test/java/java_bad_1.java:1:7: Name 'java_bad_1' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] [ERROR] .automation/test/java/java_bad_1.java:2:1: '{' at column 1 should be on the previous line. [LeftCurly] [ERROR] .automation/test/java/java_bad_1.java:4:29: Parameter args should be final. [FinalParameters] [ERROR] .automation/test/java/java_bad_1.java:4:40: Array brackets at illegal position. [ArrayTypeStyle] [ERROR] .automation/test/java/java_bad_1.java:5:5: '{' at column 5 should be on the previous line. [LeftCurly] Audit done. Checkstyle ends with 6 errors.","title":"checkstyle"},{"location":"descriptors/java_checkstyle/#checkstyle-documentation","text":"Version in Mega-Linter: 8.38 Visit Official Web Site See How to configure checkstyle rules If custom sun_checks.xml is not found, sun_checks.xml will be used See How to disable checkstyle rules in files See Index of problems detected by checkstyle","title":"checkstyle documentation"},{"location":"descriptors/java_checkstyle/#configuration-in-mega-linter","text":"Enable checkstyle by adding JAVA_CHECKSTYLE in ENABLE_LINTERS variable Disable checkstyle by adding JAVA_CHECKSTYLE in DISABLE_LINTERS variable Variable Description Default value JAVA_CHECKSTYLE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JAVA_CHECKSTYLE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".java\"] JAVA_CHECKSTYLE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVA_CHECKSTYLE_FILE_NAME checkstyle configuration file name Use LINTER_DEFAULT to let the linter find it sun_checks.xml JAVA_CHECKSTYLE_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules JAVA_CHECKSTYLE_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/java_checkstyle/#ide-integration","text":"Use checkstyle in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Eclipse eclipse-cs IDEA checkstyle-idea Visual Studio Code vscode-checkstyle","title":"IDE Integration"},{"location":"descriptors/java_checkstyle/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 java Mega-Linter optimized for JAVA based projects 30","title":"Mega-Linter Flavours"},{"location":"descriptors/java_checkstyle/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/java_checkstyle/#how-are-identified-applicable-files","text":"File extensions: .java","title":"How are identified applicable files"},{"location":"descriptors/java_checkstyle/#example-calls","text":"java -jar /usr/bin/checkstyle myfile.java java -jar /usr/bin/checkstyle -c sun_checks.xml myfile.java","title":"Example calls"},{"location":"descriptors/java_checkstyle/#help-content","text":"Usage: java [-options] class [args...] (to execute a class) or java [-options] -jar jarfile [args...] (to execute a jar file) where options include: -d32 use a 32-bit data model if available -d64 use a 64-bit data model if available -server to select the \"server\" VM The default VM is server, because you are running on a server-class machine. -cp <class search path of directories and zip/jar files> -classpath <class search path of directories and zip/jar files> A : separated list of directories, JAR archives, and ZIP archives to search for class files. -D<name>=<value> set a system property -verbose:[class|gc|jni] enable verbose output -version print product version and exit -version:<value> Warning: this feature is deprecated and will be removed in a future release. require the specified version to run -showversion print product version and continue -jre-restrict-search | -no-jre-restrict-search Warning: this feature is deprecated and will be removed in a future release. include/exclude user private JREs in the version search -? -help print this help message -X print help on non-standard options -ea[:<packagename>...|:<classname>] -enableassertions[:<packagename>...|:<classname>] enable assertions with specified granularity -da[:<packagename>...|:<classname>] -disableassertions[:<packagename>...|:<classname>] disable assertions with specified granularity -esa | -enablesystemassertions enable system assertions -dsa | -disablesystemassertions disable system assertions -agentlib:<libname>[=<options>] load native agent library <libname>, e.g. -agentlib:hprof see also, -agentlib:jdwp=help and -agentlib:hprof=help -agentpath:<pathname>[=<options>] load native agent library by full pathname -javaagent:<jarpath>[=<options>] load Java programming language agent, see java.lang.instrument -splash:<imagepath> show splash screen with specified image See http://www.oracle.com/technetwork/java/javase/documentation/index.html for more details.","title":"Help content"},{"location":"descriptors/java_checkstyle/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install RUN CHECKSTYLE_LATEST=$(curl -s https://api.github.com/repos/checkstyle/checkstyle/releases/latest \\ | grep browser_download_url \\ | grep \".jar\" \\ | cut -d '\"' -f 4) \\ && curl --retry 5 --retry-delay 5 -sSL $CHECKSTYLE_LATEST \\ --output /usr/bin/checkstyle","title":"Installation on mega-linter Docker image"},{"location":"descriptors/java_checkstyle/#example-success-log","text":"Results of checkstyle linter (version 8.38) See documentation on https://nvuillam.github.io/mega-linter/descriptors/java_checkstyle/ ----------------------------------------------- [SUCCESS] .automation/test/java/java_good_1.java Starting audit... Audit done.","title":"Example success log"},{"location":"descriptors/java_checkstyle/#example-error-log","text":"Results of checkstyle linter (version 8.38) See documentation on https://nvuillam.github.io/mega-linter/descriptors/java_checkstyle/ ----------------------------------------------- [ERROR] .automation/test/java/java_bad_1.java Starting audit... [ERROR] .automation/test/java/java_bad_1.java:1:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor] [ERROR] .automation/test/java/java_bad_1.java:1:7: Name 'java_bad_1' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] [ERROR] .automation/test/java/java_bad_1.java:2:1: '{' at column 1 should be on the previous line. [LeftCurly] [ERROR] .automation/test/java/java_bad_1.java:4:29: Parameter args should be final. [FinalParameters] [ERROR] .automation/test/java/java_bad_1.java:4:40: Array brackets at illegal position. [ArrayTypeStyle] [ERROR] .automation/test/java/java_bad_1.java:5:5: '{' at column 5 should be on the previous line. [LeftCurly] Audit done. Checkstyle ends with 6 errors.","title":"Example error log"},{"location":"descriptors/javascript/","text":"JAVASCRIPT Linters Linter Configuration key eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD Linted files File extensions: .js Configuration in Mega-Linter Variable Description Default value JAVASCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter JAVASCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): npm nodejs-current","title":"All JAVASCRIPT linters"},{"location":"descriptors/javascript/#javascript","text":"","title":"JAVASCRIPT"},{"location":"descriptors/javascript/#linters","text":"Linter Configuration key eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD","title":"Linters"},{"location":"descriptors/javascript/#linted-files","text":"File extensions: .js","title":"Linted files"},{"location":"descriptors/javascript/#configuration-in-mega-linter","text":"Variable Description Default value JAVASCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter JAVASCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/javascript/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/javascript/#installation","text":"APK packages (Linux): npm nodejs-current","title":"Installation"},{"location":"descriptors/javascript_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint Configuration in Mega-Linter Enable eslint by adding JAVASCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding JAVASCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_ES in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JAVASCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\", \".vue\"] JAVASCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_ES_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JAVASCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules JAVASCRIPT_ES_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .js .vue Example calls eslint myfile.js eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.js eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.js Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-vue babel-eslint Example success log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/javascript/javascript_good_1.js Example error log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_eslint/ ----------------------------------------------- [ERROR] .automation/test/javascript/javascript_bad_1.js .automation/test/javascript/javascript_bad_1.js 4:40 error Parsing error: Unterminated regular expression \u2716 1 problem (1 error, 0 warnings)","title":"eslint"},{"location":"descriptors/javascript_eslint/#eslint-documentation","text":"Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/javascript_eslint/#configuration-in-mega-linter","text":"Enable eslint by adding JAVASCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding JAVASCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_ES in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JAVASCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\", \".vue\"] JAVASCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_ES_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JAVASCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules JAVASCRIPT_ES_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/javascript_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/javascript_eslint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/javascript_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/javascript_eslint/#how-are-identified-applicable-files","text":"File extensions: .js .vue","title":"How are identified applicable files"},{"location":"descriptors/javascript_eslint/#example-calls","text":"eslint myfile.js eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.js eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.js","title":"Example calls"},{"location":"descriptors/javascript_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/javascript_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-vue babel-eslint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/javascript_eslint/#example-success-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/javascript/javascript_good_1.js","title":"Example success log"},{"location":"descriptors/javascript_eslint/#example-error-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_eslint/ ----------------------------------------------- [ERROR] .automation/test/javascript/javascript_bad_1.js .automation/test/javascript/javascript_bad_1.js 4:40 error Parsing error: Unterminated regular expression \u2716 1 problem (1 error, 0 warnings)","title":"Example error log"},{"location":"descriptors/javascript_standard/","text":"standard documentation Version in Mega-Linter: 15.0.1 Visit Official Web Site See Index of problems detected by standard Configuration in Mega-Linter Enable standard by adding JAVASCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding JAVASCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JAVASCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\"] JAVASCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_STANDARD_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use standard in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-js-standard Atom linter-js-standard-engine Atom standard-formatter Brackets brackets-standard IDEA native support Sublime Text SublimeLinter-contrib-standard Sublime Text StandardFormat Visual Studio Code https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .js Example calls standard myfile.js standard --fix myfile.js Help content standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, bundle.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems -v, --verbose Show rule names for errors (to ignore specific rules) --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint) Installation on mega-linter Docker image NPM packages (node.js): standard@15.0.1 Example success log Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_standard/ ----------------------------------------------- [SUCCESS] .automation/test/javascript/javascript_good_1.js Example error log Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_standard/ ----------------------------------------------- [ERROR] .automation/test/javascript/javascript_bad_1.js standard: Use JavaScript Standard Style (https://standardjs.com) .automation/test/javascript/javascript_bad_1.js:4:40: Parsing error: Unterminated regular expression","title":"standard"},{"location":"descriptors/javascript_standard/#standard-documentation","text":"Version in Mega-Linter: 15.0.1 Visit Official Web Site See Index of problems detected by standard","title":"standard documentation"},{"location":"descriptors/javascript_standard/#configuration-in-mega-linter","text":"Enable standard by adding JAVASCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding JAVASCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JAVASCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\"] JAVASCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_STANDARD_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/javascript_standard/#ide-integration","text":"Use standard in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-js-standard Atom linter-js-standard-engine Atom standard-formatter Brackets brackets-standard IDEA native support Sublime Text SublimeLinter-contrib-standard Sublime Text StandardFormat Visual Studio Code https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs","title":"IDE Integration"},{"location":"descriptors/javascript_standard/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/javascript_standard/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/javascript_standard/#how-are-identified-applicable-files","text":"File extensions: .js","title":"How are identified applicable files"},{"location":"descriptors/javascript_standard/#example-calls","text":"standard myfile.js standard --fix myfile.js","title":"Example calls"},{"location":"descriptors/javascript_standard/#help-content","text":"standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, bundle.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems -v, --verbose Show rule names for errors (to ignore specific rules) --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint)","title":"Help content"},{"location":"descriptors/javascript_standard/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): standard@15.0.1","title":"Installation on mega-linter Docker image"},{"location":"descriptors/javascript_standard/#example-success-log","text":"Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_standard/ ----------------------------------------------- [SUCCESS] .automation/test/javascript/javascript_good_1.js","title":"Example success log"},{"location":"descriptors/javascript_standard/#example-error-log","text":"Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/javascript_standard/ ----------------------------------------------- [ERROR] .automation/test/javascript/javascript_bad_1.js standard: Use JavaScript Standard Style (https://standardjs.com) .automation/test/javascript/javascript_bad_1.js:4:40: Parsing error: Unterminated regular expression","title":"Example error log"},{"location":"descriptors/json/","text":"JSON Linters Linter Configuration key jsonlint JSON Linted files File extensions: .json Configuration in Mega-Linter Variable Description Default value JSON_FILTER_REGEX_INCLUDE Custom regex including filter JSON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All JSON linters"},{"location":"descriptors/json/#json","text":"","title":"JSON"},{"location":"descriptors/json/#linters","text":"Linter Configuration key jsonlint JSON","title":"Linters"},{"location":"descriptors/json/#linted-files","text":"File extensions: .json","title":"Linted files"},{"location":"descriptors/json/#configuration-in-mega-linter","text":"Variable Description Default value JSON_FILTER_REGEX_INCLUDE Custom regex including filter JSON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/json_jsonlint/","text":"jsonlint jsonlint documentation Version in Mega-Linter: 1.6.3 Visit Official Web Site Configuration in Mega-Linter Enable jsonlint by adding JSON_JSONLINT in ENABLE_LINTERS variable Disable jsonlint by adding JSON_JSONLINT in DISABLE_LINTERS variable Variable Description Default value JSON_JSONLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_JSONLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JSON_JSONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JSON_JSONLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_JSONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_JSONLINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .json Example calls jsonlint myfile.json Help content Usage: jsonlint [file] [options] file file to parse; otherwise uses stdin Options: -v, --version print version and exit -s, --sort-keys sort object keys -i, --in-place overwrite the file -t CHAR, --indent CHAR character(s) to use for indentation [ ] -c, --compact compact error display -V, --validate a JSON schema to use for validation -e, --environment which specification of JSON Schema the validation file uses [json-schema-draft-03] -q, --quiet do not print the parsed json to STDOUT [false] -p, --pretty-print force pretty printing even if invalid Installation on mega-linter Docker image NPM packages (node.js): jsonlint Example success log Results of jsonlint linter (version 1.6.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/json_jsonlint/ ----------------------------------------------- [SUCCESS] .automation/test/json/json_good_1.json { \"arrow_spacing\": { \"level\": \"ignore\" }, \"braces_spacing\": { \"level\": \"ignore\", \"spaces\": 0, \"empty_object_spaces\": 0 } } Example error log Results of jsonlint linter (version 1.6.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/json_jsonlint/ ----------------------------------------------- [ERROR] .automation/test/json/json_bad_1.json Error: Parse error on line 6: ...ng\": { \"level\": 'ignore', \"space ----------------------^ Expecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[', got 'undefined' at Object.parseError (/node_modules/jsonlint/lib/jsonlint.js:55:11) at Object.parse (/node_modules/jsonlint/lib/jsonlint.js:132:22) at parse (/node_modules/jsonlint/lib/cli.js:82:14) at main (/node_modules/jsonlint/lib/cli.js:135:14) at Object.<anonymous> (/node_modules/jsonlint/lib/cli.js:179:1) at Module._compile (internal/modules/cjs/loader.js:1201:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1221:10) at Module.load (internal/modules/cjs/loader.js:1050:32) at Function.Module._load (internal/modules/cjs/loader.js:938:14) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)","title":"jsonlint"},{"location":"descriptors/json_jsonlint/#jsonlint","text":"","title":"jsonlint"},{"location":"descriptors/json_jsonlint/#jsonlint-documentation","text":"Version in Mega-Linter: 1.6.3 Visit Official Web Site","title":"jsonlint documentation"},{"location":"descriptors/json_jsonlint/#configuration-in-mega-linter","text":"Enable jsonlint by adding JSON_JSONLINT in ENABLE_LINTERS variable Disable jsonlint by adding JSON_JSONLINT in DISABLE_LINTERS variable Variable Description Default value JSON_JSONLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_JSONLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JSON_JSONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JSON_JSONLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_JSONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_JSONLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/json_jsonlint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/json_jsonlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/json_jsonlint/#how-are-identified-applicable-files","text":"File extensions: .json","title":"How are identified applicable files"},{"location":"descriptors/json_jsonlint/#example-calls","text":"jsonlint myfile.json","title":"Example calls"},{"location":"descriptors/json_jsonlint/#help-content","text":"Usage: jsonlint [file] [options] file file to parse; otherwise uses stdin Options: -v, --version print version and exit -s, --sort-keys sort object keys -i, --in-place overwrite the file -t CHAR, --indent CHAR character(s) to use for indentation [ ] -c, --compact compact error display -V, --validate a JSON schema to use for validation -e, --environment which specification of JSON Schema the validation file uses [json-schema-draft-03] -q, --quiet do not print the parsed json to STDOUT [false] -p, --pretty-print force pretty printing even if invalid","title":"Help content"},{"location":"descriptors/json_jsonlint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): jsonlint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/json_jsonlint/#example-success-log","text":"Results of jsonlint linter (version 1.6.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/json_jsonlint/ ----------------------------------------------- [SUCCESS] .automation/test/json/json_good_1.json { \"arrow_spacing\": { \"level\": \"ignore\" }, \"braces_spacing\": { \"level\": \"ignore\", \"spaces\": 0, \"empty_object_spaces\": 0 } }","title":"Example success log"},{"location":"descriptors/json_jsonlint/#example-error-log","text":"Results of jsonlint linter (version 1.6.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/json_jsonlint/ ----------------------------------------------- [ERROR] .automation/test/json/json_bad_1.json Error: Parse error on line 6: ...ng\": { \"level\": 'ignore', \"space ----------------------^ Expecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[', got 'undefined' at Object.parseError (/node_modules/jsonlint/lib/jsonlint.js:55:11) at Object.parse (/node_modules/jsonlint/lib/jsonlint.js:132:22) at parse (/node_modules/jsonlint/lib/cli.js:82:14) at main (/node_modules/jsonlint/lib/cli.js:135:14) at Object.<anonymous> (/node_modules/jsonlint/lib/cli.js:179:1) at Module._compile (internal/modules/cjs/loader.js:1201:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1221:10) at Module.load (internal/modules/cjs/loader.js:1050:32) at Function.Module._load (internal/modules/cjs/loader.js:938:14) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)","title":"Example error log"},{"location":"descriptors/jsx/","text":"JSX Linters Linter Configuration key eslint JSX Linted files File extensions: .jsx Configuration in Mega-Linter Variable Description Default value JSX_FILTER_REGEX_INCLUDE Custom regex including filter JSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All JSX linters"},{"location":"descriptors/jsx/#jsx","text":"","title":"JSX"},{"location":"descriptors/jsx/#linters","text":"Linter Configuration key eslint JSX","title":"Linters"},{"location":"descriptors/jsx/#linted-files","text":"File extensions: .jsx","title":"Linted files"},{"location":"descriptors/jsx/#configuration-in-mega-linter","text":"Variable Description Default value JSX_FILTER_REGEX_INCLUDE Custom regex including filter JSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/jsx_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint Configuration in Mega-Linter Enable eslint by adding JSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding JSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding JSX_ESLINT in APPLY_FIXES variable Variable Description Default value JSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".jsx\"] JSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSX_ESLINT_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules JSX_ESLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .jsx Example calls eslint myfile.jsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): eslint eslint-plugin-react Example success log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/jsx_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/jsx/jsx_good_1.jsx Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration . Example error log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/jsx_eslint/ ----------------------------------------------- [ERROR] .automation/test/jsx/jsx_bad_1.jsx .automation/test/jsx/jsx_bad_1.jsx 8:1 error Parsing error: Unexpected token const \u2716 1 problem (1 error, 0 warnings)","title":"eslint"},{"location":"descriptors/jsx_eslint/#eslint-documentation","text":"Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/jsx_eslint/#configuration-in-mega-linter","text":"Enable eslint by adding JSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding JSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding JSX_ESLINT in APPLY_FIXES variable Variable Description Default value JSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file JSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file JSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".jsx\"] JSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSX_ESLINT_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules JSX_ESLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/jsx_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/jsx_eslint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/jsx_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/jsx_eslint/#how-are-identified-applicable-files","text":"File extensions: .jsx","title":"How are identified applicable files"},{"location":"descriptors/jsx_eslint/#example-calls","text":"eslint myfile.jsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx","title":"Example calls"},{"location":"descriptors/jsx_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/jsx_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): eslint eslint-plugin-react","title":"Installation on mega-linter Docker image"},{"location":"descriptors/jsx_eslint/#example-success-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/jsx_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/jsx/jsx_good_1.jsx Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration .","title":"Example success log"},{"location":"descriptors/jsx_eslint/#example-error-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/jsx_eslint/ ----------------------------------------------- [ERROR] .automation/test/jsx/jsx_bad_1.jsx .automation/test/jsx/jsx_bad_1.jsx 8:1 error Parsing error: Unexpected token const \u2716 1 problem (1 error, 0 warnings)","title":"Example error log"},{"location":"descriptors/kotlin/","text":"KOTLIN Linters Linter Configuration key ktlint KOTLIN Linted files File extensions: .kt .kts Configuration in Mega-Linter Variable Description Default value KOTLIN_FILTER_REGEX_INCLUDE Custom regex including filter KOTLIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All KOTLIN linters"},{"location":"descriptors/kotlin/#kotlin","text":"","title":"KOTLIN"},{"location":"descriptors/kotlin/#linters","text":"Linter Configuration key ktlint KOTLIN","title":"Linters"},{"location":"descriptors/kotlin/#linted-files","text":"File extensions: .kt .kts","title":"Linted files"},{"location":"descriptors/kotlin/#configuration-in-mega-linter","text":"Variable Description Default value KOTLIN_FILTER_REGEX_INCLUDE Custom regex including filter KOTLIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/kotlin_ktlint/","text":"ktlint documentation Version in Mega-Linter: 0.40.0 Visit Official Web Site See Index of problems detected by ktlint Configuration in Mega-Linter Enable ktlint by adding KOTLIN_KTLINT in ENABLE_LINTERS variable Disable ktlint by adding KOTLIN_KTLINT in DISABLE_LINTERS variable Enable auto-fixes by adding KOTLIN_KTLINT in APPLY_FIXES variable Variable Description Default value KOTLIN_KTLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KOTLIN_KTLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file KOTLIN_KTLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".kt\", \".kts\"] KOTLIN_KTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KOTLIN_KTLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use ktlint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Emacs flycheck-kotlin vim ale Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .kt .kts Example calls ktlint myfile.kt ktlint --format myfile.kt Help content An anti-bikeshedding Kotlin linter with built-in formatter (https://github.com/pinterest/ktlint). Usage: ktlint <flags> [patterns] java -jar ktlint <flags> [patterns] Examples: # check the style of all Kotlin files inside the current dir (recursively) # (hidden folders will be skipped) ktlint # check only certain locations (prepend ! to negate the pattern, # Ktlint uses .gitignore pattern style syntax) ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\" # auto-correct style violations ktlint -F \"src/**/*.kt\" # custom reporter ktlint --reporter=plain?group_by_file # multiple reporters can be specified like this ktlint --reporter=plain \\ --reporter=checkstyle,output=ktlint-checkstyle-report.xml # 3rd-party reporter ktlint --reporter=csv,artifact=com.github.user:repo:master-SNAPSHOT Flags: -a, --android Turn on Android Kotlin Style Guide compatibility --color Make output colorful --color-name=<colorName> Customize the output color --debug Turn on debug output --disabled_rules=<disabledRules> Comma-separated list of rules to globally disable. To disable standard ktlint rule-set use --disabled_rules=standard -F, --format Fix any deviations from the code style --limit=<limit> Maximum number of errors to show (default: show all) --relative Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt) --reporter=<reporters> A reporter to use (built-in: plain (default), plain? group_by_file, json, checkstyle, html). To use a third-party reporter specify a path to a JAR file on the filesystem. -R, --ruleset=<rulesets> A path to a JAR file containing additional ruleset(s) --stdin Read file from stdin -v, --verbose Show error codes --editorconfig=<editorConfigPath> Path to .editorconfig --experimental Enabled experimental rules (ktlint-ruleset-experimental) --baseline=<baseline> Defines a baseline file to check against -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: installGitPreCommitHook, --install-git-pre-commit-hook Install git hook to automatically check files for style violations on commit installGitPrePushHook, --install-git-pre-push-hook Install git hook to automatically check files for style violations before push printAST, --print-ast Print AST (useful when writing/debugging rules) applyToIDEA, --apply-to-idea Update Intellij IDEA Kotlin codestyle settings (global) applyToIDEAProject, --apply-to-idea-project Update Intellij IDEA project settings generateEditorConfig EXPERIMENTAL!!! Generate kotlin style section for '. editorconfig' file. Installation on mega-linter Docker image Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \\ chmod a+x ktlint && \\ mv \"ktlint\" /usr/bin/ Example success log Results of ktlint linter (version 0.40.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kotlin_ktlint/ ----------------------------------------------- [SUCCESS] .automation/test/kotlin/kotlint_good_1.kt Example error log Results of ktlint linter (version 0.40.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kotlin_ktlint/ ----------------------------------------------- [ERROR] .automation/test/kotlin/kotlin_bad_1.kt .automation/test/kotlin/kotlin_bad_1.kt:1:1: File must end with a newline (\\n) .automation/test/kotlin/kotlin_bad_1.kt:2:20: Unnecessary semicolon .automation/test/kotlin/kotlin_bad_1.kt:3:16: Redundant curly braces .automation/test/kotlin/kotlin_bad_1.kt:3:27: Unnecessary semicolon .automation/test/kotlin/kotlin_bad_1.kt:5:15: Unnecessary semicolon","title":"ktlint"},{"location":"descriptors/kotlin_ktlint/#ktlint-documentation","text":"Version in Mega-Linter: 0.40.0 Visit Official Web Site See Index of problems detected by ktlint","title":"ktlint documentation"},{"location":"descriptors/kotlin_ktlint/#configuration-in-mega-linter","text":"Enable ktlint by adding KOTLIN_KTLINT in ENABLE_LINTERS variable Disable ktlint by adding KOTLIN_KTLINT in DISABLE_LINTERS variable Enable auto-fixes by adding KOTLIN_KTLINT in APPLY_FIXES variable Variable Description Default value KOTLIN_KTLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KOTLIN_KTLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file KOTLIN_KTLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".kt\", \".kts\"] KOTLIN_KTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KOTLIN_KTLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/kotlin_ktlint/#ide-integration","text":"Use ktlint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Emacs flycheck-kotlin vim ale","title":"IDE Integration"},{"location":"descriptors/kotlin_ktlint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/kotlin_ktlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/kotlin_ktlint/#how-are-identified-applicable-files","text":"File extensions: .kt .kts","title":"How are identified applicable files"},{"location":"descriptors/kotlin_ktlint/#example-calls","text":"ktlint myfile.kt ktlint --format myfile.kt","title":"Example calls"},{"location":"descriptors/kotlin_ktlint/#help-content","text":"An anti-bikeshedding Kotlin linter with built-in formatter (https://github.com/pinterest/ktlint). Usage: ktlint <flags> [patterns] java -jar ktlint <flags> [patterns] Examples: # check the style of all Kotlin files inside the current dir (recursively) # (hidden folders will be skipped) ktlint # check only certain locations (prepend ! to negate the pattern, # Ktlint uses .gitignore pattern style syntax) ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\" # auto-correct style violations ktlint -F \"src/**/*.kt\" # custom reporter ktlint --reporter=plain?group_by_file # multiple reporters can be specified like this ktlint --reporter=plain \\ --reporter=checkstyle,output=ktlint-checkstyle-report.xml # 3rd-party reporter ktlint --reporter=csv,artifact=com.github.user:repo:master-SNAPSHOT Flags: -a, --android Turn on Android Kotlin Style Guide compatibility --color Make output colorful --color-name=<colorName> Customize the output color --debug Turn on debug output --disabled_rules=<disabledRules> Comma-separated list of rules to globally disable. To disable standard ktlint rule-set use --disabled_rules=standard -F, --format Fix any deviations from the code style --limit=<limit> Maximum number of errors to show (default: show all) --relative Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt) --reporter=<reporters> A reporter to use (built-in: plain (default), plain? group_by_file, json, checkstyle, html). To use a third-party reporter specify a path to a JAR file on the filesystem. -R, --ruleset=<rulesets> A path to a JAR file containing additional ruleset(s) --stdin Read file from stdin -v, --verbose Show error codes --editorconfig=<editorConfigPath> Path to .editorconfig --experimental Enabled experimental rules (ktlint-ruleset-experimental) --baseline=<baseline> Defines a baseline file to check against -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: installGitPreCommitHook, --install-git-pre-commit-hook Install git hook to automatically check files for style violations on commit installGitPrePushHook, --install-git-pre-push-hook Install git hook to automatically check files for style violations before push printAST, --print-ast Print AST (useful when writing/debugging rules) applyToIDEA, --apply-to-idea Update Intellij IDEA Kotlin codestyle settings (global) applyToIDEAProject, --apply-to-idea-project Update Intellij IDEA project settings generateEditorConfig EXPERIMENTAL!!! Generate kotlin style section for '. editorconfig' file.","title":"Help content"},{"location":"descriptors/kotlin_ktlint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \\ chmod a+x ktlint && \\ mv \"ktlint\" /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/kotlin_ktlint/#example-success-log","text":"Results of ktlint linter (version 0.40.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kotlin_ktlint/ ----------------------------------------------- [SUCCESS] .automation/test/kotlin/kotlint_good_1.kt","title":"Example success log"},{"location":"descriptors/kotlin_ktlint/#example-error-log","text":"Results of ktlint linter (version 0.40.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kotlin_ktlint/ ----------------------------------------------- [ERROR] .automation/test/kotlin/kotlin_bad_1.kt .automation/test/kotlin/kotlin_bad_1.kt:1:1: File must end with a newline (\\n) .automation/test/kotlin/kotlin_bad_1.kt:2:20: Unnecessary semicolon .automation/test/kotlin/kotlin_bad_1.kt:3:16: Redundant curly braces .automation/test/kotlin/kotlin_bad_1.kt:3:27: Unnecessary semicolon .automation/test/kotlin/kotlin_bad_1.kt:5:15: Unnecessary semicolon","title":"Example error log"},{"location":"descriptors/kubernetes/","text":"KUBERNETES Linters Linter Configuration key kubeval KUBERNETES_KUBEVAL Linted files File extensions: .yml .yaml .json Detected file content: apiVersion: kustomize\\.config\\.k8s\\.io tekton Configuration in Mega-Linter Variable Description Default value KUBERNETES_FILTER_REGEX_INCLUDE Custom regex including filter KUBERNETES_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All KUBERNETES linters"},{"location":"descriptors/kubernetes/#kubernetes","text":"","title":"KUBERNETES"},{"location":"descriptors/kubernetes/#linters","text":"Linter Configuration key kubeval KUBERNETES_KUBEVAL","title":"Linters"},{"location":"descriptors/kubernetes/#linted-files","text":"File extensions: .yml .yaml .json Detected file content: apiVersion: kustomize\\.config\\.k8s\\.io tekton","title":"Linted files"},{"location":"descriptors/kubernetes/#configuration-in-mega-linter","text":"Variable Description Default value KUBERNETES_FILTER_REGEX_INCLUDE Custom regex including filter KUBERNETES_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/kubernetes_kubeval/","text":"kubeval kubeval documentation Version in Mega-Linter: 0.15.0 Visit Official Web Site Configuration in Mega-Linter Enable kubeval by adding KUBERNETES_KUBEVAL in ENABLE_LINTERS variable Disable kubeval by adding KUBERNETES_KUBEVAL in DISABLE_LINTERS variable Variable Description Default value KUBERNETES_KUBEVAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file KUBERNETES_KUBEVAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] KUBERNETES_KUBEVAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KUBERNETES_KUBEVAL_DISABLE_ERRORS Run linter but disable crash if errors found false KUBERNETES_DIRECTORY Directory containing KUBERNETES files kubernetes Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .yml .yaml .json Detected file content: apiVersion: kustomize\\.config\\.k8s\\.io tekton Example calls kubeval -strict myfile.yml Help content Validate a Kubernetes YAML file against the relevant schema Usage: kubeval <file> [file...] [flags] Flags: --additional-schema-locations strings Comma-seperated list of secondary base URLs used to download schemas -d, --directories strings A comma-separated list of directories to recursively search for YAML documents --exit-on-error Immediately stop execution when the first error is encountered -f, --filename string filename to be displayed when testing manifests read from stdin (default \"stdin\") --force-color Force colored output even if stdout is not a TTY -h, --help help for kubeval --ignore-missing-schemas Skip validation for resource definitions without a schema -i, --ignored-filename-patterns strings A comma-separated list of regular expressions specifying filenames to ignore --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure -v, --kubernetes-version string Version of Kubernetes to validate against (default \"master\") --openshift Use OpenShift schemas instead of upstream Kubernetes -o, --output string The format of the output of this script. Options are: [stdout json tap] --quiet Silences any output aside from the direct results --reject-kinds strings Comma-separated list of case-sensitive kinds to prohibit validating against schemas -s, --schema-location string Base URL used to download schemas. Can also be specified with the environment variable KUBEVAL_SCHEMA_LOCATION. --skip-kinds strings Comma-separated list of case-sensitive kinds to skip when validating against schemas --strict Disallow additional properties not in schema --version version for kubeval Installation on mega-linter Docker image Dockerfile commands : RUN wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \\ && tar xf kubeval-linux-amd64.tar.gz \\ && cp kubeval /usr/local/bin Example success log Results of kubeval linter (version 0.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kubernetes_kubeval/ ----------------------------------------------- [SUCCESS] .automation/test/kubernetes/kubernetes/kubeval_good_1.yaml PASS - .automation/test/kubernetes/kubernetes/kubeval_good_1.yaml contains a valid Deployment (nginx-deployment) Example error log Results of kubeval linter (version 0.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kubernetes_kubeval/ ----------------------------------------------- [ERROR] .automation/test/kubernetes/kubernetes/kubeval_bad_1.yaml ERR - .automation/test/kubernetes/kubernetes/kubeval_bad_1.yaml: Missing 'metadata.name' key","title":"kubeval"},{"location":"descriptors/kubernetes_kubeval/#kubeval","text":"","title":"kubeval"},{"location":"descriptors/kubernetes_kubeval/#kubeval-documentation","text":"Version in Mega-Linter: 0.15.0 Visit Official Web Site","title":"kubeval documentation"},{"location":"descriptors/kubernetes_kubeval/#configuration-in-mega-linter","text":"Enable kubeval by adding KUBERNETES_KUBEVAL in ENABLE_LINTERS variable Disable kubeval by adding KUBERNETES_KUBEVAL in DISABLE_LINTERS variable Variable Description Default value KUBERNETES_KUBEVAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file KUBERNETES_KUBEVAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] KUBERNETES_KUBEVAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KUBERNETES_KUBEVAL_DISABLE_ERRORS Run linter but disable crash if errors found false KUBERNETES_DIRECTORY Directory containing KUBERNETES files kubernetes","title":"Configuration in Mega-Linter"},{"location":"descriptors/kubernetes_kubeval/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/kubernetes_kubeval/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/kubernetes_kubeval/#how-are-identified-applicable-files","text":"File extensions: .yml .yaml .json Detected file content: apiVersion: kustomize\\.config\\.k8s\\.io tekton","title":"How are identified applicable files"},{"location":"descriptors/kubernetes_kubeval/#example-calls","text":"kubeval -strict myfile.yml","title":"Example calls"},{"location":"descriptors/kubernetes_kubeval/#help-content","text":"Validate a Kubernetes YAML file against the relevant schema Usage: kubeval <file> [file...] [flags] Flags: --additional-schema-locations strings Comma-seperated list of secondary base URLs used to download schemas -d, --directories strings A comma-separated list of directories to recursively search for YAML documents --exit-on-error Immediately stop execution when the first error is encountered -f, --filename string filename to be displayed when testing manifests read from stdin (default \"stdin\") --force-color Force colored output even if stdout is not a TTY -h, --help help for kubeval --ignore-missing-schemas Skip validation for resource definitions without a schema -i, --ignored-filename-patterns strings A comma-separated list of regular expressions specifying filenames to ignore --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure -v, --kubernetes-version string Version of Kubernetes to validate against (default \"master\") --openshift Use OpenShift schemas instead of upstream Kubernetes -o, --output string The format of the output of this script. Options are: [stdout json tap] --quiet Silences any output aside from the direct results --reject-kinds strings Comma-separated list of case-sensitive kinds to prohibit validating against schemas -s, --schema-location string Base URL used to download schemas. Can also be specified with the environment variable KUBEVAL_SCHEMA_LOCATION. --skip-kinds strings Comma-separated list of case-sensitive kinds to skip when validating against schemas --strict Disallow additional properties not in schema --version version for kubeval","title":"Help content"},{"location":"descriptors/kubernetes_kubeval/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \\ && tar xf kubeval-linux-amd64.tar.gz \\ && cp kubeval /usr/local/bin","title":"Installation on mega-linter Docker image"},{"location":"descriptors/kubernetes_kubeval/#example-success-log","text":"Results of kubeval linter (version 0.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kubernetes_kubeval/ ----------------------------------------------- [SUCCESS] .automation/test/kubernetes/kubernetes/kubeval_good_1.yaml PASS - .automation/test/kubernetes/kubernetes/kubeval_good_1.yaml contains a valid Deployment (nginx-deployment)","title":"Example success log"},{"location":"descriptors/kubernetes_kubeval/#example-error-log","text":"Results of kubeval linter (version 0.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/kubernetes_kubeval/ ----------------------------------------------- [ERROR] .automation/test/kubernetes/kubernetes/kubeval_bad_1.yaml ERR - .automation/test/kubernetes/kubernetes/kubeval_bad_1.yaml: Missing 'metadata.name' key","title":"Example error log"},{"location":"descriptors/latex/","text":"LATEX Linters Linter Configuration key chktex LATEX Linted files File extensions: .tex Configuration in Mega-Linter Variable Description Default value LATEX_FILTER_REGEX_INCLUDE Custom regex including filter LATEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All LATEX linters"},{"location":"descriptors/latex/#latex","text":"","title":"LATEX"},{"location":"descriptors/latex/#linters","text":"Linter Configuration key chktex LATEX","title":"Linters"},{"location":"descriptors/latex/#linted-files","text":"File extensions: .tex","title":"Linted files"},{"location":"descriptors/latex/#configuration-in-mega-linter","text":"Variable Description Default value LATEX_FILTER_REGEX_INCLUDE Custom regex including filter LATEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/latex_chktex/","text":"chktex chktex documentation Version in Mega-Linter: 1.7.6 Visit Official Web Site See How to configure chktex rules If custom .chktexrc is not found, .chktexrc will be used Configuration in Mega-Linter Enable chktex by adding LATEX_CHKTEX in ENABLE_LINTERS variable Disable chktex by adding LATEX_CHKTEX in DISABLE_LINTERS variable Variable Description Default value LATEX_CHKTEX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LATEX_CHKTEX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file LATEX_CHKTEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file LATEX_CHKTEX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tex\"] LATEX_CHKTEX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LATEX_CHKTEX_FILE_NAME chktex configuration file name Use LINTER_DEFAULT to let the linter find it .chktexrc LATEX_CHKTEX_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules LATEX_CHKTEX_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use chktex in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-chktex Visual Studio Code latex-workshop Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .tex Example calls chktex -q myfile.tex chktex -q -l .chktexrc myfile.tex Help content ChkTeX v1.7.6 - Copyright 1995-96 Jens T. Berger Thielemann. Compiled with POSIX extended regex support. ChkTeX comes with ABSOLUTELY NO WARRANTY; details on this and distribution conditions in the GNU General Public License file. Type \"ChkTeX -h\" for help, \"ChkTeX -i\" for distribution info. Author: Jens Berger. Bug reports: https://savannah.nongnu.org/bugs/?group=chktex or darthandrus@gmail.com Press Ctrl-D to terminate stdin input. Usage of ChkTeX v1.7.6 ~~~~~~~~~~~~~~~~~~~~~~ Template ~~~~~~~~ chktex [-hiqrW] [-v[0-...]] [-l <rcfile>] [-[wemn] <[1-42]|all>] [-d[0-...]] [-p <name>] [-o <outfile>] [-[btxgI][0|1]] file1 file2 ... ---------------------------------------------------------------------- Description of options: ~~~~~~~~~~~~~~~~~~~~~~~ Misc. options ~~~~~~~~~~~~~ -h --help : This text. -i --license : Show distribution information -l --localrc : Read local .chktexrc formatted file. -d --debug : Debug information. Give it a number. -r --reset : Reset settings to default. Muting warning messages: ~~~~~~~~~~~~~~~~~~~~~~~~ -w --warnon : Makes msg # given a warning and turns it on. -e --erroron : Makes msg # given an error and turns it on. -m --msgon : Makes msg # given a message and turns it on. -n --nowarn : Mutes msg # given. -L --nolinesupp: Disables per-line suppressions. Output control flags: ~~~~~~~~~~~~~~~~~~~~~ -v --verbosity : How errors are displayed. Default 1, 0=Less, 2=Fancy, 3=lacheck. -V --pipeverb : How errors are displayed when stdout != tty. Defaults to the same as -v. -s --splitchar : String used to split fields when doing -v0 -o --output : Redirect error report to a file. -q --quiet : Shuts up about version information. -p --pseudoname: Input file-name when reporting. -f --format : Format to use for output Boolean switches (1 -> enables / 0 -> disables): ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -b --backup : Backup output file. -x --wipeverb : Ignore contents of `\\verb' commands. -g --globalrc : Read global .chktexrc file. -I --inputfiles: Execute \\input statements. -H --headererr : Show errors found in front of \\begin{document} Miscellaneous switches: ~~~~~~~~~~~~~~~~~~~~~~~ -W --version : Version information ---------------------------------------------------------------------- If no LaTeX files are specified on the command line, we will read from stdin. For explanation of warning/error messages, please consult the main documentation ChkTeX.dvi, ChkTeX.ps or ChkTeX.pdf: http://www.nongnu.org/chktex/ChkTeX.pdf Any of the above arguments can be made permanent by setting them in the chktexrc file (~/.chktexrc). Installation on mega-linter Docker image Dockerfile commands : FROM ghcr.io/assignuser/chktex-alpine:latest as chktex COPY --from=chktex /usr/bin/chktex /usr/bin/ RUN cd ~ && touch .chktexrc Example success log Results of chktex linter (version 1.7.6) See documentation on https://nvuillam.github.io/mega-linter/descriptors/latex_chktex/ ----------------------------------------------- [SUCCESS] .automation/test/latex/latex_good_1.tex Example error log Results of chktex linter (version 1.7.6) See documentation on https://nvuillam.github.io/mega-linter/descriptors/latex_chktex/ ----------------------------------------------- [ERROR] .automation/test/latex/latex_bad_1.tex Warning 1 in .automation/test/latex/latex_bad_1.tex line 12: Command terminated with space. \\foo This is an error. Warning 1 in .automation/test/latex/latex_bad_1.tex line 13: Command terminated with space. So is this \\foo Warning 47 in .automation/test/latex/latex_bad_1.tex line 18: `section' expected, found `text' (ConTeXt). \\stoptext Warning 2 in .automation/test/latex/latex_bad_1.tex line 22: Non-breaking space (`~') should have been used. This is a faulty reference to \\ref{foo} Warning 3 in .automation/test/latex/latex_bad_1.tex line 27: You should enclose the previous parenthesis with `{}'. $[(ab)^{-1}]^{-2}$ is not beautiful Warning 3 in .automation/test/latex/latex_bad_1.tex line 27: You should enclose the previous parenthesis with `{}'. $[(ab)^{-1}]^{-2}$ is not beautiful Warning 6 in .automation/test/latex/latex_bad_1.tex line 32: No italic correction (`\\/') found. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 32: You should remove spaces in front of `\\/' Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 32: Italic correction (`\\/') found in non-italic buffer. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 28 in .automation/test/latex/latex_bad_1.tex line 32: Don't use \\/ in front of small punctuation. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 32: You should remove spaces in front of `\\/' Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 5 in .automation/test/latex/latex_bad_1.tex line 32: Italic correction (`\\/') found more than once. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 37: You should remove spaces in front of `\\/' Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 37: You should remove spaces in front of `\\/' Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 38: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic\\/} in this \\textit{sentence}, as \\textem{you see}. Warning 7 in .automation/test/latex/latex_bad_1.tex line 42: Accent command `\\'' needs use of `\\i'. This \\'is a test of $\\hat{j}$ accents. Warning 7 in .automation/test/latex/latex_bad_1.tex line 42: Accent command `\\hat' needs use of `\\jmath'. This \\'is a test of $\\hat{j}$ accents. Warning 8 in .automation/test/latex/latex_bad_1.tex line 47: Wrong length of dash may have been used. It wasn't anything - just a 2---3 star--shots. Warning 8 in .automation/test/latex/latex_bad_1.tex line 47: Wrong length of dash may have been used. It wasn't anything - just a 2---3 star--shots. Warning 8 in .automation/test/latex/latex_bad_1.tex line 47: Wrong length of dash may have been used. It wasn't anything - just a 2---3 star--shots. Warning 8 in .automation/test/latex/latex_bad_1.tex line 57: Wrong length of dash may have been used. The Birch--Swinnerton--Dyer conjecture is not correct. Warning 8 in .automation/test/latex/latex_bad_1.tex line 57: Wrong length of dash may have been used. The Birch--Swinnerton--Dyer conjecture is not correct. Warning 37 in .automation/test/latex/latex_bad_1.tex line 64: You should avoid spaces in front of parenthesis. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 9 in .automation/test/latex/latex_bad_1.tex line 64: `}' expected, found `)'. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `]' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `]' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `]' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 9 in .automation/test/latex/latex_bad_1.tex line 69: `baz' expected, found `quux'. \\begin{quux} \\begin{baz} \\end{quux} \\end{baz} \\end{asoi} \\begin{dobedo} Warning 9 in .automation/test/latex/latex_bad_1.tex line 69: `quux' expected, found `baz'. \\begin{quux} \\begin{baz} \\end{quux} \\end{baz} \\end{asoi} \\begin{dobedo} Warning 10 in .automation/test/latex/latex_bad_1.tex line 69: Solo `asoi' found. \\begin{quux} \\begin{baz} \\end{quux} \\end{baz} \\end{asoi} \\begin{dobedo} Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\ldots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\ldots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\cdots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\ldots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\cdots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 13 in .automation/test/latex/latex_bad_1.tex line 85: Intersentence spacing (`\\@') should perhaps be used. Look at THIS! It's an error. Warning 1 in .automation/test/latex/latex_bad_1.tex line 90: Command terminated with space. \\hat Error 14 in .automation/test/latex/latex_bad_1.tex line 90: Could not find argument for command. \\hat Warning 18 in .automation/test/latex/latex_bad_1.tex line 95: Use either `` or '' as an alternative to `\"'. Is this an \"example\", or is it an \ufffdexample\ufffd. Warning 18 in .automation/test/latex/latex_bad_1.tex line 95: Use either `` or '' as an alternative to `\"'. Is this an \"example\", or is it an \ufffdexample\ufffd. Warning 20 in .automation/test/latex/latex_bad_1.tex line 100: User-specified pattern found: \\unknown. That bug is \\unknown\\ to me. Warning 23 in .automation/test/latex/latex_bad_1.tex line 110: Either `\\,`` or ``\\,` will look better. ```Hello', I heard him said'', she remembered. Warning 24 in .automation/test/latex/latex_bad_1.tex line 115: Delete this space to maintain correct pagereferences. Indexing text \\index{text} is fun! Warning 24 in .automation/test/latex/latex_bad_1.tex line 120: Delete this space to maintain correct pagereferences. \\index{text} is fun! Warning 25 in .automation/test/latex/latex_bad_1.tex line 124: You might wish to put this between a pair of `{}' $5\\cdot10^10$ Warning 26 in .automation/test/latex/latex_bad_1.tex line 129: You ought to remove spaces in front of punctuation. Do you understand ? Warning 29 in .automation/test/latex/latex_bad_1.tex line 133: $\\times$ may look prettier here. The program opens a screen sized 640x200 pixels Warning 31 in .automation/test/latex/latex_bad_1.tex line 144: This text may be ignored. \\end{verbatim} foo bar Warning 32 in .automation/test/latex/latex_bad_1.tex line 148: Use ` to begin quotation, not '. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 33 in .automation/test/latex/latex_bad_1.tex line 148: Use ' to end quotation, not `. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 32 in .automation/test/latex/latex_bad_1.tex line 148: Use ` to begin quotation, not '. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 33 in .automation/test/latex/latex_bad_1.tex line 148: Use ' to end quotation, not `. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 34 in .automation/test/latex/latex_bad_1.tex line 148: Don't mix quotes. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 34 in .automation/test/latex/latex_bad_1.tex line 148: Don't mix quotes. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 35 in .automation/test/latex/latex_bad_1.tex line 153: You should perhaps use `\\sin' instead. $sin^2 + cos^2 = 1$ Warning 35 in .automation/test/latex/latex_bad_1.tex line 153: You should perhaps use `\\cos' instead. $sin^2 + cos^2 = 1$ Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 38 in .automation/test/latex/latex_bad_1.tex line 162: You should not use punctuation in front of quotes. ``An example,'' he said, ``would be great.'' Warning 38 in .automation/test/latex/latex_bad_1.tex line 162: You should not use punctuation in front of quotes. ``An example,'' he said, ``would be great.'' Warning 39 in .automation/test/latex/latex_bad_1.tex line 167: Double space found. For output codes, see table ~\\ref{tab:fmtout}. Warning 40 in .automation/test/latex/latex_bad_1.tex line 171: You should put punctuation outside inner math mode. $\\this,$ and $$this$$. Warning 45 in .automation/test/latex/latex_bad_1.tex line 171: Use \\[ ... \\] instead of $$ ... $$. $\\this,$ and $$this$$. Warning 40 in .automation/test/latex/latex_bad_1.tex line 171: You should put punctuation inside display math mode. $\\this,$ and $$this$$. Warning 45 in .automation/test/latex/latex_bad_1.tex line 172: Use \\[ ... \\] instead of $$ ... $$. $\\this$, and $$this.$$ Warning 1 in .automation/test/latex/latex_bad_1.tex line 175: Command terminated with space. foo \\above qux Warning 42 in .automation/test/latex/latex_bad_1.tex line 179: You should remove spaces in front of `\\footnote' This is a footnote \\footnote{foo}. Warning 43 in .automation/test/latex/latex_bad_1.tex line 183: `\\left' is normally not followed by `{'. Here is a mistake $\\left{x\\right}$. Warning 43 in .automation/test/latex/latex_bad_1.tex line 183: `\\right' is normally not followed by `}'. Here is a mistake $\\left{x\\right}$. Warning 44 in .automation/test/latex/latex_bad_1.tex line 192: User Regex: Always use \\nmid. For every $p\\not|n$ you have an ugly prime which doesn't divide $n$. Warning 35 in .automation/test/latex/latex_bad_1.tex line 196: You should perhaps use `\\sin' instead. \\ensuremath{sin x\\text{is not the same as sin x, but is the same as $sin x$}} Warning 35 in .automation/test/latex/latex_bad_1.tex line 196: You should perhaps use `\\sin' instead. \\ensuremath{sin x\\text{is not the same as sin x, but is the same as $sin x$}} Warning 36 in .automation/test/latex/latex_bad_1.tex line 197: You should put a space in front of parenthesis. Also, $x(3)\\text{ is not x(3) but it is $x(3)$}$ Warning 36 in .automation/test/latex/latex_bad_1.tex line 201: You should put a space in front of parenthesis. But this is not a \\% comment, so we should find this error(right)? Warning 36 in .automation/test/latex/latex_bad_1.tex line 204: You should put a space in front of parenthesis. Here(on this line only)is a warning $sin(x)$ suppressed. % CHKTEX 35 36 Warning 36 in .automation/test/latex/latex_bad_1.tex line 204: You should put a space after parenthesis. Here(on this line only)is a warning $sin(x)$ suppressed. % CHKTEX 35 36 Warning 44 in .automation/test/latex/latex_bad_1.tex line 206: User Regex: 1:Capitalize before references. In section~\\ref{sec:3} we have a warning. Warning 44 in .automation/test/latex/latex_bad_1.tex line 210: User Regex: -2:Vertical rules in tables are ugly. \\begin{tabular*}{1.0\\linewidth}[h]{|c|cc|} Warning 44 in .automation/test/latex/latex_bad_1.tex line 212: User Regex: -2:Use \\toprule, midrule, or \\bottomrule from booktabs. \\hline Error 14 in .automation/test/latex/latex_bad_1.tex line 219: Could not find argument for command. \\verb# Warning 31 in .automation/test/latex/latex_bad_1.tex line 223: This text may be ignored. \\end{verbatim} FOO Warning 45 in .automation/test/latex/latex_bad_1.tex line 227: Use \\[ ... \\] instead of $$ ... $$. $$( Warning 16 in .automation/test/latex/latex_bad_1.tex line 232: Mathmode still on at end of LaTeX file. Warning 17 in .automation/test/latex/latex_bad_1.tex line 232: Number of `(' doesn't match the number of `)'! Warning 17 in .automation/test/latex/latex_bad_1.tex line 232: Number of `[' doesn't match the number of `]'! Warning 17 in .automation/test/latex/latex_bad_1.tex line 232: Number of `{' doesn't match the number of `}'!","title":"chktex"},{"location":"descriptors/latex_chktex/#chktex","text":"","title":"chktex"},{"location":"descriptors/latex_chktex/#chktex-documentation","text":"Version in Mega-Linter: 1.7.6 Visit Official Web Site See How to configure chktex rules If custom .chktexrc is not found, .chktexrc will be used","title":"chktex documentation"},{"location":"descriptors/latex_chktex/#configuration-in-mega-linter","text":"Enable chktex by adding LATEX_CHKTEX in ENABLE_LINTERS variable Disable chktex by adding LATEX_CHKTEX in DISABLE_LINTERS variable Variable Description Default value LATEX_CHKTEX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LATEX_CHKTEX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file LATEX_CHKTEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file LATEX_CHKTEX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tex\"] LATEX_CHKTEX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LATEX_CHKTEX_FILE_NAME chktex configuration file name Use LINTER_DEFAULT to let the linter find it .chktexrc LATEX_CHKTEX_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules LATEX_CHKTEX_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/latex_chktex/#ide-integration","text":"Use chktex in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-chktex Visual Studio Code latex-workshop","title":"IDE Integration"},{"location":"descriptors/latex_chktex/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/latex_chktex/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/latex_chktex/#how-are-identified-applicable-files","text":"File extensions: .tex","title":"How are identified applicable files"},{"location":"descriptors/latex_chktex/#example-calls","text":"chktex -q myfile.tex chktex -q -l .chktexrc myfile.tex","title":"Example calls"},{"location":"descriptors/latex_chktex/#help-content","text":"ChkTeX v1.7.6 - Copyright 1995-96 Jens T. Berger Thielemann. Compiled with POSIX extended regex support. ChkTeX comes with ABSOLUTELY NO WARRANTY; details on this and distribution conditions in the GNU General Public License file. Type \"ChkTeX -h\" for help, \"ChkTeX -i\" for distribution info. Author: Jens Berger. Bug reports: https://savannah.nongnu.org/bugs/?group=chktex or darthandrus@gmail.com Press Ctrl-D to terminate stdin input. Usage of ChkTeX v1.7.6 ~~~~~~~~~~~~~~~~~~~~~~ Template ~~~~~~~~ chktex [-hiqrW] [-v[0-...]] [-l <rcfile>] [-[wemn] <[1-42]|all>] [-d[0-...]] [-p <name>] [-o <outfile>] [-[btxgI][0|1]] file1 file2 ... ---------------------------------------------------------------------- Description of options: ~~~~~~~~~~~~~~~~~~~~~~~ Misc. options ~~~~~~~~~~~~~ -h --help : This text. -i --license : Show distribution information -l --localrc : Read local .chktexrc formatted file. -d --debug : Debug information. Give it a number. -r --reset : Reset settings to default. Muting warning messages: ~~~~~~~~~~~~~~~~~~~~~~~~ -w --warnon : Makes msg # given a warning and turns it on. -e --erroron : Makes msg # given an error and turns it on. -m --msgon : Makes msg # given a message and turns it on. -n --nowarn : Mutes msg # given. -L --nolinesupp: Disables per-line suppressions. Output control flags: ~~~~~~~~~~~~~~~~~~~~~ -v --verbosity : How errors are displayed. Default 1, 0=Less, 2=Fancy, 3=lacheck. -V --pipeverb : How errors are displayed when stdout != tty. Defaults to the same as -v. -s --splitchar : String used to split fields when doing -v0 -o --output : Redirect error report to a file. -q --quiet : Shuts up about version information. -p --pseudoname: Input file-name when reporting. -f --format : Format to use for output Boolean switches (1 -> enables / 0 -> disables): ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -b --backup : Backup output file. -x --wipeverb : Ignore contents of `\\verb' commands. -g --globalrc : Read global .chktexrc file. -I --inputfiles: Execute \\input statements. -H --headererr : Show errors found in front of \\begin{document} Miscellaneous switches: ~~~~~~~~~~~~~~~~~~~~~~~ -W --version : Version information ---------------------------------------------------------------------- If no LaTeX files are specified on the command line, we will read from stdin. For explanation of warning/error messages, please consult the main documentation ChkTeX.dvi, ChkTeX.ps or ChkTeX.pdf: http://www.nongnu.org/chktex/ChkTeX.pdf Any of the above arguments can be made permanent by setting them in the chktexrc file (~/.chktexrc).","title":"Help content"},{"location":"descriptors/latex_chktex/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM ghcr.io/assignuser/chktex-alpine:latest as chktex COPY --from=chktex /usr/bin/chktex /usr/bin/ RUN cd ~ && touch .chktexrc","title":"Installation on mega-linter Docker image"},{"location":"descriptors/latex_chktex/#example-success-log","text":"Results of chktex linter (version 1.7.6) See documentation on https://nvuillam.github.io/mega-linter/descriptors/latex_chktex/ ----------------------------------------------- [SUCCESS] .automation/test/latex/latex_good_1.tex","title":"Example success log"},{"location":"descriptors/latex_chktex/#example-error-log","text":"Results of chktex linter (version 1.7.6) See documentation on https://nvuillam.github.io/mega-linter/descriptors/latex_chktex/ ----------------------------------------------- [ERROR] .automation/test/latex/latex_bad_1.tex Warning 1 in .automation/test/latex/latex_bad_1.tex line 12: Command terminated with space. \\foo This is an error. Warning 1 in .automation/test/latex/latex_bad_1.tex line 13: Command terminated with space. So is this \\foo Warning 47 in .automation/test/latex/latex_bad_1.tex line 18: `section' expected, found `text' (ConTeXt). \\stoptext Warning 2 in .automation/test/latex/latex_bad_1.tex line 22: Non-breaking space (`~') should have been used. This is a faulty reference to \\ref{foo} Warning 3 in .automation/test/latex/latex_bad_1.tex line 27: You should enclose the previous parenthesis with `{}'. $[(ab)^{-1}]^{-2}$ is not beautiful Warning 3 in .automation/test/latex/latex_bad_1.tex line 27: You should enclose the previous parenthesis with `{}'. $[(ab)^{-1}]^{-2}$ is not beautiful Warning 6 in .automation/test/latex/latex_bad_1.tex line 32: No italic correction (`\\/') found. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 32: You should remove spaces in front of `\\/' Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 32: Italic correction (`\\/') found in non-italic buffer. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 28 in .automation/test/latex/latex_bad_1.tex line 32: Don't use \\/ in front of small punctuation. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 32: You should remove spaces in front of `\\/' Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 5 in .automation/test/latex/latex_bad_1.tex line 32: Italic correction (`\\/') found more than once. Testing {\\it italic} in \\/ this {\\em sentence\\/}, as {\\em you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 37: You should remove spaces in front of `\\/' Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 42 in .automation/test/latex/latex_bad_1.tex line 37: You should remove spaces in front of `\\/' Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 37: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic} in \\/ this \\textit{sentence\\/}, as \\textem{you \\/ see\\/}. Warning 4 in .automation/test/latex/latex_bad_1.tex line 38: Italic correction (`\\/') found in non-italic buffer. Testing \\textem{italic\\/} in this \\textit{sentence}, as \\textem{you see}. Warning 7 in .automation/test/latex/latex_bad_1.tex line 42: Accent command `\\'' needs use of `\\i'. This \\'is a test of $\\hat{j}$ accents. Warning 7 in .automation/test/latex/latex_bad_1.tex line 42: Accent command `\\hat' needs use of `\\jmath'. This \\'is a test of $\\hat{j}$ accents. Warning 8 in .automation/test/latex/latex_bad_1.tex line 47: Wrong length of dash may have been used. It wasn't anything - just a 2---3 star--shots. Warning 8 in .automation/test/latex/latex_bad_1.tex line 47: Wrong length of dash may have been used. It wasn't anything - just a 2---3 star--shots. Warning 8 in .automation/test/latex/latex_bad_1.tex line 47: Wrong length of dash may have been used. It wasn't anything - just a 2---3 star--shots. Warning 8 in .automation/test/latex/latex_bad_1.tex line 57: Wrong length of dash may have been used. The Birch--Swinnerton--Dyer conjecture is not correct. Warning 8 in .automation/test/latex/latex_bad_1.tex line 57: Wrong length of dash may have been used. The Birch--Swinnerton--Dyer conjecture is not correct. Warning 37 in .automation/test/latex/latex_bad_1.tex line 64: You should avoid spaces in front of parenthesis. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 9 in .automation/test/latex/latex_bad_1.tex line 64: `}' expected, found `)'. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `}' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `]' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `]' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `]' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 10 in .automation/test/latex/latex_bad_1.tex line 64: Solo `)' found. )}{[])} }}}]]]))) Warning 9 in .automation/test/latex/latex_bad_1.tex line 69: `baz' expected, found `quux'. \\begin{quux} \\begin{baz} \\end{quux} \\end{baz} \\end{asoi} \\begin{dobedo} Warning 9 in .automation/test/latex/latex_bad_1.tex line 69: `quux' expected, found `baz'. \\begin{quux} \\begin{baz} \\end{quux} \\end{baz} \\end{asoi} \\begin{dobedo} Warning 10 in .automation/test/latex/latex_bad_1.tex line 69: Solo `asoi' found. \\begin{quux} \\begin{baz} \\end{quux} \\end{baz} \\end{asoi} \\begin{dobedo} Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\ldots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\ldots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\cdots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\ldots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 11 in .automation/test/latex/latex_bad_1.tex line 75: You should use \\cdots to achieve an ellipsis. Foo...bar. $1,...,3$. $1+...+3$. $1,\\cdots,3$. $1\\cdot\\ldots\\cdot3$. Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 12 in .automation/test/latex/latex_bad_1.tex line 80: Interword spacing (`\\ ') should perhaps be used. 1st. Foo Inc. Ab.cd. foo ab.cd. Foo. bar baz., billy.; bob.: joe.! frank.? james.. george Warning 13 in .automation/test/latex/latex_bad_1.tex line 85: Intersentence spacing (`\\@') should perhaps be used. Look at THIS! It's an error. Warning 1 in .automation/test/latex/latex_bad_1.tex line 90: Command terminated with space. \\hat Error 14 in .automation/test/latex/latex_bad_1.tex line 90: Could not find argument for command. \\hat Warning 18 in .automation/test/latex/latex_bad_1.tex line 95: Use either `` or '' as an alternative to `\"'. Is this an \"example\", or is it an \ufffdexample\ufffd. Warning 18 in .automation/test/latex/latex_bad_1.tex line 95: Use either `` or '' as an alternative to `\"'. Is this an \"example\", or is it an \ufffdexample\ufffd. Warning 20 in .automation/test/latex/latex_bad_1.tex line 100: User-specified pattern found: \\unknown. That bug is \\unknown\\ to me. Warning 23 in .automation/test/latex/latex_bad_1.tex line 110: Either `\\,`` or ``\\,` will look better. ```Hello', I heard him said'', she remembered. Warning 24 in .automation/test/latex/latex_bad_1.tex line 115: Delete this space to maintain correct pagereferences. Indexing text \\index{text} is fun! Warning 24 in .automation/test/latex/latex_bad_1.tex line 120: Delete this space to maintain correct pagereferences. \\index{text} is fun! Warning 25 in .automation/test/latex/latex_bad_1.tex line 124: You might wish to put this between a pair of `{}' $5\\cdot10^10$ Warning 26 in .automation/test/latex/latex_bad_1.tex line 129: You ought to remove spaces in front of punctuation. Do you understand ? Warning 29 in .automation/test/latex/latex_bad_1.tex line 133: $\\times$ may look prettier here. The program opens a screen sized 640x200 pixels Warning 31 in .automation/test/latex/latex_bad_1.tex line 144: This text may be ignored. \\end{verbatim} foo bar Warning 32 in .automation/test/latex/latex_bad_1.tex line 148: Use ` to begin quotation, not '. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 33 in .automation/test/latex/latex_bad_1.tex line 148: Use ' to end quotation, not `. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 32 in .automation/test/latex/latex_bad_1.tex line 148: Use ` to begin quotation, not '. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 33 in .automation/test/latex/latex_bad_1.tex line 148: Use ' to end quotation, not `. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 34 in .automation/test/latex/latex_bad_1.tex line 148: Don't mix quotes. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 34 in .automation/test/latex/latex_bad_1.tex line 148: Don't mix quotes. This is either an 'example`, an ''example`` or an `\"`example'`'. Warning 35 in .automation/test/latex/latex_bad_1.tex line 153: You should perhaps use `\\sin' instead. $sin^2 + cos^2 = 1$ Warning 35 in .automation/test/latex/latex_bad_1.tex line 153: You should perhaps use `\\cos' instead. $sin^2 + cos^2 = 1$ Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 37 in .automation/test/latex/latex_bad_1.tex line 158: You should avoid spaces in front of parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 36 in .automation/test/latex/latex_bad_1.tex line 158: You should put a space after parenthesis. This( an example( Nuff said )), illustrates( ``my'' )point. Warning 38 in .automation/test/latex/latex_bad_1.tex line 162: You should not use punctuation in front of quotes. ``An example,'' he said, ``would be great.'' Warning 38 in .automation/test/latex/latex_bad_1.tex line 162: You should not use punctuation in front of quotes. ``An example,'' he said, ``would be great.'' Warning 39 in .automation/test/latex/latex_bad_1.tex line 167: Double space found. For output codes, see table ~\\ref{tab:fmtout}. Warning 40 in .automation/test/latex/latex_bad_1.tex line 171: You should put punctuation outside inner math mode. $\\this,$ and $$this$$. Warning 45 in .automation/test/latex/latex_bad_1.tex line 171: Use \\[ ... \\] instead of $$ ... $$. $\\this,$ and $$this$$. Warning 40 in .automation/test/latex/latex_bad_1.tex line 171: You should put punctuation inside display math mode. $\\this,$ and $$this$$. Warning 45 in .automation/test/latex/latex_bad_1.tex line 172: Use \\[ ... \\] instead of $$ ... $$. $\\this$, and $$this.$$ Warning 1 in .automation/test/latex/latex_bad_1.tex line 175: Command terminated with space. foo \\above qux Warning 42 in .automation/test/latex/latex_bad_1.tex line 179: You should remove spaces in front of `\\footnote' This is a footnote \\footnote{foo}. Warning 43 in .automation/test/latex/latex_bad_1.tex line 183: `\\left' is normally not followed by `{'. Here is a mistake $\\left{x\\right}$. Warning 43 in .automation/test/latex/latex_bad_1.tex line 183: `\\right' is normally not followed by `}'. Here is a mistake $\\left{x\\right}$. Warning 44 in .automation/test/latex/latex_bad_1.tex line 192: User Regex: Always use \\nmid. For every $p\\not|n$ you have an ugly prime which doesn't divide $n$. Warning 35 in .automation/test/latex/latex_bad_1.tex line 196: You should perhaps use `\\sin' instead. \\ensuremath{sin x\\text{is not the same as sin x, but is the same as $sin x$}} Warning 35 in .automation/test/latex/latex_bad_1.tex line 196: You should perhaps use `\\sin' instead. \\ensuremath{sin x\\text{is not the same as sin x, but is the same as $sin x$}} Warning 36 in .automation/test/latex/latex_bad_1.tex line 197: You should put a space in front of parenthesis. Also, $x(3)\\text{ is not x(3) but it is $x(3)$}$ Warning 36 in .automation/test/latex/latex_bad_1.tex line 201: You should put a space in front of parenthesis. But this is not a \\% comment, so we should find this error(right)? Warning 36 in .automation/test/latex/latex_bad_1.tex line 204: You should put a space in front of parenthesis. Here(on this line only)is a warning $sin(x)$ suppressed. % CHKTEX 35 36 Warning 36 in .automation/test/latex/latex_bad_1.tex line 204: You should put a space after parenthesis. Here(on this line only)is a warning $sin(x)$ suppressed. % CHKTEX 35 36 Warning 44 in .automation/test/latex/latex_bad_1.tex line 206: User Regex: 1:Capitalize before references. In section~\\ref{sec:3} we have a warning. Warning 44 in .automation/test/latex/latex_bad_1.tex line 210: User Regex: -2:Vertical rules in tables are ugly. \\begin{tabular*}{1.0\\linewidth}[h]{|c|cc|} Warning 44 in .automation/test/latex/latex_bad_1.tex line 212: User Regex: -2:Use \\toprule, midrule, or \\bottomrule from booktabs. \\hline Error 14 in .automation/test/latex/latex_bad_1.tex line 219: Could not find argument for command. \\verb# Warning 31 in .automation/test/latex/latex_bad_1.tex line 223: This text may be ignored. \\end{verbatim} FOO Warning 45 in .automation/test/latex/latex_bad_1.tex line 227: Use \\[ ... \\] instead of $$ ... $$. $$( Warning 16 in .automation/test/latex/latex_bad_1.tex line 232: Mathmode still on at end of LaTeX file. Warning 17 in .automation/test/latex/latex_bad_1.tex line 232: Number of `(' doesn't match the number of `)'! Warning 17 in .automation/test/latex/latex_bad_1.tex line 232: Number of `[' doesn't match the number of `]'! Warning 17 in .automation/test/latex/latex_bad_1.tex line 232: Number of `{' doesn't match the number of `}'!","title":"Example error log"},{"location":"descriptors/lua/","text":"LUA Linters Linter Configuration key luacheck LUA Linted files File extensions: .lua Configuration in Mega-Linter Variable Description Default value LUA_FILTER_REGEX_INCLUDE Custom regex including filter LUA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All LUA linters"},{"location":"descriptors/lua/#lua","text":"","title":"LUA"},{"location":"descriptors/lua/#linters","text":"Linter Configuration key luacheck LUA","title":"Linters"},{"location":"descriptors/lua/#linted-files","text":"File extensions: .lua","title":"Linted files"},{"location":"descriptors/lua/#configuration-in-mega-linter","text":"Variable Description Default value LUA_FILTER_REGEX_INCLUDE Custom regex including filter LUA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/lua_luacheck/","text":"luacheck luacheck documentation Version in Mega-Linter: 0.23.0 Visit Official Web Site See How to configure luacheck rules If custom .luacheckrc is not found, .luacheckrc will be used See How to disable luacheck rules in files See Index of problems detected by luacheck Configuration in Mega-Linter Enable luacheck by adding LUA_LUACHECK in ENABLE_LINTERS variable Disable luacheck by adding LUA_LUACHECK in DISABLE_LINTERS variable Variable Description Default value LUA_LUACHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LUA_LUACHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file LUA_LUACHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file LUA_LUACHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".lua\"] LUA_LUACHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LUA_LUACHECK_FILE_NAME luacheck configuration file name Use LINTER_DEFAULT to let the linter find it .luacheckrc LUA_LUACHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules LUA_LUACHECK_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use luacheck in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-luacheck Brackets brackets-luacheck Emacs flycheck Sublime Text SublimeLinter-luacheck vim Syntastic Visual Studio Code vscode-luacheck Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .lua Example calls luacheck myfile.lua luacheck --config .chktexrc myfile.lua Help content Usage: luacheck ([--config <config>] | [--no-config]) ([--default-config <default_config>] | [--no-default-config]) [-h] [-g] [-u] [-r] [-a] [-s] [--no-self] [--std <std>] [-c] [-d] [-t] [-m] [--max-line-length <length>] [--no-max-line-length] [--max-code-line-length <length>] [--no-max-code-line-length] [--max-string-line-length <length>] [--no-max-string-line-length] [--max-comment-line-length <length>] [--no-max-comment-line-length] [--max-cyclomatic-complexity <complexity>] [--no-max-cyclomatic-complexity] [--filename <filename>] [-j <jobs>] [--formatter <formatter>] [-q] [--codes] [--ranges] [--no-color] [-v] <file> [<file>] ... ([--cache [<cache>]] | [--no-cache]) [--ignore <patt> [<patt>] ...] [--enable <patt> [<patt>] ...] [--only <patt> [<patt>] ...] [--globals [<name>] ...] [--read-globals [<name>] ...] [--new-globals [<name>] ...] [--new-read-globals [<name>] ...] [--not-globals [<name>] ...] [--exclude-files <glob> [<glob>] ...] [--include-files <glob> [<glob>] ...] luacheck 0.23.0, a linter and a static analyzer for Lua. Arguments: files List of files, directories and rockspecs to check. Pass '-' to check stdin. Options for filtering warnings: -g, --no-global Filter out warnings related to global variables. Equivalent to --ignore 1. -u, --no-unused Filter out warnings related to unused variables and values. Equivalent to --ignore [23]. -r, --no-redefined Filter out warnings related to redefined variables. Equivalent to --ignore 4. -a, --no-unused-args Filter out warnings related to unused arguments and loop variables. Equivalent to --ignore 21[23]. -s, --no-unused-secondaries Filter out warnings related to unused variables set together with used ones. --no-self Filter out warnings related to implicit self argument. --ignore <patt> [<patt>] ..., -i <patt> [<patt>] ... Filter out warnings matching these patterns. If a pattern contains slash, part before slash matches warning code and part after it matches name of related variable. Otherwise, if the pattern contains letters or underscore, it matches name of related variable. Otherwise, the pattern matches warning code. --enable <patt> [<patt>] ..., -e <patt> [<patt>] ... Do not filter out warnings matching these patterns. --only <patt> [<patt>] ..., -o <patt> [<patt>] ... Filter out warnings not matching these patterns. Options for configuring allowed globals: --std <std> Set standard globals, default is max. <std> can be one of: max - union of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; min - intersection of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; lua51 - globals of Lua 5.1 without deprecated ones; lua51c - globals of Lua 5.1; lua52 - globals of Lua 5.2; lua52c - globals of Lua 5.2 with LUA_COMPAT_ALL; lua53 - globals of Lua 5.3; lua53c - globals of Lua 5.3 with LUA_COMPAT_5_2; luajit - globals of LuaJIT 2.x; ngx_lua - globals of Openresty lua-nginx-module 0.10.10, including standard LuaJIT 2.x globals; love - globals added by L\u00d6VE; busted - globals added by Busted 2.0, by default added for files ending with _spec.lua within spec, test, and tests subdirectories; rockspec - globals allowed in rockspecs, by default added for files ending with .rockspec; luacheckrc - globals allowed in Luacheck configs, by default added for files ending with .luacheckrc; none - no standard globals. Sets can be combined using '+'. Extra sets can be defined in config by adding to `stds` global in config. -c, --compat Equivalent to --std max. --globals [<name>] ... Add custom global variables (e.g. foo) or fields (e.g. foo.bar) on top of standard ones. --read-globals [<name>] ... Add read-only global variables or fields. --new-globals [<name>] ... Set custom global variables or fields. Removes custom globals added previously. --new-read-globals [<name>] ... Set read-only global variables or fields. Removes read-only globals added previously. --not-globals [<name>] ... Remove custom and standard global variables or fields. -d, --allow-defined Allow defining globals implicitly by setting them. -t, --allow-defined-top Allow defining globals implicitly by setting them in the top level scope. -m, --module Limit visibility of implicitly defined globals to their files. Options for configuring line length limits: --max-line-length <length> Set maximum allowed line length (default: 120). --no-max-line-length Do not limit line length. --max-code-line-length <length> Set maximum allowed length for lines ending with code (default: 120). --no-max-code-line-length Do not limit code line length. --max-string-line-length <length> Set maximum allowed length for lines within a string (default: 120). --no-max-string-line-length Do not limit string line length. --max-comment-line-length <length> Set maximum allowed length for comment lines (default: 120). --no-max-comment-line-length Do not limit comment line length. Configuration file options: --config <config> Path to configuration file. (default: .luacheckrc) --no-config Do not look up configuration file. --default-config <default_config> Path to configuration file to use if --[no-]config is not used and project-specific .luacheckrc is not found. (default: /root/.config/luacheck/.luacheckrc) --no-default-config Do not use default configuration file. File filtering options: --exclude-files <glob> [<glob>] ... Do not check files matching these globbing patterns. --include-files <glob> [<glob>] ... Do not check files not matching these globbing patterns. Performance optimization options: --cache [<cache>] Path to cache directory. (default: /root/.cache/luacheck) --no-cache Do not use cache. -j <jobs>, Check <jobs> files in parallel (default: 1). --jobs <jobs> Warning: LuaLanes not found, parallel checking disabled. Output formatting options: --formatter <formatter> Use custom formatter. <formatter> must be a module name or one of: TAP - Test Anything Protocol formatter; JUnit - JUnit XML formatter; visual_studio - MSBuild/Visual Studio aware formatter; plain - simple warning-per-line formatter; default - standard formatter. -q, --quiet Suppress output for files without warnings. -qq: Suppress output of warnings. -qqq: Only print total number of warnings and errors. --codes Show warning codes. --ranges Show ranges of columns related to warnings. --no-color Do not color output. Other options: -h, --help Show this help message and exit. --max-cyclomatic-complexity <complexity> Set maximum cyclomatic complexity for functions. --no-max-cyclomatic-complexity Do not limit function cyclomatic complexity (default). --filename <filename> Use another filename in output and for selecting configuration overrides. -v, --version Show version info and exit. Links: Luacheck on GitHub: https://github.com/luarocks/luacheck Luacheck documentation: https://luacheck.readthedocs.org Installation on mega-linter Docker image Dockerfile commands : RUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\ && cd lua-5.3.5 \\ && make linux \\ && make install \\ && cd .. && rm -r lua-5.3.5/ \\ && wget --tries=5 https://github.com/cvega/luarocks/archive/v3.3.1-super-linter.tar.gz -O - -q | tar -xzf - \\ && cd luarocks-3.3.1-super-linter \\ && ./configure --with-lua-include=/usr/local/include \\ && make \\ && make -b install \\ && cd .. && rm -r luarocks-3.3.1-super-linter/ \\ && luarocks install luacheck Example success log Results of luacheck linter (version 0.23.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/lua_luacheck/ ----------------------------------------------- [SUCCESS] .automation/test/lua/lua_good_1.lua Checking .automation/test/lua/lua_good_1.lua OK Total: 0 warnings / 0 errors in 1 file Example error log Results of luacheck linter (version 0.23.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/lua_luacheck/ ----------------------------------------------- [ERROR] .automation/test/lua/lua_bad_1.lua Checking .automation/test/lua/lua_bad_1.lua 1 error .automation/test/lua/lua_bad_1.lua:10:1: expected 'end' (to close 'function' on line 7) near <eof> Total: 0 warnings / 1 error in 1 file","title":"luacheck"},{"location":"descriptors/lua_luacheck/#luacheck","text":"","title":"luacheck"},{"location":"descriptors/lua_luacheck/#luacheck-documentation","text":"Version in Mega-Linter: 0.23.0 Visit Official Web Site See How to configure luacheck rules If custom .luacheckrc is not found, .luacheckrc will be used See How to disable luacheck rules in files See Index of problems detected by luacheck","title":"luacheck documentation"},{"location":"descriptors/lua_luacheck/#configuration-in-mega-linter","text":"Enable luacheck by adding LUA_LUACHECK in ENABLE_LINTERS variable Disable luacheck by adding LUA_LUACHECK in DISABLE_LINTERS variable Variable Description Default value LUA_LUACHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LUA_LUACHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file LUA_LUACHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file LUA_LUACHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".lua\"] LUA_LUACHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LUA_LUACHECK_FILE_NAME luacheck configuration file name Use LINTER_DEFAULT to let the linter find it .luacheckrc LUA_LUACHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules LUA_LUACHECK_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/lua_luacheck/#ide-integration","text":"Use luacheck in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-luacheck Brackets brackets-luacheck Emacs flycheck Sublime Text SublimeLinter-luacheck vim Syntastic Visual Studio Code vscode-luacheck","title":"IDE Integration"},{"location":"descriptors/lua_luacheck/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/lua_luacheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/lua_luacheck/#how-are-identified-applicable-files","text":"File extensions: .lua","title":"How are identified applicable files"},{"location":"descriptors/lua_luacheck/#example-calls","text":"luacheck myfile.lua luacheck --config .chktexrc myfile.lua","title":"Example calls"},{"location":"descriptors/lua_luacheck/#help-content","text":"Usage: luacheck ([--config <config>] | [--no-config]) ([--default-config <default_config>] | [--no-default-config]) [-h] [-g] [-u] [-r] [-a] [-s] [--no-self] [--std <std>] [-c] [-d] [-t] [-m] [--max-line-length <length>] [--no-max-line-length] [--max-code-line-length <length>] [--no-max-code-line-length] [--max-string-line-length <length>] [--no-max-string-line-length] [--max-comment-line-length <length>] [--no-max-comment-line-length] [--max-cyclomatic-complexity <complexity>] [--no-max-cyclomatic-complexity] [--filename <filename>] [-j <jobs>] [--formatter <formatter>] [-q] [--codes] [--ranges] [--no-color] [-v] <file> [<file>] ... ([--cache [<cache>]] | [--no-cache]) [--ignore <patt> [<patt>] ...] [--enable <patt> [<patt>] ...] [--only <patt> [<patt>] ...] [--globals [<name>] ...] [--read-globals [<name>] ...] [--new-globals [<name>] ...] [--new-read-globals [<name>] ...] [--not-globals [<name>] ...] [--exclude-files <glob> [<glob>] ...] [--include-files <glob> [<glob>] ...] luacheck 0.23.0, a linter and a static analyzer for Lua. Arguments: files List of files, directories and rockspecs to check. Pass '-' to check stdin. Options for filtering warnings: -g, --no-global Filter out warnings related to global variables. Equivalent to --ignore 1. -u, --no-unused Filter out warnings related to unused variables and values. Equivalent to --ignore [23]. -r, --no-redefined Filter out warnings related to redefined variables. Equivalent to --ignore 4. -a, --no-unused-args Filter out warnings related to unused arguments and loop variables. Equivalent to --ignore 21[23]. -s, --no-unused-secondaries Filter out warnings related to unused variables set together with used ones. --no-self Filter out warnings related to implicit self argument. --ignore <patt> [<patt>] ..., -i <patt> [<patt>] ... Filter out warnings matching these patterns. If a pattern contains slash, part before slash matches warning code and part after it matches name of related variable. Otherwise, if the pattern contains letters or underscore, it matches name of related variable. Otherwise, the pattern matches warning code. --enable <patt> [<patt>] ..., -e <patt> [<patt>] ... Do not filter out warnings matching these patterns. --only <patt> [<patt>] ..., -o <patt> [<patt>] ... Filter out warnings not matching these patterns. Options for configuring allowed globals: --std <std> Set standard globals, default is max. <std> can be one of: max - union of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; min - intersection of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; lua51 - globals of Lua 5.1 without deprecated ones; lua51c - globals of Lua 5.1; lua52 - globals of Lua 5.2; lua52c - globals of Lua 5.2 with LUA_COMPAT_ALL; lua53 - globals of Lua 5.3; lua53c - globals of Lua 5.3 with LUA_COMPAT_5_2; luajit - globals of LuaJIT 2.x; ngx_lua - globals of Openresty lua-nginx-module 0.10.10, including standard LuaJIT 2.x globals; love - globals added by L\u00d6VE; busted - globals added by Busted 2.0, by default added for files ending with _spec.lua within spec, test, and tests subdirectories; rockspec - globals allowed in rockspecs, by default added for files ending with .rockspec; luacheckrc - globals allowed in Luacheck configs, by default added for files ending with .luacheckrc; none - no standard globals. Sets can be combined using '+'. Extra sets can be defined in config by adding to `stds` global in config. -c, --compat Equivalent to --std max. --globals [<name>] ... Add custom global variables (e.g. foo) or fields (e.g. foo.bar) on top of standard ones. --read-globals [<name>] ... Add read-only global variables or fields. --new-globals [<name>] ... Set custom global variables or fields. Removes custom globals added previously. --new-read-globals [<name>] ... Set read-only global variables or fields. Removes read-only globals added previously. --not-globals [<name>] ... Remove custom and standard global variables or fields. -d, --allow-defined Allow defining globals implicitly by setting them. -t, --allow-defined-top Allow defining globals implicitly by setting them in the top level scope. -m, --module Limit visibility of implicitly defined globals to their files. Options for configuring line length limits: --max-line-length <length> Set maximum allowed line length (default: 120). --no-max-line-length Do not limit line length. --max-code-line-length <length> Set maximum allowed length for lines ending with code (default: 120). --no-max-code-line-length Do not limit code line length. --max-string-line-length <length> Set maximum allowed length for lines within a string (default: 120). --no-max-string-line-length Do not limit string line length. --max-comment-line-length <length> Set maximum allowed length for comment lines (default: 120). --no-max-comment-line-length Do not limit comment line length. Configuration file options: --config <config> Path to configuration file. (default: .luacheckrc) --no-config Do not look up configuration file. --default-config <default_config> Path to configuration file to use if --[no-]config is not used and project-specific .luacheckrc is not found. (default: /root/.config/luacheck/.luacheckrc) --no-default-config Do not use default configuration file. File filtering options: --exclude-files <glob> [<glob>] ... Do not check files matching these globbing patterns. --include-files <glob> [<glob>] ... Do not check files not matching these globbing patterns. Performance optimization options: --cache [<cache>] Path to cache directory. (default: /root/.cache/luacheck) --no-cache Do not use cache. -j <jobs>, Check <jobs> files in parallel (default: 1). --jobs <jobs> Warning: LuaLanes not found, parallel checking disabled. Output formatting options: --formatter <formatter> Use custom formatter. <formatter> must be a module name or one of: TAP - Test Anything Protocol formatter; JUnit - JUnit XML formatter; visual_studio - MSBuild/Visual Studio aware formatter; plain - simple warning-per-line formatter; default - standard formatter. -q, --quiet Suppress output for files without warnings. -qq: Suppress output of warnings. -qqq: Only print total number of warnings and errors. --codes Show warning codes. --ranges Show ranges of columns related to warnings. --no-color Do not color output. Other options: -h, --help Show this help message and exit. --max-cyclomatic-complexity <complexity> Set maximum cyclomatic complexity for functions. --no-max-cyclomatic-complexity Do not limit function cyclomatic complexity (default). --filename <filename> Use another filename in output and for selecting configuration overrides. -v, --version Show version info and exit. Links: Luacheck on GitHub: https://github.com/luarocks/luacheck Luacheck documentation: https://luacheck.readthedocs.org","title":"Help content"},{"location":"descriptors/lua_luacheck/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\ && cd lua-5.3.5 \\ && make linux \\ && make install \\ && cd .. && rm -r lua-5.3.5/ \\ && wget --tries=5 https://github.com/cvega/luarocks/archive/v3.3.1-super-linter.tar.gz -O - -q | tar -xzf - \\ && cd luarocks-3.3.1-super-linter \\ && ./configure --with-lua-include=/usr/local/include \\ && make \\ && make -b install \\ && cd .. && rm -r luarocks-3.3.1-super-linter/ \\ && luarocks install luacheck","title":"Installation on mega-linter Docker image"},{"location":"descriptors/lua_luacheck/#example-success-log","text":"Results of luacheck linter (version 0.23.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/lua_luacheck/ ----------------------------------------------- [SUCCESS] .automation/test/lua/lua_good_1.lua Checking .automation/test/lua/lua_good_1.lua OK Total: 0 warnings / 0 errors in 1 file","title":"Example success log"},{"location":"descriptors/lua_luacheck/#example-error-log","text":"Results of luacheck linter (version 0.23.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/lua_luacheck/ ----------------------------------------------- [ERROR] .automation/test/lua/lua_bad_1.lua Checking .automation/test/lua/lua_bad_1.lua 1 error .automation/test/lua/lua_bad_1.lua:10:1: expected 'end' (to close 'function' on line 7) near <eof> Total: 0 warnings / 1 error in 1 file","title":"Example error log"},{"location":"descriptors/markdown/","text":"MARKDOWN Linters Linter Configuration key markdownlint MARKDOWN markdown-link-check MARKDOWN Linted files File extensions: .md Configuration in Mega-Linter Variable Description Default value MARKDOWN_FILTER_REGEX_INCLUDE Custom regex including filter MARKDOWN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All MARKDOWN linters"},{"location":"descriptors/markdown/#markdown","text":"","title":"MARKDOWN"},{"location":"descriptors/markdown/#linters","text":"Linter Configuration key markdownlint MARKDOWN markdown-link-check MARKDOWN","title":"Linters"},{"location":"descriptors/markdown/#linted-files","text":"File extensions: .md","title":"Linted files"},{"location":"descriptors/markdown/#configuration-in-mega-linter","text":"Variable Description Default value MARKDOWN_FILTER_REGEX_INCLUDE Custom regex including filter MARKDOWN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/markdown_markdown_link_check/","text":"markdown-link-check markdown-link-check documentation Visit Official Web Site See How to configure markdown-link-check rules If custom .markdown-link-check.json is not found, .markdown-link-check.json will be used See How to disable markdown-link-check rules in files Configuration in Mega-Linter Enable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in ENABLE_LINTERS variable Disable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in DISABLE_LINTERS variable Variable Description Default value MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAME markdown-link-check configuration file name Use LINTER_DEFAULT to let the linter find it .markdown-link-check.json MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .md Example calls markdown-link-check myfile.md markdown-link-check -c .markdown-link-check.json myfile.md Help content Usage: markdown-link-check [options] [filenameOrUrl] Options: -p, --progress show progress bar -c, --config [config] apply a config file (JSON), holding e.g. url specific header configuration -q, --quiet displays errors only -v, --verbose displays detailed error information -a, --alive <code> comma separated list of HTTP codes to be considered as alive -r, --retry retry after the duration indicated in 'retry-after' header when HTTP code is 429 -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): markdown-link-check Example success log Results of markdown-link-check linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdown_link_check/ ----------------------------------------------- [SUCCESS] .automation/test/markdown/markdown_good_1.md FILE: .automation/test/markdown/markdown_good_1.md [\u2713] https://github.com 1 links checked. Example error log Results of markdown-link-check linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdown_link_check/ ----------------------------------------------- [ERROR] .automation/test/markdown/markdown_bad_1.md FILE: .automation/test/markdown/markdown_bad_1.md [\u2713] https://github.com [\u2713] #wesh [\u2716] http://www.glouglouglglsdgdfgfdgsfgdfgdf.com 3 links checked. ERROR: 1 dead links found! [\u2716] http://www.glouglouglglsdgdfgfdgsfgdfgdf.com \u2192 Status: 0","title":"markdown-link-check"},{"location":"descriptors/markdown_markdown_link_check/#markdown-link-check","text":"","title":"markdown-link-check"},{"location":"descriptors/markdown_markdown_link_check/#markdown-link-check-documentation","text":"Visit Official Web Site See How to configure markdown-link-check rules If custom .markdown-link-check.json is not found, .markdown-link-check.json will be used See How to disable markdown-link-check rules in files","title":"markdown-link-check documentation"},{"location":"descriptors/markdown_markdown_link_check/#configuration-in-mega-linter","text":"Enable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in ENABLE_LINTERS variable Disable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in DISABLE_LINTERS variable Variable Description Default value MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAME markdown-link-check configuration file name Use LINTER_DEFAULT to let the linter find it .markdown-link-check.json MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/markdown_markdown_link_check/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/markdown_markdown_link_check/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_markdown_link_check/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_markdown_link_check/#example-calls","text":"markdown-link-check myfile.md markdown-link-check -c .markdown-link-check.json myfile.md","title":"Example calls"},{"location":"descriptors/markdown_markdown_link_check/#help-content","text":"Usage: markdown-link-check [options] [filenameOrUrl] Options: -p, --progress show progress bar -c, --config [config] apply a config file (JSON), holding e.g. url specific header configuration -q, --quiet displays errors only -v, --verbose displays detailed error information -a, --alive <code> comma separated list of HTTP codes to be considered as alive -r, --retry retry after the duration indicated in 'retry-after' header when HTTP code is 429 -h, --help display help for command","title":"Help content"},{"location":"descriptors/markdown_markdown_link_check/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): markdown-link-check","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown_markdown_link_check/#example-success-log","text":"Results of markdown-link-check linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdown_link_check/ ----------------------------------------------- [SUCCESS] .automation/test/markdown/markdown_good_1.md FILE: .automation/test/markdown/markdown_good_1.md [\u2713] https://github.com 1 links checked.","title":"Example success log"},{"location":"descriptors/markdown_markdown_link_check/#example-error-log","text":"Results of markdown-link-check linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdown_link_check/ ----------------------------------------------- [ERROR] .automation/test/markdown/markdown_bad_1.md FILE: .automation/test/markdown/markdown_bad_1.md [\u2713] https://github.com [\u2713] #wesh [\u2716] http://www.glouglouglglsdgdfgfdgsfgdfgdf.com 3 links checked. ERROR: 1 dead links found! [\u2716] http://www.glouglouglglsdgdfgfdgsfgdfgdf.com \u2192 Status: 0","title":"Example error log"},{"location":"descriptors/markdown_markdownlint/","text":"markdownlint markdownlint documentation Version in Mega-Linter: 0.26.0 Visit Official Web Site See How to configure markdownlint rules If custom .markdown-lint.json is not found, .markdown-lint.json will be used See How to disable markdownlint rules in files See Index of problems detected by markdownlint Configuration in Mega-Linter Enable markdownlint by adding MARKDOWN_MARKDOWNLINT in ENABLE_LINTERS variable Disable markdownlint by adding MARKDOWN_MARKDOWNLINT in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWNLINT in APPLY_FIXES variable Variable Description Default value MARKDOWN_MARKDOWNLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWNLINT_FILE_NAME markdownlint configuration file name Use LINTER_DEFAULT to let the linter find it .markdown-lint.json MARKDOWN_MARKDOWNLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use markdownlint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-node-markdownlint Sublime Text SublimeLinter-contrib-markdownlint vim coc-markdownlint Visual Studio Code vscode-markdownlint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .md Example calls markdownlint myfile.md markdownlint -c .markdown-lint.json myfile.md markdownlint --fix -c .markdown-lint.json myfile.md Help content Usage: markdownlint [options] <files|directories|globs> MarkdownLint Command Line Interface Options: -V, --version output the version number -f, --fix fix basic errors (does not work with STDIN) -s, --stdin read from STDIN (does not work with files) -o, --output [outputFile] write issues to file (no console) -c, --config [configFile] configuration file (JSON, JSONC, JS, or YAML) -i, --ignore [file|directory|glob] file(s) to ignore/exclude (default: []) -p, --ignore-path [file] path to file with ignore pattern(s) -r, --rules [file|directory|glob|package] custom rule files (default: []) -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): markdownlint-cli Example success log Results of markdownlint linter (version 0.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdownlint/ ----------------------------------------------- [SUCCESS] .automation/test/markdown/markdown_good_1.md Example error log Results of markdownlint linter (version 0.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdownlint/ ----------------------------------------------- [ERROR] .automation/test/markdown/markdown_bad_1.md .automation/test/markdown/markdown_bad_1.md:1 MD041/first-line-heading/first-line-h1 First line in file should be a top level heading [Context: \"## Bad Markdown\"] .automation/test/markdown/markdown_bad_1.md:5 MD001/heading-increment/header-increment Heading levels should only increment by one level at a time [Expected: h3; Actual: h6] .automation/test/markdown/markdown_bad_1.md:11:1 MD007/ul-indent Unordered list indentation [Expected: 4; Actual: 6] .automation/test/markdown/markdown_bad_1.md:13 MD040/fenced-code-language Fenced code blocks should have a language specified [Context: \"```\"] .automation/test/markdown/markdown_bad_1.md:20:16 MD034/no-bare-urls Bare URL used [Context: \"https://github.com\"]","title":"markdownlint"},{"location":"descriptors/markdown_markdownlint/#markdownlint","text":"","title":"markdownlint"},{"location":"descriptors/markdown_markdownlint/#markdownlint-documentation","text":"Version in Mega-Linter: 0.26.0 Visit Official Web Site See How to configure markdownlint rules If custom .markdown-lint.json is not found, .markdown-lint.json will be used See How to disable markdownlint rules in files See Index of problems detected by markdownlint","title":"markdownlint documentation"},{"location":"descriptors/markdown_markdownlint/#configuration-in-mega-linter","text":"Enable markdownlint by adding MARKDOWN_MARKDOWNLINT in ENABLE_LINTERS variable Disable markdownlint by adding MARKDOWN_MARKDOWNLINT in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWNLINT in APPLY_FIXES variable Variable Description Default value MARKDOWN_MARKDOWNLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWNLINT_FILE_NAME markdownlint configuration file name Use LINTER_DEFAULT to let the linter find it .markdown-lint.json MARKDOWN_MARKDOWNLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/markdown_markdownlint/#ide-integration","text":"Use markdownlint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-node-markdownlint Sublime Text SublimeLinter-contrib-markdownlint vim coc-markdownlint Visual Studio Code vscode-markdownlint","title":"IDE Integration"},{"location":"descriptors/markdown_markdownlint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/markdown_markdownlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_markdownlint/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_markdownlint/#example-calls","text":"markdownlint myfile.md markdownlint -c .markdown-lint.json myfile.md markdownlint --fix -c .markdown-lint.json myfile.md","title":"Example calls"},{"location":"descriptors/markdown_markdownlint/#help-content","text":"Usage: markdownlint [options] <files|directories|globs> MarkdownLint Command Line Interface Options: -V, --version output the version number -f, --fix fix basic errors (does not work with STDIN) -s, --stdin read from STDIN (does not work with files) -o, --output [outputFile] write issues to file (no console) -c, --config [configFile] configuration file (JSON, JSONC, JS, or YAML) -i, --ignore [file|directory|glob] file(s) to ignore/exclude (default: []) -p, --ignore-path [file] path to file with ignore pattern(s) -r, --rules [file|directory|glob|package] custom rule files (default: []) -h, --help display help for command","title":"Help content"},{"location":"descriptors/markdown_markdownlint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): markdownlint-cli","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown_markdownlint/#example-success-log","text":"Results of markdownlint linter (version 0.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdownlint/ ----------------------------------------------- [SUCCESS] .automation/test/markdown/markdown_good_1.md","title":"Example success log"},{"location":"descriptors/markdown_markdownlint/#example-error-log","text":"Results of markdownlint linter (version 0.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/markdown_markdownlint/ ----------------------------------------------- [ERROR] .automation/test/markdown/markdown_bad_1.md .automation/test/markdown/markdown_bad_1.md:1 MD041/first-line-heading/first-line-h1 First line in file should be a top level heading [Context: \"## Bad Markdown\"] .automation/test/markdown/markdown_bad_1.md:5 MD001/heading-increment/header-increment Heading levels should only increment by one level at a time [Expected: h3; Actual: h6] .automation/test/markdown/markdown_bad_1.md:11:1 MD007/ul-indent Unordered list indentation [Expected: 4; Actual: 6] .automation/test/markdown/markdown_bad_1.md:13 MD040/fenced-code-language Fenced code blocks should have a language specified [Context: \"```\"] .automation/test/markdown/markdown_bad_1.md:20:16 MD034/no-bare-urls Bare URL used [Context: \"https://github.com\"]","title":"Example error log"},{"location":"descriptors/openapi/","text":"OPENAPI Linters Linter Configuration key spectral OPENAPI Linted files File extensions: .yml .yaml .json Detected file content: \"openapi\": \"swagger\": openapi: swagger: Configuration in Mega-Linter Variable Description Default value OPENAPI_FILTER_REGEX_INCLUDE Custom regex including filter OPENAPI_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All OPENAPI linters"},{"location":"descriptors/openapi/#openapi","text":"","title":"OPENAPI"},{"location":"descriptors/openapi/#linters","text":"Linter Configuration key spectral OPENAPI","title":"Linters"},{"location":"descriptors/openapi/#linted-files","text":"File extensions: .yml .yaml .json Detected file content: \"openapi\": \"swagger\": openapi: swagger:","title":"Linted files"},{"location":"descriptors/openapi/#configuration-in-mega-linter","text":"Variable Description Default value OPENAPI_FILTER_REGEX_INCLUDE Custom regex including filter OPENAPI_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/openapi_spectral/","text":"spectral documentation Version in Mega-Linter: 5.6.0 Visit Official Web Site See How to configure spectral rules If custom .openapirc.yml is not found, .openapirc.yml will be used See Index of problems detected by spectral Configuration in Mega-Linter Enable spectral by adding OPENAPI_SPECTRAL in ENABLE_LINTERS variable Disable spectral by adding OPENAPI_SPECTRAL in DISABLE_LINTERS variable Variable Description Default value OPENAPI_SPECTRAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file OPENAPI_SPECTRAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] OPENAPI_SPECTRAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file OPENAPI_SPECTRAL_FILE_NAME spectral configuration file name Use LINTER_DEFAULT to let the linter find it .openapirc.yml OPENAPI_SPECTRAL_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules OPENAPI_SPECTRAL_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use spectral in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name stoplight Native integration Visual Studio Code vscode-spectral Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .yml .yaml .json Detected file content: \"openapi\": \"swagger\": openapi: swagger: Example calls spectral lint myfile.yml spectral lint -r .openapirc.yml myfile.yml Help content spectral lint [documents..] lint JSON/YAML documents from files or URLs Positionals: documents Location of JSON/YAML documents. Can be either a file, a glob or fetchable resource(s) on the web. [array] [default: []] Options: --version Show version number [boolean] --help Show help [boolean] --encoding, -e text encoding to use [string] [default: \"utf8\"] --format, -f formatter to use for outputting results [string] [default: \"stylish\"] --output, -o output to a file instead of stdout [string] --resolver path to custom json-ref-resolver instance [string] --ruleset, -r path/URL to a ruleset file [string] --skip-rule, -s ignore certain rules if they are causing trouble [string] --fail-severity, -F results of this level or above will trigger a failure exit code [string] [choices: \"error\", \"warn\", \"info\", \"hint\"] [default: \"error\"] --display-only-failures, -D only output results equal to or greater than --fail-severity [boolean] [default: false] --ignore-unknown-format do not warn about unmatched formats [boolean] [default: false] --show-unmatched-globs show unmatched glob patterns [boolean] [default: false] --verbose, -v increase verbosity [boolean] --quiet, -q no logging - output only [boolean] Installation on mega-linter Docker image NPM packages (node.js): @stoplight/spectral@5.6.0 Example success log Results of spectral linter (version 5.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/openapi_spectral/ ----------------------------------------------- [SUCCESS] .automation/test/openapi/openapi_good_1.yml OpenAPI 3.x detected No results with a severity of 'error' or higher found! [SUCCESS] .automation/test/openapi/openapi_good_2.json OpenAPI 3.x detected No results with a severity of 'error' or higher found! Example error log Results of spectral linter (version 5.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/openapi_spectral/ ----------------------------------------------- [ERROR] .automation/test/openapi/openapi_bad_1.yml OpenAPI 3.x detected .automation/test/openapi/openapi_bad_1.yml 1:1 warning info-contact Info object should contain `contact` object. 1:1 warning info-description OpenAPI object info `description` must be present and non-empty string. 1:1 warning oas3-api-servers OpenAPI `servers` must be present and non-empty array. 1:1 error oas3-schema Object should have required property `info`. 1:1 warning openapi-tags OpenAPI object should have non-empty `tags` array. \u2716 5 problems (1 error, 4 warnings, 0 infos, 0 hints) [ERROR] .automation/test/openapi/openapi_bad_2.json OpenAPI 3.x detected .automation/test/openapi/openapi_bad_2.json 1:1 warning info-contact Info object should contain `contact` object. 1:1 warning info-description OpenAPI object info `description` must be present and non-empty string. 1:1 warning oas3-api-servers OpenAPI `servers` must be present and non-empty array. 1:1 error oas3-schema Object should have required property `info`. 1:1 warning openapi-tags OpenAPI object should have non-empty `tags` array. \u2716 5 problems (1 error, 4 warnings, 0 infos, 0 hints)","title":"spectral"},{"location":"descriptors/openapi_spectral/#spectral-documentation","text":"Version in Mega-Linter: 5.6.0 Visit Official Web Site See How to configure spectral rules If custom .openapirc.yml is not found, .openapirc.yml will be used See Index of problems detected by spectral","title":"spectral documentation"},{"location":"descriptors/openapi_spectral/#configuration-in-mega-linter","text":"Enable spectral by adding OPENAPI_SPECTRAL in ENABLE_LINTERS variable Disable spectral by adding OPENAPI_SPECTRAL in DISABLE_LINTERS variable Variable Description Default value OPENAPI_SPECTRAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file OPENAPI_SPECTRAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] OPENAPI_SPECTRAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file OPENAPI_SPECTRAL_FILE_NAME spectral configuration file name Use LINTER_DEFAULT to let the linter find it .openapirc.yml OPENAPI_SPECTRAL_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules OPENAPI_SPECTRAL_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/openapi_spectral/#ide-integration","text":"Use spectral in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name stoplight Native integration Visual Studio Code vscode-spectral","title":"IDE Integration"},{"location":"descriptors/openapi_spectral/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/openapi_spectral/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/openapi_spectral/#how-are-identified-applicable-files","text":"File extensions: .yml .yaml .json Detected file content: \"openapi\": \"swagger\": openapi: swagger:","title":"How are identified applicable files"},{"location":"descriptors/openapi_spectral/#example-calls","text":"spectral lint myfile.yml spectral lint -r .openapirc.yml myfile.yml","title":"Example calls"},{"location":"descriptors/openapi_spectral/#help-content","text":"spectral lint [documents..] lint JSON/YAML documents from files or URLs Positionals: documents Location of JSON/YAML documents. Can be either a file, a glob or fetchable resource(s) on the web. [array] [default: []] Options: --version Show version number [boolean] --help Show help [boolean] --encoding, -e text encoding to use [string] [default: \"utf8\"] --format, -f formatter to use for outputting results [string] [default: \"stylish\"] --output, -o output to a file instead of stdout [string] --resolver path to custom json-ref-resolver instance [string] --ruleset, -r path/URL to a ruleset file [string] --skip-rule, -s ignore certain rules if they are causing trouble [string] --fail-severity, -F results of this level or above will trigger a failure exit code [string] [choices: \"error\", \"warn\", \"info\", \"hint\"] [default: \"error\"] --display-only-failures, -D only output results equal to or greater than --fail-severity [boolean] [default: false] --ignore-unknown-format do not warn about unmatched formats [boolean] [default: false] --show-unmatched-globs show unmatched glob patterns [boolean] [default: false] --verbose, -v increase verbosity [boolean] --quiet, -q no logging - output only [boolean]","title":"Help content"},{"location":"descriptors/openapi_spectral/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): @stoplight/spectral@5.6.0","title":"Installation on mega-linter Docker image"},{"location":"descriptors/openapi_spectral/#example-success-log","text":"Results of spectral linter (version 5.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/openapi_spectral/ ----------------------------------------------- [SUCCESS] .automation/test/openapi/openapi_good_1.yml OpenAPI 3.x detected No results with a severity of 'error' or higher found! [SUCCESS] .automation/test/openapi/openapi_good_2.json OpenAPI 3.x detected No results with a severity of 'error' or higher found!","title":"Example success log"},{"location":"descriptors/openapi_spectral/#example-error-log","text":"Results of spectral linter (version 5.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/openapi_spectral/ ----------------------------------------------- [ERROR] .automation/test/openapi/openapi_bad_1.yml OpenAPI 3.x detected .automation/test/openapi/openapi_bad_1.yml 1:1 warning info-contact Info object should contain `contact` object. 1:1 warning info-description OpenAPI object info `description` must be present and non-empty string. 1:1 warning oas3-api-servers OpenAPI `servers` must be present and non-empty array. 1:1 error oas3-schema Object should have required property `info`. 1:1 warning openapi-tags OpenAPI object should have non-empty `tags` array. \u2716 5 problems (1 error, 4 warnings, 0 infos, 0 hints) [ERROR] .automation/test/openapi/openapi_bad_2.json OpenAPI 3.x detected .automation/test/openapi/openapi_bad_2.json 1:1 warning info-contact Info object should contain `contact` object. 1:1 warning info-description OpenAPI object info `description` must be present and non-empty string. 1:1 warning oas3-api-servers OpenAPI `servers` must be present and non-empty array. 1:1 error oas3-schema Object should have required property `info`. 1:1 warning openapi-tags OpenAPI object should have non-empty `tags` array. \u2716 5 problems (1 error, 4 warnings, 0 infos, 0 hints)","title":"Example error log"},{"location":"descriptors/perl/","text":"PERL Linters Linter Configuration key perlcritic PERL Linted files File extensions: .pl .pm .t `` Detected file content: #!/usr/bin/env perl #!/usr/bin/perl Configuration in Mega-Linter Variable Description Default value PERL_FILTER_REGEX_INCLUDE Custom regex including filter PERL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): perl perl-dev","title":"All PERL linters"},{"location":"descriptors/perl/#perl","text":"","title":"PERL"},{"location":"descriptors/perl/#linters","text":"Linter Configuration key perlcritic PERL","title":"Linters"},{"location":"descriptors/perl/#linted-files","text":"File extensions: .pl .pm .t `` Detected file content: #!/usr/bin/env perl #!/usr/bin/perl","title":"Linted files"},{"location":"descriptors/perl/#configuration-in-mega-linter","text":"Variable Description Default value PERL_FILTER_REGEX_INCLUDE Custom regex including filter PERL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/perl/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/perl/#installation","text":"APK packages (Linux): perl perl-dev","title":"Installation"},{"location":"descriptors/perl_perlcritic/","text":"perlcritic documentation Version in Mega-Linter: 1.138 Visit Official Web Site See How to configure perlcritic rules See How to disable perlcritic rules in files See Index of problems detected by perlcritic Configuration in Mega-Linter Enable perlcritic by adding PERL_PERLCRITIC in ENABLE_LINTERS variable Disable perlcritic by adding PERL_PERLCRITIC in DISABLE_LINTERS variable Variable Description Default value PERL_PERLCRITIC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PERL_PERLCRITIC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PERL_PERLCRITIC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pl\", \".pm\", \".t\", \"\"] PERL_PERLCRITIC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PERL_PERLCRITIC_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .pl .pm .t `` Detected file content: #!/usr/bin/env perl #!/usr/bin/perl Example calls perlcritic myfile.pl Help content Usage: perlcritic [-12345 | --brutal | --cruel | --harsh | --stern | --gentle] [--severity number | name] [{-p | --profile} file | --noprofile] [--top [ number ]] [--theme expression] [--include pattern] [--exclude pattern] [{-s | --single-policy} pattern] [--only | --noonly] [--profile-strictness {warn|fatal|quiet}] [--force | --noforce] [--statistics] [--statistics-only] [--count | -C] [--verbose {number | format}] [--allow-unsafe] [--color | --nocolor] [--pager pager] [--quiet] [--color-severity-highest color_specification] [--color-severity-high color_specification] [--color-severity-medium color_specification] [--color-severity-low color_specification] [--color-severity-lowest color_specification] [--files-with-violations | -l] [--files-without-violations | -L] [--program-extensions file_name_extension] {FILE | DIRECTORY | STDIN} perlcritic --profile-proto perlcritic { --list | --list-enabled | --list-themes | --doc pattern [...] } perlcritic { --help | --options | --man | --version } Installation on mega-linter Docker image Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sL https://cpanmin.us/ | perl - -nq --no-wget Perl::Critic Example success log Results of perlcritic linter (version 1.138) See documentation on https://nvuillam.github.io/mega-linter/descriptors/perl_perlcritic/ ----------------------------------------------- [SUCCESS] .automation/test/perl/perl_good_1.pl .automation/test/perl/perl_good_1.pl source OK [SUCCESS] .automation/test/perl/perl_good_2 .automation/test/perl/perl_good_2 source OK Example error log Results of perlcritic linter (version 1.138) See documentation on https://nvuillam.github.io/mega-linter/descriptors/perl_perlcritic/ ----------------------------------------------- [ERROR] .automation/test/perl/perl_bad_1.pl Code before strictures are enabled at line 14, column 1. See page 429 of PBP. (Severity: 5)","title":"perlcritic"},{"location":"descriptors/perl_perlcritic/#perlcritic-documentation","text":"Version in Mega-Linter: 1.138 Visit Official Web Site See How to configure perlcritic rules See How to disable perlcritic rules in files See Index of problems detected by perlcritic","title":"perlcritic documentation"},{"location":"descriptors/perl_perlcritic/#configuration-in-mega-linter","text":"Enable perlcritic by adding PERL_PERLCRITIC in ENABLE_LINTERS variable Disable perlcritic by adding PERL_PERLCRITIC in DISABLE_LINTERS variable Variable Description Default value PERL_PERLCRITIC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PERL_PERLCRITIC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PERL_PERLCRITIC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pl\", \".pm\", \".t\", \"\"] PERL_PERLCRITIC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PERL_PERLCRITIC_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/perl_perlcritic/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/perl_perlcritic/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/perl_perlcritic/#how-are-identified-applicable-files","text":"File extensions: .pl .pm .t `` Detected file content: #!/usr/bin/env perl #!/usr/bin/perl","title":"How are identified applicable files"},{"location":"descriptors/perl_perlcritic/#example-calls","text":"perlcritic myfile.pl","title":"Example calls"},{"location":"descriptors/perl_perlcritic/#help-content","text":"Usage: perlcritic [-12345 | --brutal | --cruel | --harsh | --stern | --gentle] [--severity number | name] [{-p | --profile} file | --noprofile] [--top [ number ]] [--theme expression] [--include pattern] [--exclude pattern] [{-s | --single-policy} pattern] [--only | --noonly] [--profile-strictness {warn|fatal|quiet}] [--force | --noforce] [--statistics] [--statistics-only] [--count | -C] [--verbose {number | format}] [--allow-unsafe] [--color | --nocolor] [--pager pager] [--quiet] [--color-severity-highest color_specification] [--color-severity-high color_specification] [--color-severity-medium color_specification] [--color-severity-low color_specification] [--color-severity-lowest color_specification] [--files-with-violations | -l] [--files-without-violations | -L] [--program-extensions file_name_extension] {FILE | DIRECTORY | STDIN} perlcritic --profile-proto perlcritic { --list | --list-enabled | --list-themes | --doc pattern [...] } perlcritic { --help | --options | --man | --version }","title":"Help content"},{"location":"descriptors/perl_perlcritic/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sL https://cpanmin.us/ | perl - -nq --no-wget Perl::Critic","title":"Installation on mega-linter Docker image"},{"location":"descriptors/perl_perlcritic/#example-success-log","text":"Results of perlcritic linter (version 1.138) See documentation on https://nvuillam.github.io/mega-linter/descriptors/perl_perlcritic/ ----------------------------------------------- [SUCCESS] .automation/test/perl/perl_good_1.pl .automation/test/perl/perl_good_1.pl source OK [SUCCESS] .automation/test/perl/perl_good_2 .automation/test/perl/perl_good_2 source OK","title":"Example success log"},{"location":"descriptors/perl_perlcritic/#example-error-log","text":"Results of perlcritic linter (version 1.138) See documentation on https://nvuillam.github.io/mega-linter/descriptors/perl_perlcritic/ ----------------------------------------------- [ERROR] .automation/test/perl/perl_bad_1.pl Code before strictures are enabled at line 14, column 1. See page 429 of PBP. (Severity: 5)","title":"Example error log"},{"location":"descriptors/php/","text":"PHP Linters Linter Configuration key php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM Linted files File extensions: .php Configuration in Mega-Linter Variable Description Default value PHP_FILTER_REGEX_INCLUDE Custom regex including filter PHP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc APK packages (Linux): php7 php7-phar php7-json php7-mbstring php-xmlwriter php7-tokenizer php7-ctype php7-curl php7-dom php7-simplexml composer","title":"All PHP linters"},{"location":"descriptors/php/#php","text":"","title":"PHP"},{"location":"descriptors/php/#linters","text":"Linter Configuration key php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM","title":"Linters"},{"location":"descriptors/php/#linted-files","text":"File extensions: .php","title":"Linted files"},{"location":"descriptors/php/#configuration-in-mega-linter","text":"Variable Description Default value PHP_FILTER_REGEX_INCLUDE Custom regex including filter PHP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/php/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php/#installation","text":"Dockerfile commands : RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc APK packages (Linux): php7 php7-phar php7-json php7-mbstring php-xmlwriter php7-tokenizer php7-ctype php7-curl php7-dom php7-simplexml composer","title":"Installation"},{"location":"descriptors/php_php/","text":"php documentation Version in Mega-Linter: 7.3.25 Visit Official Web Site Configuration in Mega-Linter Enable php by adding PHP_BUILTIN in ENABLE_LINTERS variable Disable php by adding PHP_BUILTIN in DISABLE_LINTERS variable Variable Description Default value PHP_BUILTIN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_BUILTIN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_BUILTIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_BUILTIN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_BUILTIN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_BUILTIN_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33 Behind the scenes How are identified applicable files File extensions: .php Example calls php -l myfile.js Help content Usage: php [options] [-f] <file> [--] [args...] php [options] -r <code> [--] [args...] php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...] php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...] php [options] -S <addr>:<port> [-t docroot] [router] php [options] -- [args...] php [options] -a -a Run as interactive shell -c <path>|<file> Look for php.ini file in this directory -n No configuration (ini) files will be used -d foo[=bar] Define INI entry foo with value 'bar' -e Generate extended information for debugger/profiler -f <file> Parse and execute <file>. -h This help -i PHP information -l Syntax check only (lint) -m Show compiled in modules -r <code> Run PHP <code> without using script tags <?..?> -B <begin_code> Run PHP <begin_code> before processing input lines -R <code> Run PHP <code> for every input line -F <file> Parse and execute <file> for every input line -E <end_code> Run PHP <end_code> after processing all input lines -H Hide any passed arguments from external tools. -S <addr>:<port> Run with built-in web server. -t <docroot> Specify document root <docroot> for built-in web server. -s Output HTML syntax highlighted source. -v Version number -w Output source with stripped comments and whitespace. -z <file> Load Zend extension <file>. args... Arguments passed to script. Use -- args when first argument starts with - or script is read from stdin --ini Show configuration file names --rf <name> Show information about function <name>. --rc <name> Show information about class <name>. --re <name> Show information about extension <name>. --rz <name> Show information about Zend extension <name>. --ri <name> Show configuration for extension <name>. Installation on mega-linter Docker image Example success log Results of php linter (version 7.3.25) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_php/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php No syntax errors detected in .automation/test/php/php_good_1.php [SUCCESS] .automation/test/php/php_good_2.php No syntax errors detected in .automation/test/php/php_good_2.php Example error log Results of php linter (version 7.3.25) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_php/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php PHP Parse error: syntax error, unexpected 'pe98y' (T_STRING) in .automation/test/php/php_bad_1.php on line 3 Errors parsing .automation/test/php/php_bad_1.php [ERROR] .automation/test/php/php_bad_2.php PHP Parse error: syntax error, unexpected '}' in .automation/test/php/php_bad_2.php on line 15 Errors parsing .automation/test/php/php_bad_2.php","title":"php"},{"location":"descriptors/php_php/#php-documentation","text":"Version in Mega-Linter: 7.3.25 Visit Official Web Site","title":"php documentation"},{"location":"descriptors/php_php/#configuration-in-mega-linter","text":"Enable php by adding PHP_BUILTIN in ENABLE_LINTERS variable Disable php by adding PHP_BUILTIN in DISABLE_LINTERS variable Variable Description Default value PHP_BUILTIN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_BUILTIN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_BUILTIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_BUILTIN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_BUILTIN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_BUILTIN_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/php_php/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33","title":"Mega-Linter Flavours"},{"location":"descriptors/php_php/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_php/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_php/#example-calls","text":"php -l myfile.js","title":"Example calls"},{"location":"descriptors/php_php/#help-content","text":"Usage: php [options] [-f] <file> [--] [args...] php [options] -r <code> [--] [args...] php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...] php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...] php [options] -S <addr>:<port> [-t docroot] [router] php [options] -- [args...] php [options] -a -a Run as interactive shell -c <path>|<file> Look for php.ini file in this directory -n No configuration (ini) files will be used -d foo[=bar] Define INI entry foo with value 'bar' -e Generate extended information for debugger/profiler -f <file> Parse and execute <file>. -h This help -i PHP information -l Syntax check only (lint) -m Show compiled in modules -r <code> Run PHP <code> without using script tags <?..?> -B <begin_code> Run PHP <begin_code> before processing input lines -R <code> Run PHP <code> for every input line -F <file> Parse and execute <file> for every input line -E <end_code> Run PHP <end_code> after processing all input lines -H Hide any passed arguments from external tools. -S <addr>:<port> Run with built-in web server. -t <docroot> Specify document root <docroot> for built-in web server. -s Output HTML syntax highlighted source. -v Version number -w Output source with stripped comments and whitespace. -z <file> Load Zend extension <file>. args... Arguments passed to script. Use -- args when first argument starts with - or script is read from stdin --ini Show configuration file names --rf <name> Show information about function <name>. --rc <name> Show information about class <name>. --re <name> Show information about extension <name>. --rz <name> Show information about Zend extension <name>. --ri <name> Show configuration for extension <name>.","title":"Help content"},{"location":"descriptors/php_php/#installation-on-mega-linter-docker-image","text":"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_php/#example-success-log","text":"Results of php linter (version 7.3.25) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_php/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php No syntax errors detected in .automation/test/php/php_good_1.php [SUCCESS] .automation/test/php/php_good_2.php No syntax errors detected in .automation/test/php/php_good_2.php","title":"Example success log"},{"location":"descriptors/php_php/#example-error-log","text":"Results of php linter (version 7.3.25) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_php/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php PHP Parse error: syntax error, unexpected 'pe98y' (T_STRING) in .automation/test/php/php_bad_1.php on line 3 Errors parsing .automation/test/php/php_bad_1.php [ERROR] .automation/test/php/php_bad_2.php PHP Parse error: syntax error, unexpected '}' in .automation/test/php/php_bad_2.php on line 15 Errors parsing .automation/test/php/php_bad_2.php","title":"Example error log"},{"location":"descriptors/php_phpcs/","text":"phpcs phpcs documentation Version in Mega-Linter: 3.5.8 Visit Official Web Site See How to configure phpcs rules If custom phpcs.xml is not found, phpcs.xml will be used See How to disable phpcs rules in files Configuration in Mega-Linter Enable phpcs by adding PHP_PHPCS in ENABLE_LINTERS variable Disable phpcs by adding PHP_PHPCS in DISABLE_LINTERS variable Variable Description Default value PHP_PHPCS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPCS_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_PHPCS_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_PHPCS_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPCS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPCS_FILE_NAME phpcs configuration file name Use LINTER_DEFAULT to let the linter find it phpcs.xml PHP_PHPCS_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PHP_PHPCS_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use phpcs in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-phpcs Atom atom-phpcs IDEA phpcs Sublime Text sublime-phpcs Sublime Text SublimeLinter-phpcs Visual Studio Code vscode-phpcs Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33 Behind the scenes How are identified applicable files File extensions: .php Example calls phpcs myfile.php phpcs --standard=phpcs.xml myfile.php Help content Usage: phpcs [-nwlsaepqvi] [-d key[=value]] [--colors] [--no-colors] [--cache[=<cacheFile>]] [--no-cache] [--tab-width=<tabWidth>] [--report=<report>] [--report-file=<reportFile>] [--report-<report>=<reportFile>] [--report-width=<reportWidth>] [--basepath=<basepath>] [--bootstrap=<bootstrap>] [--severity=<severity>] [--error-severity=<severity>] [--warning-severity=<severity>] [--runtime-set key value] [--config-set key value] [--config-delete key] [--config-show] [--standard=<standard>] [--sniffs=<sniffs>] [--exclude=<sniffs>] [--encoding=<encoding>] [--parallel=<processes>] [--generator=<generator>] [--extensions=<extensions>] [--ignore=<patterns>] [--ignore-annotations] [--stdin-path=<stdinPath>] [--file-list=<fileList>] [--filter=<filter>] <file> - ... - Check STDIN instead of local files and directories -n Do not print warnings (shortcut for --warning-severity=0) -w Print both warnings and errors (this is the default) -l Local directory only, no recursion -s Show sniff codes in all reports -a Run interactively -e Explain a standard by showing the sniffs it includes -p Show progress of the run -q Quiet mode; disables progress and verbose output -m Stop error messages from being recorded (saves a lot of memory, but stops many reports from being used) -v Print processed files -vv Print ruleset and token output -vvv Print sniff processing information -i Show a list of installed coding standards -d Set the [key] php.ini value to [value] or [true] if value is omitted --help Print this help message --version Print version information --colors Use colors in output --no-colors Do not use colors in output (this is the default) --cache Cache results between runs --no-cache Do not cache results between runs (this is the default) --ignore-annotations Ignore all phpcs: annotations in code comments <cacheFile> Use a specific file for caching (uses a temporary file by default) <basepath> A path to strip from the front of file paths inside reports <bootstrap> A comma separated list of files to run before processing begins <encoding> The encoding of the files being checked (default is utf-8) <extensions> A comma separated list of file extensions to check The type of the file can be specified using: ext/type e.g., module/php,es/js <file> One or more files and/or directories to check <fileList> A file containing a list of files and/or directories to check (one per line) <filter> Use either the \"gitmodified\" or \"gitstaged\" filter, or specify the path to a custom filter class <generator> Use either the \"HTML\", \"Markdown\" or \"Text\" generator (forces documentation generation instead of checking) <patterns> A comma separated list of patterns to ignore files and directories <processes> How many files should be checked simultaneously (default is 1) <report> Print either the \"full\", \"xml\", \"checkstyle\", \"csv\" \"json\", \"junit\", \"emacs\", \"source\", \"summary\", \"diff\" \"svnblame\", \"gitblame\", \"hgblame\" or \"notifysend\" report, or specify the path to a custom report class (the \"full\" report is printed by default) <reportFile> Write the report to the specified file path <reportWidth> How many columns wide screen reports should be printed or set to \"auto\" to use current screen width, where supported <severity> The minimum severity required to display an error or warning <sniffs> A comma separated list of sniff codes to include or exclude from checking (all sniffs must be part of the specified standard) <standard> The name or path of the coding standard to use <stdinPath> If processing STDIN, the file path that STDIN will be processed as <tabWidth> The number of spaces each tab represents Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc # Linter install RUN phive --no-progress install phpcs -g --trust-gpg-keys 31C7E470E2138192 Example success log Results of phpcs linter (version 3.5.8) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpcs/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php [SUCCESS] .automation/test/php/php_good_2.php Example error log Results of phpcs linter (version 3.5.8) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpcs/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php FILE: .automation/test/php/php_bad_1.php ---------------------------------------------------------------------- FOUND 7 ERRORS AFFECTING 1 LINE ---------------------------------------------------------------------- 3 | ERROR | [x] Expected at least 1 space before \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space after \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space before \"=\"; 0 found 3 | ERROR | [x] Expected at least 1 space after \"=\"; 0 found 3 | ERROR | [x] Expected at least 1 space before \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space before \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space after \"-\"; 0 found ---------------------------------------------------------------------- PHPCBF CAN FIX THE 7 MARKED SNIFF VIOLATIONS AUTOMATICALLY ---------------------------------------------------------------------- Time: 49ms; Memory: 6MB [ERROR] .automation/test/php/php_bad_2.php FILE: .automation/test/php/php_bad_2.php ---------------------------------------------------------------------- FOUND 4 ERRORS AND 1 WARNING AFFECTING 4 LINES ---------------------------------------------------------------------- 1 | WARNING | [ ] A file should declare new symbols (classes, | | functions, constants, etc.) and cause no other | | side effects, or it should execute logic with | | side effects, but should not do both. The first | | symbol is defined on line 6 and the first side | | effect is on line 10. 6 | ERROR | [x] Opening brace should be on a new line 14 | ERROR | [x] Space before opening parenthesis of function call | | prohibited 15 | ERROR | [x] Newline required after opening brace 15 | ERROR | [x] Closing brace must be on a line by itself ---------------------------------------------------------------------- PHPCBF CAN FIX THE 4 MARKED SNIFF VIOLATIONS AUTOMATICALLY ---------------------------------------------------------------------- Time: 45ms; Memory: 6MB","title":"phpcs"},{"location":"descriptors/php_phpcs/#phpcs","text":"","title":"phpcs"},{"location":"descriptors/php_phpcs/#phpcs-documentation","text":"Version in Mega-Linter: 3.5.8 Visit Official Web Site See How to configure phpcs rules If custom phpcs.xml is not found, phpcs.xml will be used See How to disable phpcs rules in files","title":"phpcs documentation"},{"location":"descriptors/php_phpcs/#configuration-in-mega-linter","text":"Enable phpcs by adding PHP_PHPCS in ENABLE_LINTERS variable Disable phpcs by adding PHP_PHPCS in DISABLE_LINTERS variable Variable Description Default value PHP_PHPCS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPCS_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_PHPCS_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_PHPCS_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPCS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPCS_FILE_NAME phpcs configuration file name Use LINTER_DEFAULT to let the linter find it phpcs.xml PHP_PHPCS_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PHP_PHPCS_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/php_phpcs/#ide-integration","text":"Use phpcs in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-phpcs Atom atom-phpcs IDEA phpcs Sublime Text sublime-phpcs Sublime Text SublimeLinter-phpcs Visual Studio Code vscode-phpcs","title":"IDE Integration"},{"location":"descriptors/php_phpcs/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33","title":"Mega-Linter Flavours"},{"location":"descriptors/php_phpcs/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_phpcs/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_phpcs/#example-calls","text":"phpcs myfile.php phpcs --standard=phpcs.xml myfile.php","title":"Example calls"},{"location":"descriptors/php_phpcs/#help-content","text":"Usage: phpcs [-nwlsaepqvi] [-d key[=value]] [--colors] [--no-colors] [--cache[=<cacheFile>]] [--no-cache] [--tab-width=<tabWidth>] [--report=<report>] [--report-file=<reportFile>] [--report-<report>=<reportFile>] [--report-width=<reportWidth>] [--basepath=<basepath>] [--bootstrap=<bootstrap>] [--severity=<severity>] [--error-severity=<severity>] [--warning-severity=<severity>] [--runtime-set key value] [--config-set key value] [--config-delete key] [--config-show] [--standard=<standard>] [--sniffs=<sniffs>] [--exclude=<sniffs>] [--encoding=<encoding>] [--parallel=<processes>] [--generator=<generator>] [--extensions=<extensions>] [--ignore=<patterns>] [--ignore-annotations] [--stdin-path=<stdinPath>] [--file-list=<fileList>] [--filter=<filter>] <file> - ... - Check STDIN instead of local files and directories -n Do not print warnings (shortcut for --warning-severity=0) -w Print both warnings and errors (this is the default) -l Local directory only, no recursion -s Show sniff codes in all reports -a Run interactively -e Explain a standard by showing the sniffs it includes -p Show progress of the run -q Quiet mode; disables progress and verbose output -m Stop error messages from being recorded (saves a lot of memory, but stops many reports from being used) -v Print processed files -vv Print ruleset and token output -vvv Print sniff processing information -i Show a list of installed coding standards -d Set the [key] php.ini value to [value] or [true] if value is omitted --help Print this help message --version Print version information --colors Use colors in output --no-colors Do not use colors in output (this is the default) --cache Cache results between runs --no-cache Do not cache results between runs (this is the default) --ignore-annotations Ignore all phpcs: annotations in code comments <cacheFile> Use a specific file for caching (uses a temporary file by default) <basepath> A path to strip from the front of file paths inside reports <bootstrap> A comma separated list of files to run before processing begins <encoding> The encoding of the files being checked (default is utf-8) <extensions> A comma separated list of file extensions to check The type of the file can be specified using: ext/type e.g., module/php,es/js <file> One or more files and/or directories to check <fileList> A file containing a list of files and/or directories to check (one per line) <filter> Use either the \"gitmodified\" or \"gitstaged\" filter, or specify the path to a custom filter class <generator> Use either the \"HTML\", \"Markdown\" or \"Text\" generator (forces documentation generation instead of checking) <patterns> A comma separated list of patterns to ignore files and directories <processes> How many files should be checked simultaneously (default is 1) <report> Print either the \"full\", \"xml\", \"checkstyle\", \"csv\" \"json\", \"junit\", \"emacs\", \"source\", \"summary\", \"diff\" \"svnblame\", \"gitblame\", \"hgblame\" or \"notifysend\" report, or specify the path to a custom report class (the \"full\" report is printed by default) <reportFile> Write the report to the specified file path <reportWidth> How many columns wide screen reports should be printed or set to \"auto\" to use current screen width, where supported <severity> The minimum severity required to display an error or warning <sniffs> A comma separated list of sniff codes to include or exclude from checking (all sniffs must be part of the specified standard) <standard> The name or path of the coding standard to use <stdinPath> If processing STDIN, the file path that STDIN will be processed as <tabWidth> The number of spaces each tab represents","title":"Help content"},{"location":"descriptors/php_phpcs/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc # Linter install RUN phive --no-progress install phpcs -g --trust-gpg-keys 31C7E470E2138192","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_phpcs/#example-success-log","text":"Results of phpcs linter (version 3.5.8) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpcs/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php [SUCCESS] .automation/test/php/php_good_2.php","title":"Example success log"},{"location":"descriptors/php_phpcs/#example-error-log","text":"Results of phpcs linter (version 3.5.8) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpcs/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php FILE: .automation/test/php/php_bad_1.php ---------------------------------------------------------------------- FOUND 7 ERRORS AFFECTING 1 LINE ---------------------------------------------------------------------- 3 | ERROR | [x] Expected at least 1 space before \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space after \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space before \"=\"; 0 found 3 | ERROR | [x] Expected at least 1 space after \"=\"; 0 found 3 | ERROR | [x] Expected at least 1 space before \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space before \"-\"; 0 found 3 | ERROR | [x] Expected at least 1 space after \"-\"; 0 found ---------------------------------------------------------------------- PHPCBF CAN FIX THE 7 MARKED SNIFF VIOLATIONS AUTOMATICALLY ---------------------------------------------------------------------- Time: 49ms; Memory: 6MB [ERROR] .automation/test/php/php_bad_2.php FILE: .automation/test/php/php_bad_2.php ---------------------------------------------------------------------- FOUND 4 ERRORS AND 1 WARNING AFFECTING 4 LINES ---------------------------------------------------------------------- 1 | WARNING | [ ] A file should declare new symbols (classes, | | functions, constants, etc.) and cause no other | | side effects, or it should execute logic with | | side effects, but should not do both. The first | | symbol is defined on line 6 and the first side | | effect is on line 10. 6 | ERROR | [x] Opening brace should be on a new line 14 | ERROR | [x] Space before opening parenthesis of function call | | prohibited 15 | ERROR | [x] Newline required after opening brace 15 | ERROR | [x] Closing brace must be on a line by itself ---------------------------------------------------------------------- PHPCBF CAN FIX THE 4 MARKED SNIFF VIOLATIONS AUTOMATICALLY ---------------------------------------------------------------------- Time: 45ms; Memory: 6MB","title":"Example error log"},{"location":"descriptors/php_phpstan/","text":"phpstan phpstan documentation Version in Mega-Linter: 0.12.63 Visit Official Web Site See How to configure phpstan rules If custom phpstan.neon is not found, phpstan.neon will be used See How to disable phpstan rules in files Configuration in Mega-Linter Enable phpstan by adding PHP_PHPSTAN in ENABLE_LINTERS variable Disable phpstan by adding PHP_PHPSTAN in DISABLE_LINTERS variable Variable Description Default value PHP_PHPSTAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPSTAN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_PHPSTAN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_PHPSTAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPSTAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPSTAN_FILE_NAME phpstan configuration file name Use LINTER_DEFAULT to let the linter find it phpstan.neon PHP_PHPSTAN_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PHP_PHPSTAN_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use phpstan in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA PHPStan / Psalm / Generics Visual Studio Code vscode-phpstan Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33 Behind the scenes How are identified applicable files File extensions: .php Example calls phpstan analyse --no-progress --no-ansi myfile.php phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php Help content Description: Lists commands Usage: list [options] [--] [<namespace>] Arguments: namespace The namespace name Options: --raw To output raw command list --format=FORMAT The output format (txt, xml, json, or md) [default: \"txt\"] Help: The list command lists all commands: php /root/.composer/vendor/bin/phpstan list You can also display the commands for a specific namespace: php /root/.composer/vendor/bin/phpstan list test You can also output the information in other formats by using the --format option: php /root/.composer/vendor/bin/phpstan list --format=xml It's also possible to get raw list of commands (useful for embedding command runner): php /root/.composer/vendor/bin/phpstan list --raw Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc # Linter install RUN composer global require phpstan/phpstan \\ && composer global config bin-dir --absolute ENV PATH=\"/root/.composer/vendor/bin:$PATH\" Example success log Results of phpstan linter (version 0.12.58) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpstan/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php [OK] No errors [SUCCESS] .automation/test/php/php_good_2.php [OK] No errors Example error log Results of phpstan linter (version 0.12.58) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpstan/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php ------ ---------------------------------------------- Line php_bad_1.php ------ ---------------------------------------------- 3 Invalid numeric literal on line 3 3 Invalid numeric literal on line 3 3 Syntax error, unexpected '=' on line 3 3 Syntax error, unexpected T_LNUMBER on line 3 3 Syntax error, unexpected T_STRING on line 3 3 Syntax error, unexpected T_STRING on line 3 ------ ---------------------------------------------- [ERROR] Found 6 errors ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Invalid numeric literal on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Invalid numeric literal on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected '=' on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected T_LNUMBER on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected T_STRING on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected T_STRING on line 3 [ERROR] .automation/test/php/php_bad_2.php ------ ----------------------------------------- Line php_bad_2.php ------ ----------------------------------------- 15 Syntax error, unexpected '}' on line 15 ------ ----------------------------------------- [ERROR] Found 1 error ::error file=mp/lint/.automation/test/php/php_bad_2.php,line=15,col=0::Syntax error, unexpected '}' on line 15","title":"phpstan"},{"location":"descriptors/php_phpstan/#phpstan","text":"","title":"phpstan"},{"location":"descriptors/php_phpstan/#phpstan-documentation","text":"Version in Mega-Linter: 0.12.63 Visit Official Web Site See How to configure phpstan rules If custom phpstan.neon is not found, phpstan.neon will be used See How to disable phpstan rules in files","title":"phpstan documentation"},{"location":"descriptors/php_phpstan/#configuration-in-mega-linter","text":"Enable phpstan by adding PHP_PHPSTAN in ENABLE_LINTERS variable Disable phpstan by adding PHP_PHPSTAN in DISABLE_LINTERS variable Variable Description Default value PHP_PHPSTAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPSTAN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_PHPSTAN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_PHPSTAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPSTAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPSTAN_FILE_NAME phpstan configuration file name Use LINTER_DEFAULT to let the linter find it phpstan.neon PHP_PHPSTAN_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PHP_PHPSTAN_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/php_phpstan/#ide-integration","text":"Use phpstan in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA PHPStan / Psalm / Generics Visual Studio Code vscode-phpstan","title":"IDE Integration"},{"location":"descriptors/php_phpstan/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33","title":"Mega-Linter Flavours"},{"location":"descriptors/php_phpstan/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_phpstan/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_phpstan/#example-calls","text":"phpstan analyse --no-progress --no-ansi myfile.php phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php","title":"Example calls"},{"location":"descriptors/php_phpstan/#help-content","text":"Description: Lists commands Usage: list [options] [--] [<namespace>] Arguments: namespace The namespace name Options: --raw To output raw command list --format=FORMAT The output format (txt, xml, json, or md) [default: \"txt\"] Help: The list command lists all commands: php /root/.composer/vendor/bin/phpstan list You can also display the commands for a specific namespace: php /root/.composer/vendor/bin/phpstan list test You can also output the information in other formats by using the --format option: php /root/.composer/vendor/bin/phpstan list --format=xml It's also possible to get raw list of commands (useful for embedding command runner): php /root/.composer/vendor/bin/phpstan list --raw","title":"Help content"},{"location":"descriptors/php_phpstan/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc # Linter install RUN composer global require phpstan/phpstan \\ && composer global config bin-dir --absolute ENV PATH=\"/root/.composer/vendor/bin:$PATH\"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_phpstan/#example-success-log","text":"Results of phpstan linter (version 0.12.58) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpstan/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php [OK] No errors [SUCCESS] .automation/test/php/php_good_2.php [OK] No errors","title":"Example success log"},{"location":"descriptors/php_phpstan/#example-error-log","text":"Results of phpstan linter (version 0.12.58) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_phpstan/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php ------ ---------------------------------------------- Line php_bad_1.php ------ ---------------------------------------------- 3 Invalid numeric literal on line 3 3 Invalid numeric literal on line 3 3 Syntax error, unexpected '=' on line 3 3 Syntax error, unexpected T_LNUMBER on line 3 3 Syntax error, unexpected T_STRING on line 3 3 Syntax error, unexpected T_STRING on line 3 ------ ---------------------------------------------- [ERROR] Found 6 errors ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Invalid numeric literal on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Invalid numeric literal on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected '=' on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected T_LNUMBER on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected T_STRING on line 3 ::error file=mp/lint/.automation/test/php/php_bad_1.php,line=3,col=0::Syntax error, unexpected T_STRING on line 3 [ERROR] .automation/test/php/php_bad_2.php ------ ----------------------------------------- Line php_bad_2.php ------ ----------------------------------------- 15 Syntax error, unexpected '}' on line 15 ------ ----------------------------------------- [ERROR] Found 1 error ::error file=mp/lint/.automation/test/php/php_bad_2.php,line=15,col=0::Syntax error, unexpected '}' on line 15","title":"Example error log"},{"location":"descriptors/php_psalm/","text":"psalm documentation Version in Mega-Linter: 4.3.1 Visit Official Web Site See How to configure psalm rules If custom psalm.xml is not found, psalm.xml will be used See How to disable psalm rules in files See Index of problems detected by psalm Configuration in Mega-Linter Enable psalm by adding PHP_PSALM in ENABLE_LINTERS variable Disable psalm by adding PHP_PSALM in DISABLE_LINTERS variable Variable Description Default value PHP_PSALM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PSALM_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_PSALM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_PSALM_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PSALM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PSALM_FILE_NAME psalm configuration file name Use LINTER_DEFAULT to let the linter find it psalm.xml PHP_PSALM_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PHP_PSALM_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use psalm in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA PHPStan / Psalm / Generics Visual Studio Code Psalm VsCode Plugin Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33 Behind the scenes How are identified applicable files File extensions: .php Example calls psalm myfile.php psalm --config=psalm.xml myfile.php Help content Usage: psalm [options] [file...] Basic configuration: -c, --config=psalm.xml Path to a psalm.xml configuration file. Run psalm --init to create one. --use-ini-defaults Use PHP-provided ini defaults for memory and error display --memory-limit=LIMIT Use a specific memory limit. Cannot be combined with --use-ini-defaults --disable-extension=[extension] Used to disable certain extensions while Psalm is running. --threads=INT If greater than one, Psalm will run analysis on multiple threads, speeding things up. --no-diff Turns off Psalm\u2019s diff mode, checks all files regardless of whether they've changed Surfacing issues: --show-info[=BOOLEAN] Show non-exception parser findings (defaults to false). --show-snippet[=true] Show code snippets with errors. Options are 'true' or 'false' --find-dead-code[=auto] --find-unused-code[=auto] Look for unused code. Options are 'auto' or 'always'. If no value is specified, default is 'auto' --find-unused-psalm-suppress Finds all @psalm-suppress annotations that aren\u2019t used --find-references-to=[class|method|property] Searches the codebase for references to the given fully-qualified class or method, where method is in the format class::methodName --no-suggestions Hide suggestions --taint-analysis Run Psalm in taint analysis mode \u2013 see https://psalm.dev/docs/security_analysis for more info Issue baselines: --set-baseline=PATH Save all current error level issues to a file, to mark them as info in subsequent runs Add --include-php-versions to also include a list of PHP extension versions --use-baseline=PATH Allows you to use a baseline other than the default baseline provided in your config --ignore-baseline Ignore the error baseline --update-baseline Update the baseline by removing fixed issues. This will not add new issues to the baseline Add --include-php-versions to also include a list of PHP extension versions Plugins: --plugin=PATH Executes a plugin, an alternative to using the Psalm config Output: -m, --monochrome Enable monochrome output --output-format=console Changes the output format. Available formats: compact, console, text, emacs, json, pylint, xml, checkstyle, junit, sonarqube, github, phpstorm, codeclimate --no-progress Disable the progress indicator --long-progress Use a progress indicator suitable for Continuous Integration logs --stats Shows a breakdown of Psalm's ability to infer types in the codebase Reports: --report=PATH The path where to output report file. The output format is based on the file extension. (Currently supported formats: \".json\", \".xml\", \".txt\", \".emacs\", \".pylint\", \".console\", \".sarif\", \"checkstyle.xml\", \"sonarqube.json\", \"summary.json\", \"junit.xml\") --report-show-info[=BOOLEAN] Whether the report should include non-errors in its output (defaults to true) Caching: --clear-cache Clears all cache files that Psalm uses for this specific project --clear-global-cache Clears all cache files that Psalm uses for all projects --no-cache Runs Psalm without using cache --no-reflection-cache Runs Psalm without using cached representations of unchanged classes and files. Useful if you want the afterClassLikeVisit plugin hook to run every time you visit a file. --no-file-cache Runs Psalm without using caching every single file for later diffing. This reduces the space Psalm uses on disk and file I/O. Miscellaneous: -h, --help Display this help message -v, --version Display the Psalm version -i, --init [source_dir=src] [level=3] Create a psalm config file in the current directory that points to [source_dir] at the required level, from 1, most strict, to 8, most permissive. --debug Debug information --debug-by-line Debug information on a line-by-line level --debug-emitted-issues Print a php backtrace to stderr when emitting issues. -r, --root If running Psalm globally you'll need to specify a project root. Defaults to cwd --generate-json-map=PATH Generate a map of node references and types in JSON format, saved to the given path. --generate-stubs=PATH Generate stubs for the project and dump the file in the given path --shepherd[=host] Send data to Shepherd, Psalm's GitHub integration tool. --alter Run Psalter --language-server Run Psalm Language Server Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc # Linter install RUN phive --no-progress install psalm -g --trust-gpg-keys 8A03EA3B385DBAA1 Example success log Results of psalm linter (version 4.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_psalm/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php Scanning files... Analyzing files... \u2591 ------------------------------ No errors found! ------------------------------ Checks took 0.25 seconds and used 39.379MB of memory Psalm was unable to infer types in the codebase [SUCCESS] .automation/test/php/php_good_2.php Scanning files... Analyzing files... \u2591 ------------------------------ No errors found! ------------------------------ Checks took 0.31 seconds and used 36.996MB of memory Psalm was unable to infer types in the codebase Example error log Results of psalm linter (version 4.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_psalm/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php Scanning files... Analyzing files... E ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:2 - Syntax error, unexpected T_STRING on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:2 - Const pe98y is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:8 - Const r is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:10 - Const n0u823n is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:17 - Syntax error, unexpected '=' on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:18 - Const r is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:21 - Invalid numeric literal on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:24 - Const u3 is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:28 - Const r08u2q098ry is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:40 - Syntax error, unexpected T_LNUMBER on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:42 - Const nq2yr09n2yr9 is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:55 - Const y2n is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:61 - Syntax error, unexpected T_STRING on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:61 - Const yr is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:68 - Const yr3 is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ------------------------------ 15 errors found ------------------------------ Checks took 0.30 seconds and used 39.560MB of memory Psalm was unable to infer types in the codebase [ERROR] .automation/test/php/php_bad_2.php Scanning files... Analyzing files... E ERROR: InvalidReturnType - ../../...automation/test/php/php_bad_2.php:4:12 - The declared return type 'array<array-key, string>' for takesAnInt is incorrect, got 'array{int, string(hello)}' (see https://psalm.dev/011) * @return array<string> ERROR: InvalidReturnStatement - ../../...automation/test/php/php_bad_2.php:7:12 - The inferred type 'array{int, string(hello)}' does not match the declared return type 'array<array-key, string>' for takesAnInt (see https://psalm.dev/128) return [$i, \"hello\"]; ERROR: InvalidScalarArgument - ../../...automation/test/php/php_bad_2.php:11:12 - Argument 1 of takesAnInt expects int, string(some text) provided (see https://psalm.dev/012) takesAnInt($data[0]); ERROR: ParseError - ../../...automation/test/php/php_bad_2.php:15:1 - Syntax error, unexpected '}' on line 15 (see https://psalm.dev/173) } elseif ($condition) {} ------------------------------ 4 errors found ------------------------------ Psalm can automatically fix 1 of these issues. Run Psalm again with --alter --issues=InvalidReturnType --dry-run to see what it can fix. ------------------------------ Checks took 0.32 seconds and used 36.047MB of memory Psalm was unable to infer types in the codebase","title":"psalm"},{"location":"descriptors/php_psalm/#psalm-documentation","text":"Version in Mega-Linter: 4.3.1 Visit Official Web Site See How to configure psalm rules If custom psalm.xml is not found, psalm.xml will be used See How to disable psalm rules in files See Index of problems detected by psalm","title":"psalm documentation"},{"location":"descriptors/php_psalm/#configuration-in-mega-linter","text":"Enable psalm by adding PHP_PSALM in ENABLE_LINTERS variable Disable psalm by adding PHP_PSALM in DISABLE_LINTERS variable Variable Description Default value PHP_PSALM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PSALM_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PHP_PSALM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PHP_PSALM_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PSALM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PSALM_FILE_NAME psalm configuration file name Use LINTER_DEFAULT to let the linter find it psalm.xml PHP_PSALM_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PHP_PSALM_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/php_psalm/#ide-integration","text":"Use psalm in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA PHPStan / Psalm / Generics Visual Studio Code Psalm VsCode Plugin","title":"IDE Integration"},{"location":"descriptors/php_psalm/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 php Mega-Linter optimized for PHP based projects 33","title":"Mega-Linter Flavours"},{"location":"descriptors/php_psalm/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_psalm/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_psalm/#example-calls","text":"psalm myfile.php psalm --config=psalm.xml myfile.php","title":"Example calls"},{"location":"descriptors/php_psalm/#help-content","text":"Usage: psalm [options] [file...] Basic configuration: -c, --config=psalm.xml Path to a psalm.xml configuration file. Run psalm --init to create one. --use-ini-defaults Use PHP-provided ini defaults for memory and error display --memory-limit=LIMIT Use a specific memory limit. Cannot be combined with --use-ini-defaults --disable-extension=[extension] Used to disable certain extensions while Psalm is running. --threads=INT If greater than one, Psalm will run analysis on multiple threads, speeding things up. --no-diff Turns off Psalm\u2019s diff mode, checks all files regardless of whether they've changed Surfacing issues: --show-info[=BOOLEAN] Show non-exception parser findings (defaults to false). --show-snippet[=true] Show code snippets with errors. Options are 'true' or 'false' --find-dead-code[=auto] --find-unused-code[=auto] Look for unused code. Options are 'auto' or 'always'. If no value is specified, default is 'auto' --find-unused-psalm-suppress Finds all @psalm-suppress annotations that aren\u2019t used --find-references-to=[class|method|property] Searches the codebase for references to the given fully-qualified class or method, where method is in the format class::methodName --no-suggestions Hide suggestions --taint-analysis Run Psalm in taint analysis mode \u2013 see https://psalm.dev/docs/security_analysis for more info Issue baselines: --set-baseline=PATH Save all current error level issues to a file, to mark them as info in subsequent runs Add --include-php-versions to also include a list of PHP extension versions --use-baseline=PATH Allows you to use a baseline other than the default baseline provided in your config --ignore-baseline Ignore the error baseline --update-baseline Update the baseline by removing fixed issues. This will not add new issues to the baseline Add --include-php-versions to also include a list of PHP extension versions Plugins: --plugin=PATH Executes a plugin, an alternative to using the Psalm config Output: -m, --monochrome Enable monochrome output --output-format=console Changes the output format. Available formats: compact, console, text, emacs, json, pylint, xml, checkstyle, junit, sonarqube, github, phpstorm, codeclimate --no-progress Disable the progress indicator --long-progress Use a progress indicator suitable for Continuous Integration logs --stats Shows a breakdown of Psalm's ability to infer types in the codebase Reports: --report=PATH The path where to output report file. The output format is based on the file extension. (Currently supported formats: \".json\", \".xml\", \".txt\", \".emacs\", \".pylint\", \".console\", \".sarif\", \"checkstyle.xml\", \"sonarqube.json\", \"summary.json\", \"junit.xml\") --report-show-info[=BOOLEAN] Whether the report should include non-errors in its output (defaults to true) Caching: --clear-cache Clears all cache files that Psalm uses for this specific project --clear-global-cache Clears all cache files that Psalm uses for all projects --no-cache Runs Psalm without using cache --no-reflection-cache Runs Psalm without using cached representations of unchanged classes and files. Useful if you want the afterClassLikeVisit plugin hook to run every time you visit a file. --no-file-cache Runs Psalm without using caching every single file for later diffing. This reduces the space Psalm uses on disk and file I/O. Miscellaneous: -h, --help Display this help message -v, --version Display the Psalm version -i, --init [source_dir=src] [level=3] Create a psalm config file in the current directory that points to [source_dir] at the required level, from 1, most strict, to 8, most permissive. --debug Debug information --debug-by-line Debug information on a line-by-line level --debug-emitted-issues Print a php backtrace to stderr when emitting issues. -r, --root If running Psalm globally you'll need to specify a project root. Defaults to cwd --generate-json-map=PATH Generate a map of node references and types in JSON format, saved to the given path. --generate-stubs=PATH Generate stubs for the project and dump the file in the given path --shepherd[=host] Send data to Shepherd, Psalm's GitHub integration tool. --alter Run Psalter --language-server Run Psalm Language Server","title":"Help content"},{"location":"descriptors/php_psalm/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc # Linter install RUN phive --no-progress install psalm -g --trust-gpg-keys 8A03EA3B385DBAA1","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_psalm/#example-success-log","text":"Results of psalm linter (version 4.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_psalm/ ----------------------------------------------- [SUCCESS] .automation/test/php/php_good_1.php Scanning files... Analyzing files... \u2591 ------------------------------ No errors found! ------------------------------ Checks took 0.25 seconds and used 39.379MB of memory Psalm was unable to infer types in the codebase [SUCCESS] .automation/test/php/php_good_2.php Scanning files... Analyzing files... \u2591 ------------------------------ No errors found! ------------------------------ Checks took 0.31 seconds and used 36.996MB of memory Psalm was unable to infer types in the codebase","title":"Example success log"},{"location":"descriptors/php_psalm/#example-error-log","text":"Results of psalm linter (version 4.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/php_psalm/ ----------------------------------------------- [ERROR] .automation/test/php/php_bad_1.php Scanning files... Analyzing files... E ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:2 - Syntax error, unexpected T_STRING on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:2 - Const pe98y is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:8 - Const r is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:10 - Const n0u823n is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:17 - Syntax error, unexpected '=' on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:18 - Const r is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:21 - Invalid numeric literal on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:24 - Const u3 is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:28 - Const r08u2q098ry is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:40 - Syntax error, unexpected T_LNUMBER on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:42 - Const nq2yr09n2yr9 is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:55 - Const y2n is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: ParseError - ../../...automation/test/php/php_bad_1.php:3:61 - Syntax error, unexpected T_STRING on line 3 (see https://psalm.dev/173) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:61 - Const yr is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ERROR: UndefinedConstant - ../../...automation/test/php/php_bad_1.php:3:68 - Const yr3 is not defined (see https://psalm.dev/020) 2pe98y r-n0u823n=r 092u3- r08u2q098ry 09nq2yr09n2yr9 y2n-93yr 298yr3 29 ------------------------------ 15 errors found ------------------------------ Checks took 0.30 seconds and used 39.560MB of memory Psalm was unable to infer types in the codebase [ERROR] .automation/test/php/php_bad_2.php Scanning files... Analyzing files... E ERROR: InvalidReturnType - ../../...automation/test/php/php_bad_2.php:4:12 - The declared return type 'array<array-key, string>' for takesAnInt is incorrect, got 'array{int, string(hello)}' (see https://psalm.dev/011) * @return array<string> ERROR: InvalidReturnStatement - ../../...automation/test/php/php_bad_2.php:7:12 - The inferred type 'array{int, string(hello)}' does not match the declared return type 'array<array-key, string>' for takesAnInt (see https://psalm.dev/128) return [$i, \"hello\"]; ERROR: InvalidScalarArgument - ../../...automation/test/php/php_bad_2.php:11:12 - Argument 1 of takesAnInt expects int, string(some text) provided (see https://psalm.dev/012) takesAnInt($data[0]); ERROR: ParseError - ../../...automation/test/php/php_bad_2.php:15:1 - Syntax error, unexpected '}' on line 15 (see https://psalm.dev/173) } elseif ($condition) {} ------------------------------ 4 errors found ------------------------------ Psalm can automatically fix 1 of these issues. Run Psalm again with --alter --issues=InvalidReturnType --dry-run to see what it can fix. ------------------------------ Checks took 0.32 seconds and used 36.047MB of memory Psalm was unable to infer types in the codebase","title":"Example error log"},{"location":"descriptors/powershell/","text":"POWERSHELL Linters Linter Configuration key powershell POWERSHELL Linted files File extensions: .ps1 .psm1 .psd1 .ps1xml .pssc .psrc .cdxml Configuration in Mega-Linter Variable Description Default value POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh","title":"All POWERSHELL linters"},{"location":"descriptors/powershell/#powershell","text":"","title":"POWERSHELL"},{"location":"descriptors/powershell/#linters","text":"Linter Configuration key powershell POWERSHELL","title":"Linters"},{"location":"descriptors/powershell/#linted-files","text":"File extensions: .ps1 .psm1 .psd1 .ps1xml .pssc .psrc .cdxml","title":"Linted files"},{"location":"descriptors/powershell/#configuration-in-mega-linter","text":"Variable Description Default value POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/powershell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/powershell/#installation","text":"Dockerfile commands : ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh","title":"Installation"},{"location":"descriptors/powershell_powershell/","text":"powershell powershell documentation Version in Mega-Linter: 7.1.0 Visit Official Web Site See How to configure powershell rules If custom .powershell-psscriptanalyzer.psd1 is not found, .powershell-psscriptanalyzer.psd1 will be used See How to disable powershell rules in files Configuration in Mega-Linter Enable powershell by adding POWERSHELL_POWERSHELL in ENABLE_LINTERS variable Disable powershell by adding POWERSHELL_POWERSHELL in DISABLE_LINTERS variable Variable Description Default value POWERSHELL_POWERSHELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file POWERSHELL_POWERSHELL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ps1\", \".psm1\", \".psd1\", \".ps1xml\", \".pssc\", \".psrc\", \".cdxml\"] POWERSHELL_POWERSHELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file POWERSHELL_POWERSHELL_FILE_NAME powershell configuration file name Use LINTER_DEFAULT to let the linter find it .powershell-psscriptanalyzer.psd1 POWERSHELL_POWERSHELL_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules POWERSHELL_POWERSHELL_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use powershell in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code VsCode PowerShell extension Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 Behind the scenes How are identified applicable files File extensions: .ps1 .psm1 .psd1 .ps1xml .pssc .psrc .cdxml Example calls pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Path myfile.ps1\" pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Settings .powershell-psscriptanalyzer.psd1 -Path myfile.ps1\" Help content Usage: pwsh[.exe] [-Login] [[-File] <filePath> [args]] [-Command { - | <script-block> [-args <arg-array>] | <string> [<CommandParameters>] } ] [-ConfigurationName <string>] [-CustomPipeName <string>] [-EncodedCommand <Base64EncodedCommand>] [-ExecutionPolicy <ExecutionPolicy>] [-InputFormat {Text | XML}] [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile] [-OutputFormat {Text | XML}] [-SettingsFile <filePath>] [-SSHServerMode] [-STA] [-Version] [-WindowStyle <style>] [-WorkingDirectory <directoryPath>] pwsh[.exe] -h | -Help | -? | /? PowerShell Online Help https://aka.ms/powershell-docs All parameters are case-insensitive. -File | -f If the value of File is \"-\", the command text is read from standard input. Running \"pwsh -File -\" without redirected standard input starts a regular session. This is the same as not specifying the File parameter at all. This is the default parameter if no parameters are present but values are present in the command line. The specified script runs in the local scope (\"dot-sourced\"), so that the functions and variables that the script creates are available in the current session. Enter the script file path and any parameters. File must be the last parameter in the command, because all characters typed after the File parameter name are interpreted as the script file path followed by the script parameters. Typically, the switch parameters of a script are either included or omitted. For example, the following command uses the All parameter of the Get-Script.ps1 script file: \"-File .\\Get-Script.ps1 -All\" In rare cases, you might need to provide a BOOLEAN value for a switch parameter. To provide a BOOLEAN value for a switch parameter in the value of the FILE parameter, Use the parameter normally followed immediately by a colon and the boolean value, such as the following: \"-File .\\Get-Script.ps1 -All:$False\". Parameters passed to the script are passed as literal strings, after interpretation by the current shell. For example, if you are in cmd.exe and want to pass an environment variable value, you would use the cmd.exe syntax: \"pwsh -File . est.ps1 -TestParam %windir%\" In contrast, running \"pwsh -File . est.ps1 -TestParam $env:windir\" in cmd.exe results in the script receiving the literal string \"$env:windir\" because it has no special meaning to the current cmd.exe shell. The \"$env:windir\" style of environment variable reference can be used inside a Command parameter, since there it is interpreted as PowerShell code. Similarly, if you want to execute the same command from a Batch script, you would use \"%~dp0\" instead of \".\\\" or \"$PSScriptRoot\" to represent the current execution directory: \"pwsh -File %~dp0test.ps1 -TestParam %windir%\". If you instead used \". est.ps1\", PowerShell would throw an error because it cannot find the literal path \". est.ps1\". When the script file invoked terminates with an exit command, the process exit code is set to the numeric argument used with the exit command. With normal termination, the exit code is always 0. Similar to -Command, when a script-terminating error occurs, the exit code is set to 1. However, unlike with -Command, when the execution is interrupted with Ctrl-C the exit code is 0. -Command | -c Executes the specified commands (and any parameters) as though they were typed at the PowerShell command prompt, and then exits, unless the NoExit parameter is specified. The value of Command can be \"-\", a script block, or a string. If the value of Command is \"-\", the command text is read from standard input. The Command parameter only accepts a script block for execution when it can recognize the value passed to Command as a ScriptBlock type. This is only possible when running pwsh from another PowerShell host. The ScriptBlock type may be contained in an existing variable, returned from an expression, or parsed by the PowerShell host as a literal script block enclosed in curly braces \"{}\", before being passed to pwsh. pwsh -Command {Get-WinEvent -LogName security} In cmd.exe, there is no such thing as a script block (or ScriptBlock type), so the value passed to Command will always be a string. You can write a script block inside the string, but instead of being executed it will behave exactly as though you typed it at a typical PowerShell prompt, printing the contents of the script block back out to you. A string passed to Command is still executed as PowerShell script, so the script block curly braces are often not required in the first place when running from cmd.exe. To execute an inline script block defined inside a string, the call operator \"&\" can be used: pwsh -Command \"& {Get-WinEvent -LogName security}\" If the value of Command is a string, Command must be the last parameter for pwsh, because all arguments following it are interpreted as part of the command to execute. When called from within an existing PowerShell session, the results are returned to the parent shell as deserialized XML objects, not live objects. For other shells, the results are returned as strings. If the value of Command is \"-\", the command text is read from standard input. You must redirect standard input when using the Command parameter with standard input. For example: @' \"in\" \"hi\" | % { \"$_ there\" } \"out\" '@ | powershell -NoProfile -Command - This example produces the following output: in hi there out The process exit code is determined by status of the last (executed) command within the script block. The exit code is 0 when $? is $true or 1 when $? is $false. If the last command is an external program or a PowerShell script that explicitly sets an exit code other than 0 or 1, that exit code is converted to 1 for process exit code. To preserve the specific exit code, add exit $LASTEXITCODE to your command string or script block. Similarly, the value 1 is returned when a script-terminating (runspace-terminating) error, such as a throw or -ErrorAction Stop, occurs or when execution is interrupted with Ctrl-C. -ConfigurationName | -config Specifies a configuration endpoint in which PowerShell is run. This can be any endpoint registered on the local machine including the default PowerShell remoting endpoints or a custom endpoint having specific user role capabilities. Example: \"pwsh -ConfigurationName AdminRoles\" -CustomPipeName Specifies the name to use for an additional IPC server (named pipe) used for debugging and other cross-process communication. This offers a predictable mechanism for connecting to other PowerShell instances. Typically used with the CustomPipeName parameter on \"Enter-PSHostProcess\". This parameter was introduced in PowerShell 6.2. For example: # PowerShell instance 1 pwsh -CustomPipeName mydebugpipe # PowerShell instance 2 Enter-PSHostProcess -CustomPipeName mydebugpipe -EncodedCommand | -e | -ec Accepts a Base64-encoded string version of a command. Use this parameter to submit commands to PowerShell that require complex, nested quoting. The Base64 representation must be a UTF-16 encoded string. For example: $command = 'dir \"c:\\program files\" ' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) pwsh -encodedcommand $encodedCommand -ExecutionPolicy | -ex | -ep Sets the default execution policy for the current session and saves it in the $env:PSExecutionPolicyPreference environment variable. This parameter does not change the persistently configured execution policies. This parameter only applies to Windows computers. The $env:PSExecutionPolicyPreference environment variable does not exist on non-Windows platforms. -InputFormat | -inp | -if Describes the format of data sent to PowerShell. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). -Interactive | -i Present an interactive prompt to the user. Inverse for NonInteractive parameter. -Login | -l On Linux and macOS, starts PowerShell as a login shell, using /bin/sh to execute login profiles such as /etc/profile and ~/.profile. On Windows, this switch does nothing. [!IMPORTANT] This parameter must come first to start PowerShell as a login shell. The parameter is ignored if passed in any other position. To set up pwsh as the login shell on UNIX-like operating systems: - Verify that the full absolute path to pwsh is listed under /etc/shells - This path is usually something like /usr/bin/pwsh on Linux or /usr/local/bin/pwsh on macOS - With some installation methods, this entry will be added automatically at installation time - If pwsh is not present in /etc/shells, use an editor to append the path to pwsh on the last line. This requires elevated privileges to edit. - Use the chsh utility to set your current user's shell to pwsh: chsh -s /usr/bin/pwsh [!WARNING] Setting pwsh as the login shell is currently not supported on Windows Subsystem for Linux (WSL), and attempting to set pwsh as the login shell there may lead to being unable to start WSL interactively. -MTA Start PowerShell using a multi-threaded apartment. This switch is only available on Windows. -NoExit | -noe Does not exit after running startup commands. Example: \"pwsh -NoExit -Command Get-Date\" -NoLogo | -nol Hides the copyright banner at startup of interactive sessions. -NonInteractive | -noni Does not present an interactive prompt to the user. Any attempts to use interactive features, like Read-Host or confirmation prompts, result in statement-terminating errors. -NoProfile | -nop Does not load the PowerShell profiles. -OutputFormat | -o | -of Determines how output from PowerShell is formatted. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). Example: \"pwsh -o XML -c Get-Date\" When called withing a PowerShell session, you get deserialized objects as output rather plain strings. When called from other shells, the output is string data formatted as CLIXML text. -SettingsFile | -settings Overrides the system-wide \"powershell.config.json\" settings file for the session. By default, system-wide settings are read from the \"powershell.config.json\" in the \"$PSHOME\" directory. Note that these settings are not used by the endpoint specified by the \"-ConfigurationName\" argument. Example: \"pwsh -SettingsFile c:\\myproject\\powershell.config.json\" -SSHServerMode | -sshs Used in sshd_config for running PowerShell as an SSH subsystem. It is not intended or supported for any other use. -STA Start PowerShell using a single-threaded apartment. This is the default. This switch is only available on Windows. -Version | -v Displays the version of PowerShell. Additional parameters are ignored. -WindowStyle | -w Sets the window style for the session. Valid values are Normal, Minimized, Maximized and Hidden. -WorkingDirectory | -wd Sets the initial working directory by executing at startup. Any valid PowerShell file path is supported. To start PowerShell in your home directory, use: pwsh -WorkingDirectory ~ -Help, -?, /? Displays help for pwsh. If you are typing a pwsh command in PowerShell, prepend the command parameters with a hyphen (-), not a forward slash (/). Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh # Linter install ARG PSSA_VERSION='latest' RUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force' Example success log Results of powershell linter (version 7.1.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/powershell_powershell/ ----------------------------------------------- [SUCCESS] .automation/test/powershell/powershell_good_1.ps1 [SUCCESS] .automation/test/powershell/powershell_good_1.psd1 [SUCCESS] .automation/test/powershell/powershell_good_1.psm1 Example error log Results of powershell linter (version 7.1.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/powershell_powershell/ ----------------------------------------------- [ERROR] .automation/test/powershell/powershell_bad_1.ps1 RuleName Severity ScriptName Line Message -------- -------- ---------- ---- ------- PSAvoidUsingEmptyCatchBlock Warning powershell 12 Empty catch b _bad_1.ps1 lock is used. Please use W rite-Error or throw statem ents in catch blocks. PSAvoidTrailingWhitespace Information powershell 11 Line has trai _bad_1.ps1 ling whitespa ce PSAvoidUsingUsernameAndPasswordPara Error powershell 4 Function 'Bad ms _bad_1.ps1 Function' has both Usernam e and Passwor d parameters. Either set t he type of th e Password pa rameter to Se cureString or replace the Username and Password para meters with a Credential p arameter of t ype PSCredent ial. If using a Credential parameter in PowerShell 4 .0 or earlier , please defi ne a credenti al transforma tion attribut e after the P SCredential t ype attribute . PSAvoidUsingPlainTextForPassword Warning powershell 5 Parameter '$P _bad_1.ps1 assword' shou ld use Secure String, other wise this wil l expose sens itive informa tion. See Con vertTo-Secure String for mo re informatio n. PSUseDeclaredVarsMoreThanAssignment Warning powershell 9 The variable s _bad_1.ps1 'VariableThat IsNotUsedLate r' is assigne d but never u sed. [ERROR] .automation/test/powershell/powershell_bad_1.psd1 RuleName Severity ScriptName Line Message -------- -------- ---------- ---- ------- TerminatorExpectedAtEndOfString ParseError powershell 2 The string is _bad_1.psd missing the 1 terminator: ' . MissingEndCurlyBrace ParseError powershell 1 Missing closi _bad_1.psd ng '}' in sta 1 tement block or type defin ition. [ERROR] .automation/test/powershell/powershell_bad_1.psm1 RuleName Severity ScriptName Line Message -------- -------- ---------- ---- ------- TerminatorExpectedAtEndOfString ParseError powershell 1 The string is _bad_1.psm missing the 1 terminator: \" .","title":"powershell"},{"location":"descriptors/powershell_powershell/#powershell","text":"","title":"powershell"},{"location":"descriptors/powershell_powershell/#powershell-documentation","text":"Version in Mega-Linter: 7.1.0 Visit Official Web Site See How to configure powershell rules If custom .powershell-psscriptanalyzer.psd1 is not found, .powershell-psscriptanalyzer.psd1 will be used See How to disable powershell rules in files","title":"powershell documentation"},{"location":"descriptors/powershell_powershell/#configuration-in-mega-linter","text":"Enable powershell by adding POWERSHELL_POWERSHELL in ENABLE_LINTERS variable Disable powershell by adding POWERSHELL_POWERSHELL in DISABLE_LINTERS variable Variable Description Default value POWERSHELL_POWERSHELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file POWERSHELL_POWERSHELL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ps1\", \".psm1\", \".psd1\", \".ps1xml\", \".pssc\", \".psrc\", \".cdxml\"] POWERSHELL_POWERSHELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file POWERSHELL_POWERSHELL_FILE_NAME powershell configuration file name Use LINTER_DEFAULT to let the linter find it .powershell-psscriptanalyzer.psd1 POWERSHELL_POWERSHELL_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules POWERSHELL_POWERSHELL_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/powershell_powershell/#ide-integration","text":"Use powershell in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code VsCode PowerShell extension","title":"IDE Integration"},{"location":"descriptors/powershell_powershell/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35","title":"Mega-Linter Flavours"},{"location":"descriptors/powershell_powershell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/powershell_powershell/#how-are-identified-applicable-files","text":"File extensions: .ps1 .psm1 .psd1 .ps1xml .pssc .psrc .cdxml","title":"How are identified applicable files"},{"location":"descriptors/powershell_powershell/#example-calls","text":"pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Path myfile.ps1\" pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Settings .powershell-psscriptanalyzer.psd1 -Path myfile.ps1\"","title":"Example calls"},{"location":"descriptors/powershell_powershell/#help-content","text":"Usage: pwsh[.exe] [-Login] [[-File] <filePath> [args]] [-Command { - | <script-block> [-args <arg-array>] | <string> [<CommandParameters>] } ] [-ConfigurationName <string>] [-CustomPipeName <string>] [-EncodedCommand <Base64EncodedCommand>] [-ExecutionPolicy <ExecutionPolicy>] [-InputFormat {Text | XML}] [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile] [-OutputFormat {Text | XML}] [-SettingsFile <filePath>] [-SSHServerMode] [-STA] [-Version] [-WindowStyle <style>] [-WorkingDirectory <directoryPath>] pwsh[.exe] -h | -Help | -? | /? PowerShell Online Help https://aka.ms/powershell-docs All parameters are case-insensitive. -File | -f If the value of File is \"-\", the command text is read from standard input. Running \"pwsh -File -\" without redirected standard input starts a regular session. This is the same as not specifying the File parameter at all. This is the default parameter if no parameters are present but values are present in the command line. The specified script runs in the local scope (\"dot-sourced\"), so that the functions and variables that the script creates are available in the current session. Enter the script file path and any parameters. File must be the last parameter in the command, because all characters typed after the File parameter name are interpreted as the script file path followed by the script parameters. Typically, the switch parameters of a script are either included or omitted. For example, the following command uses the All parameter of the Get-Script.ps1 script file: \"-File .\\Get-Script.ps1 -All\" In rare cases, you might need to provide a BOOLEAN value for a switch parameter. To provide a BOOLEAN value for a switch parameter in the value of the FILE parameter, Use the parameter normally followed immediately by a colon and the boolean value, such as the following: \"-File .\\Get-Script.ps1 -All:$False\". Parameters passed to the script are passed as literal strings, after interpretation by the current shell. For example, if you are in cmd.exe and want to pass an environment variable value, you would use the cmd.exe syntax: \"pwsh -File . est.ps1 -TestParam %windir%\" In contrast, running \"pwsh -File . est.ps1 -TestParam $env:windir\" in cmd.exe results in the script receiving the literal string \"$env:windir\" because it has no special meaning to the current cmd.exe shell. The \"$env:windir\" style of environment variable reference can be used inside a Command parameter, since there it is interpreted as PowerShell code. Similarly, if you want to execute the same command from a Batch script, you would use \"%~dp0\" instead of \".\\\" or \"$PSScriptRoot\" to represent the current execution directory: \"pwsh -File %~dp0test.ps1 -TestParam %windir%\". If you instead used \". est.ps1\", PowerShell would throw an error because it cannot find the literal path \". est.ps1\". When the script file invoked terminates with an exit command, the process exit code is set to the numeric argument used with the exit command. With normal termination, the exit code is always 0. Similar to -Command, when a script-terminating error occurs, the exit code is set to 1. However, unlike with -Command, when the execution is interrupted with Ctrl-C the exit code is 0. -Command | -c Executes the specified commands (and any parameters) as though they were typed at the PowerShell command prompt, and then exits, unless the NoExit parameter is specified. The value of Command can be \"-\", a script block, or a string. If the value of Command is \"-\", the command text is read from standard input. The Command parameter only accepts a script block for execution when it can recognize the value passed to Command as a ScriptBlock type. This is only possible when running pwsh from another PowerShell host. The ScriptBlock type may be contained in an existing variable, returned from an expression, or parsed by the PowerShell host as a literal script block enclosed in curly braces \"{}\", before being passed to pwsh. pwsh -Command {Get-WinEvent -LogName security} In cmd.exe, there is no such thing as a script block (or ScriptBlock type), so the value passed to Command will always be a string. You can write a script block inside the string, but instead of being executed it will behave exactly as though you typed it at a typical PowerShell prompt, printing the contents of the script block back out to you. A string passed to Command is still executed as PowerShell script, so the script block curly braces are often not required in the first place when running from cmd.exe. To execute an inline script block defined inside a string, the call operator \"&\" can be used: pwsh -Command \"& {Get-WinEvent -LogName security}\" If the value of Command is a string, Command must be the last parameter for pwsh, because all arguments following it are interpreted as part of the command to execute. When called from within an existing PowerShell session, the results are returned to the parent shell as deserialized XML objects, not live objects. For other shells, the results are returned as strings. If the value of Command is \"-\", the command text is read from standard input. You must redirect standard input when using the Command parameter with standard input. For example: @' \"in\" \"hi\" | % { \"$_ there\" } \"out\" '@ | powershell -NoProfile -Command - This example produces the following output: in hi there out The process exit code is determined by status of the last (executed) command within the script block. The exit code is 0 when $? is $true or 1 when $? is $false. If the last command is an external program or a PowerShell script that explicitly sets an exit code other than 0 or 1, that exit code is converted to 1 for process exit code. To preserve the specific exit code, add exit $LASTEXITCODE to your command string or script block. Similarly, the value 1 is returned when a script-terminating (runspace-terminating) error, such as a throw or -ErrorAction Stop, occurs or when execution is interrupted with Ctrl-C. -ConfigurationName | -config Specifies a configuration endpoint in which PowerShell is run. This can be any endpoint registered on the local machine including the default PowerShell remoting endpoints or a custom endpoint having specific user role capabilities. Example: \"pwsh -ConfigurationName AdminRoles\" -CustomPipeName Specifies the name to use for an additional IPC server (named pipe) used for debugging and other cross-process communication. This offers a predictable mechanism for connecting to other PowerShell instances. Typically used with the CustomPipeName parameter on \"Enter-PSHostProcess\". This parameter was introduced in PowerShell 6.2. For example: # PowerShell instance 1 pwsh -CustomPipeName mydebugpipe # PowerShell instance 2 Enter-PSHostProcess -CustomPipeName mydebugpipe -EncodedCommand | -e | -ec Accepts a Base64-encoded string version of a command. Use this parameter to submit commands to PowerShell that require complex, nested quoting. The Base64 representation must be a UTF-16 encoded string. For example: $command = 'dir \"c:\\program files\" ' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) pwsh -encodedcommand $encodedCommand -ExecutionPolicy | -ex | -ep Sets the default execution policy for the current session and saves it in the $env:PSExecutionPolicyPreference environment variable. This parameter does not change the persistently configured execution policies. This parameter only applies to Windows computers. The $env:PSExecutionPolicyPreference environment variable does not exist on non-Windows platforms. -InputFormat | -inp | -if Describes the format of data sent to PowerShell. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). -Interactive | -i Present an interactive prompt to the user. Inverse for NonInteractive parameter. -Login | -l On Linux and macOS, starts PowerShell as a login shell, using /bin/sh to execute login profiles such as /etc/profile and ~/.profile. On Windows, this switch does nothing. [!IMPORTANT] This parameter must come first to start PowerShell as a login shell. The parameter is ignored if passed in any other position. To set up pwsh as the login shell on UNIX-like operating systems: - Verify that the full absolute path to pwsh is listed under /etc/shells - This path is usually something like /usr/bin/pwsh on Linux or /usr/local/bin/pwsh on macOS - With some installation methods, this entry will be added automatically at installation time - If pwsh is not present in /etc/shells, use an editor to append the path to pwsh on the last line. This requires elevated privileges to edit. - Use the chsh utility to set your current user's shell to pwsh: chsh -s /usr/bin/pwsh [!WARNING] Setting pwsh as the login shell is currently not supported on Windows Subsystem for Linux (WSL), and attempting to set pwsh as the login shell there may lead to being unable to start WSL interactively. -MTA Start PowerShell using a multi-threaded apartment. This switch is only available on Windows. -NoExit | -noe Does not exit after running startup commands. Example: \"pwsh -NoExit -Command Get-Date\" -NoLogo | -nol Hides the copyright banner at startup of interactive sessions. -NonInteractive | -noni Does not present an interactive prompt to the user. Any attempts to use interactive features, like Read-Host or confirmation prompts, result in statement-terminating errors. -NoProfile | -nop Does not load the PowerShell profiles. -OutputFormat | -o | -of Determines how output from PowerShell is formatted. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). Example: \"pwsh -o XML -c Get-Date\" When called withing a PowerShell session, you get deserialized objects as output rather plain strings. When called from other shells, the output is string data formatted as CLIXML text. -SettingsFile | -settings Overrides the system-wide \"powershell.config.json\" settings file for the session. By default, system-wide settings are read from the \"powershell.config.json\" in the \"$PSHOME\" directory. Note that these settings are not used by the endpoint specified by the \"-ConfigurationName\" argument. Example: \"pwsh -SettingsFile c:\\myproject\\powershell.config.json\" -SSHServerMode | -sshs Used in sshd_config for running PowerShell as an SSH subsystem. It is not intended or supported for any other use. -STA Start PowerShell using a single-threaded apartment. This is the default. This switch is only available on Windows. -Version | -v Displays the version of PowerShell. Additional parameters are ignored. -WindowStyle | -w Sets the window style for the session. Valid values are Normal, Minimized, Maximized and Hidden. -WorkingDirectory | -wd Sets the initial working directory by executing at startup. Any valid PowerShell file path is supported. To start PowerShell in your home directory, use: pwsh -WorkingDirectory ~ -Help, -?, /? Displays help for pwsh. If you are typing a pwsh command in PowerShell, prepend the command parameters with a hyphen (-), not a forward slash (/).","title":"Help content"},{"location":"descriptors/powershell_powershell/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh # Linter install ARG PSSA_VERSION='latest' RUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'","title":"Installation on mega-linter Docker image"},{"location":"descriptors/powershell_powershell/#example-success-log","text":"Results of powershell linter (version 7.1.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/powershell_powershell/ ----------------------------------------------- [SUCCESS] .automation/test/powershell/powershell_good_1.ps1 [SUCCESS] .automation/test/powershell/powershell_good_1.psd1 [SUCCESS] .automation/test/powershell/powershell_good_1.psm1","title":"Example success log"},{"location":"descriptors/powershell_powershell/#example-error-log","text":"Results of powershell linter (version 7.1.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/powershell_powershell/ ----------------------------------------------- [ERROR] .automation/test/powershell/powershell_bad_1.ps1 RuleName Severity ScriptName Line Message -------- -------- ---------- ---- ------- PSAvoidUsingEmptyCatchBlock Warning powershell 12 Empty catch b _bad_1.ps1 lock is used. Please use W rite-Error or throw statem ents in catch blocks. PSAvoidTrailingWhitespace Information powershell 11 Line has trai _bad_1.ps1 ling whitespa ce PSAvoidUsingUsernameAndPasswordPara Error powershell 4 Function 'Bad ms _bad_1.ps1 Function' has both Usernam e and Passwor d parameters. Either set t he type of th e Password pa rameter to Se cureString or replace the Username and Password para meters with a Credential p arameter of t ype PSCredent ial. If using a Credential parameter in PowerShell 4 .0 or earlier , please defi ne a credenti al transforma tion attribut e after the P SCredential t ype attribute . PSAvoidUsingPlainTextForPassword Warning powershell 5 Parameter '$P _bad_1.ps1 assword' shou ld use Secure String, other wise this wil l expose sens itive informa tion. See Con vertTo-Secure String for mo re informatio n. PSUseDeclaredVarsMoreThanAssignment Warning powershell 9 The variable s _bad_1.ps1 'VariableThat IsNotUsedLate r' is assigne d but never u sed. [ERROR] .automation/test/powershell/powershell_bad_1.psd1 RuleName Severity ScriptName Line Message -------- -------- ---------- ---- ------- TerminatorExpectedAtEndOfString ParseError powershell 2 The string is _bad_1.psd missing the 1 terminator: ' . MissingEndCurlyBrace ParseError powershell 1 Missing closi _bad_1.psd ng '}' in sta 1 tement block or type defin ition. [ERROR] .automation/test/powershell/powershell_bad_1.psm1 RuleName Severity ScriptName Line Message -------- -------- ---------- ---- ------- TerminatorExpectedAtEndOfString ParseError powershell 1 The string is _bad_1.psm missing the 1 terminator: \" .","title":"Example error log"},{"location":"descriptors/protobuf/","text":"PROTOBUF Linters Linter Configuration key protolint PROTOBUF Linted files File extensions: .proto Configuration in Mega-Linter Variable Description Default value PROTOBUF_FILTER_REGEX_INCLUDE Custom regex including filter PROTOBUF_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All PROTOBUF linters"},{"location":"descriptors/protobuf/#protobuf","text":"","title":"PROTOBUF"},{"location":"descriptors/protobuf/#linters","text":"Linter Configuration key protolint PROTOBUF","title":"Linters"},{"location":"descriptors/protobuf/#linted-files","text":"File extensions: .proto","title":"Linted files"},{"location":"descriptors/protobuf/#configuration-in-mega-linter","text":"Variable Description Default value PROTOBUF_FILTER_REGEX_INCLUDE Custom regex including filter PROTOBUF_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/protobuf_protolint/","text":"protolint protolint documentation Version in Mega-Linter: 0.26.1 Visit Official Web Site See How to configure protolint rules If custom .protolintrc.yml is not found, .protolintrc.yml will be used See Index of problems detected by protolint Configuration in Mega-Linter Enable protolint by adding PROTOBUF_PROTOLINT in ENABLE_LINTERS variable Disable protolint by adding PROTOBUF_PROTOLINT in DISABLE_LINTERS variable Enable auto-fixes by adding PROTOBUF_PROTOLINT in APPLY_FIXES variable Variable Description Default value PROTOBUF_PROTOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PROTOBUF_PROTOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".proto\"] PROTOBUF_PROTOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PROTOBUF_PROTOLINT_FILE_NAME protolint configuration file name Use LINTER_DEFAULT to let the linter find it .protolintrc.yml PROTOBUF_PROTOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PROTOBUF_PROTOLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use protolint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA Protocol Buffer Linter Visual Studio Code VsCode Protolint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .proto Example calls protolint lint myfile.proto protolint lint --config_path .protolintrc.yml myfile.proto protolint lint -fix --config_path .protolintrc.yml myfile.proto Help content Usage of lint: -config_dir_path string path/to/the_directory_including_protolint.yaml -config_path string path/to/protolint.yaml. Note that if both are set, config_dir_path is ignored. -fix mode that the command line can automatically fix some of the problems -no-error-on-unmatched-pattern exits with 0 when no file is matched -output_file string path/to/output.txt -plugin value plugins to provide custom lint rule set. Note that it's necessary to specify it as path format' -reporter value formatter to output results in the specific format. Available reporters are \"plain\"(default), \"junit\", \"json\", and \"unix\". -v verbose output that includes parsing process details Installation on mega-linter Docker image Dockerfile commands : FROM yoheimuta/protolint:latest as protolint COPY --from=protolint /usr/local/bin/protolint /usr/bin/ Example success log Results of protolint linter (version 0.26.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/protobuf_protolint/ ----------------------------------------------- [SUCCESS] .automation/test/protobuf/protobuf_good_1.proto Example error log Results of protolint linter (version 0.26.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/protobuf_protolint/ ----------------------------------------------- [ERROR] .automation/test/protobuf/protobuf_bad_1.proto [.automation/test/protobuf/protobuf_bad_1.proto:8:1] The order of Import is invalid. Check if the file is ordered in the correct manner. [.automation/test/protobuf/protobuf_bad_1.proto:18:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:19:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:20:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:21:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:24:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:26:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:28:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:25:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:27:7] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:29:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:30:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:31:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:34:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:47:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:3:1] The line length is 91, but it must be shorter than 80 [.automation/test/protobuf/protobuf_bad_1.proto:4:1] Package name \"examplePb\" must only contains lowercase letters, digits and/or periods. [.automation/test/protobuf/protobuf_bad_1.proto:8:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:9:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:14:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:15:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:19:5] EnumField name \"UNKNOWN\" with zero value should have the suffix \"UNSPECIFIED\" [.automation/test/protobuf/protobuf_bad_1.proto:17:1] Enum name \"enumAllowingAlias\" must be UpperCamelCase [.automation/test/protobuf/protobuf_bad_1.proto:36:3] Field \"inner_message\" should avoid required for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:37:3] Group \"Result\" should be avoided for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:40:3] Group \"Result\" should be avoided for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:43:3] Group \"Regular\" should be avoided for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:29:5] Repeated field name \"inner_message\" must be pluralized name \"inner_messages\" [.automation/test/protobuf/protobuf_bad_1.proto:40:3] Repeated group name \"Result\" must be pluralized name \"Results\" [.automation/test/protobuf/protobuf_bad_1.proto:42:3] Repeated field name \"paper\" must be pluralized name \"papers\" [.automation/test/protobuf/protobuf_bad_1.proto:43:3] Repeated group name \"Regular\" must be pluralized name \"Regulars\" [.automation/test/protobuf/protobuf_bad_1.proto:23:1] Message name \"outer\" must be UpperCamelCase [.automation/test/protobuf/protobuf_bad_1.proto:26:5] Message name \"inner\" must be UpperCamelCase [.automation/test/protobuf/protobuf_bad_1.proto:47:5] RPC name \"search\" must be UpperCamelCase","title":"protolint"},{"location":"descriptors/protobuf_protolint/#protolint","text":"","title":"protolint"},{"location":"descriptors/protobuf_protolint/#protolint-documentation","text":"Version in Mega-Linter: 0.26.1 Visit Official Web Site See How to configure protolint rules If custom .protolintrc.yml is not found, .protolintrc.yml will be used See Index of problems detected by protolint","title":"protolint documentation"},{"location":"descriptors/protobuf_protolint/#configuration-in-mega-linter","text":"Enable protolint by adding PROTOBUF_PROTOLINT in ENABLE_LINTERS variable Disable protolint by adding PROTOBUF_PROTOLINT in DISABLE_LINTERS variable Enable auto-fixes by adding PROTOBUF_PROTOLINT in APPLY_FIXES variable Variable Description Default value PROTOBUF_PROTOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PROTOBUF_PROTOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".proto\"] PROTOBUF_PROTOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PROTOBUF_PROTOLINT_FILE_NAME protolint configuration file name Use LINTER_DEFAULT to let the linter find it .protolintrc.yml PROTOBUF_PROTOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PROTOBUF_PROTOLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/protobuf_protolint/#ide-integration","text":"Use protolint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA Protocol Buffer Linter Visual Studio Code VsCode Protolint","title":"IDE Integration"},{"location":"descriptors/protobuf_protolint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/protobuf_protolint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/protobuf_protolint/#how-are-identified-applicable-files","text":"File extensions: .proto","title":"How are identified applicable files"},{"location":"descriptors/protobuf_protolint/#example-calls","text":"protolint lint myfile.proto protolint lint --config_path .protolintrc.yml myfile.proto protolint lint -fix --config_path .protolintrc.yml myfile.proto","title":"Example calls"},{"location":"descriptors/protobuf_protolint/#help-content","text":"Usage of lint: -config_dir_path string path/to/the_directory_including_protolint.yaml -config_path string path/to/protolint.yaml. Note that if both are set, config_dir_path is ignored. -fix mode that the command line can automatically fix some of the problems -no-error-on-unmatched-pattern exits with 0 when no file is matched -output_file string path/to/output.txt -plugin value plugins to provide custom lint rule set. Note that it's necessary to specify it as path format' -reporter value formatter to output results in the specific format. Available reporters are \"plain\"(default), \"junit\", \"json\", and \"unix\". -v verbose output that includes parsing process details","title":"Help content"},{"location":"descriptors/protobuf_protolint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM yoheimuta/protolint:latest as protolint COPY --from=protolint /usr/local/bin/protolint /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/protobuf_protolint/#example-success-log","text":"Results of protolint linter (version 0.26.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/protobuf_protolint/ ----------------------------------------------- [SUCCESS] .automation/test/protobuf/protobuf_good_1.proto","title":"Example success log"},{"location":"descriptors/protobuf_protolint/#example-error-log","text":"Results of protolint linter (version 0.26.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/protobuf_protolint/ ----------------------------------------------- [ERROR] .automation/test/protobuf/protobuf_bad_1.proto [.automation/test/protobuf/protobuf_bad_1.proto:8:1] The order of Import is invalid. Check if the file is ordered in the correct manner. [.automation/test/protobuf/protobuf_bad_1.proto:18:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:19:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:20:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:21:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:24:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:26:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:28:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:25:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:27:7] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:29:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:30:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:31:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:34:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:47:5] Found an incorrect indentation style \" \". \" \" is correct. [.automation/test/protobuf/protobuf_bad_1.proto:3:1] The line length is 91, but it must be shorter than 80 [.automation/test/protobuf/protobuf_bad_1.proto:4:1] Package name \"examplePb\" must only contains lowercase letters, digits and/or periods. [.automation/test/protobuf/protobuf_bad_1.proto:8:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:9:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:14:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:15:1] Imports are not sorted. [.automation/test/protobuf/protobuf_bad_1.proto:19:5] EnumField name \"UNKNOWN\" with zero value should have the suffix \"UNSPECIFIED\" [.automation/test/protobuf/protobuf_bad_1.proto:17:1] Enum name \"enumAllowingAlias\" must be UpperCamelCase [.automation/test/protobuf/protobuf_bad_1.proto:36:3] Field \"inner_message\" should avoid required for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:37:3] Group \"Result\" should be avoided for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:40:3] Group \"Result\" should be avoided for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:43:3] Group \"Regular\" should be avoided for proto3 [.automation/test/protobuf/protobuf_bad_1.proto:29:5] Repeated field name \"inner_message\" must be pluralized name \"inner_messages\" [.automation/test/protobuf/protobuf_bad_1.proto:40:3] Repeated group name \"Result\" must be pluralized name \"Results\" [.automation/test/protobuf/protobuf_bad_1.proto:42:3] Repeated field name \"paper\" must be pluralized name \"papers\" [.automation/test/protobuf/protobuf_bad_1.proto:43:3] Repeated group name \"Regular\" must be pluralized name \"Regulars\" [.automation/test/protobuf/protobuf_bad_1.proto:23:1] Message name \"outer\" must be UpperCamelCase [.automation/test/protobuf/protobuf_bad_1.proto:26:5] Message name \"inner\" must be UpperCamelCase [.automation/test/protobuf/protobuf_bad_1.proto:47:5] RPC name \"search\" must be UpperCamelCase","title":"Example error log"},{"location":"descriptors/puppet/","text":"PUPPET Linters Linter Configuration key puppet-lint PUPPET Linted files File extensions: .pp Configuration in Mega-Linter Variable Description Default value PUPPET_FILTER_REGEX_INCLUDE Custom regex including filter PUPPET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All PUPPET linters"},{"location":"descriptors/puppet/#puppet","text":"","title":"PUPPET"},{"location":"descriptors/puppet/#linters","text":"Linter Configuration key puppet-lint PUPPET","title":"Linters"},{"location":"descriptors/puppet/#linted-files","text":"File extensions: .pp","title":"Linted files"},{"location":"descriptors/puppet/#configuration-in-mega-linter","text":"Variable Description Default value PUPPET_FILTER_REGEX_INCLUDE Custom regex including filter PUPPET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/puppet_puppet_lint/","text":"puppet-lint puppet-lint documentation Version in Mega-Linter: 2.4.2 Visit Official Web Site See How to configure puppet-lint rules See How to disable puppet-lint rules in files See Index of problems detected by puppet-lint Configuration in Mega-Linter Enable puppet-lint by adding PUPPET_PUPPET_LINT in ENABLE_LINTERS variable Disable puppet-lint by adding PUPPET_PUPPET_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding PUPPET_PUPPET_LINT in APPLY_FIXES variable Variable Description Default value PUPPET_PUPPET_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PUPPET_PUPPET_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pp\"] PUPPET_PUPPET_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PUPPET_PUPPET_LINT_FILE_NAME puppet-lint configuration file name Use LINTER_DEFAULT to let the linter find it .puppet-lint.rc PUPPET_PUPPET_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PUPPET_PUPPET_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use puppet-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code Puppet VsCode Extension Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .pp Example calls puppet-lint --fail-on-warnings --no-autoloader_layout-check myfile.pp puppet-lint --fail-on-warnings --no-autoloader_layout-check --fix myfile.pp Help content puppet-lint Basic Command Line Usage: puppet-lint [OPTIONS] PATH PATH The path to the Puppet manifest. Option: --version Display the current version. --no-config Do not load default puppet-lint option files. -c, --config FILE Load puppet-lint options from file. --with-context Show where in the manifest the problem is. --with-filename Display the filename before the warning. --fail-on-warnings Return a non-zero exit status for warnings --error-level LEVEL The level of error to return (warning, error or all). --show-ignored Show problems that have been ignored by control comments --relative Compare module layout relative to the module root -l, --load FILE Load a file containing custom puppet-lint checks. --load-from-puppet MODULEPATH Load plugins from the given Puppet module path. -f, --fix Attempt to automatically fix errors --log-format FORMAT Change the log format. Overrides --with-filename. The following placeholders can be used: %{filename} - Filename without path. %{path} - Path as provided to puppet-lint. %{fullpath} - Expanded path to the file. %{line} - Line number. %{column} - Column number. %{kind} - The kind of message (warning, error). %{KIND} - Uppercase version of %{kind}. %{check} - The name of the check. %{message} - The message. --json Log output as JSON --list-checks List available check names. Checks: --only-checks CHECKS A comma separated list of checks that should be run --ignore-paths PATHS A comma separated list of patterns to ignore --no-file_mode-check Skip the file_mode check. --no-ensure_first_param-check Skip the ensure_first_param check. --no-duplicate_params-check Skip the duplicate_params check. --no-unquoted_file_mode-check Skip the unquoted_file_mode check. --no-unquoted_resource_title-check Skip the unquoted_resource_title check. --no-ensure_not_symlink_target-check Skip the ensure_not_symlink_target check. --no-variable_contains_dash-check Skip the variable_contains_dash check. --no-variable_is_lowercase-check Skip the variable_is_lowercase check. --no-names_containing_uppercase-check Skip the names_containing_uppercase check. --no-code_on_top_scope-check Skip the code_on_top_scope check. --code_on_top_scope-check Enable the code_on_top_scope check. --no-arrow_on_right_operand_line-check Skip the arrow_on_right_operand_line check. --no-right_to_left_relationship-check Skip the right_to_left_relationship check. --no-class_inherits_from_params_class-check Skip the class_inherits_from_params_class check. --class_inherits_from_params_class-check Enable the class_inherits_from_params_class check. --no-variable_scope-check Skip the variable_scope check. --no-nested_classes_or_defines-check Skip the nested_classes_or_defines check. --no-autoloader_layout-check Skip the autoloader_layout check. --no-names_containing_dash-check Skip the names_containing_dash check. --no-inherits_across_namespaces-check Skip the inherits_across_namespaces check. --no-parameter_order-check Skip the parameter_order check. --no-documentation-check Skip the documentation check. --no-single_quote_string_with_variables-check Skip the single_quote_string_with_variables check. --no-variables_not_enclosed-check Skip the variables_not_enclosed check. --no-puppet_url_without_modules-check Skip the puppet_url_without_modules check. --no-only_variable_string-check Skip the only_variable_string check. --no-double_quoted_strings-check Skip the double_quoted_strings check. --no-quoted_booleans-check Skip the quoted_booleans check. --quoted_booleans-check Enable the quoted_booleans check. --no-slash_comments-check Skip the slash_comments check. --no-star_comments-check Skip the star_comments check. --no-arrow_alignment-check Skip the arrow_alignment check. --no-140chars-check Skip the 140chars check. --no-80chars-check Skip the 80chars check. --80chars-check Enable the 80chars check. --no-2sp_soft_tabs-check Skip the 2sp_soft_tabs check. --no-hard_tabs-check Skip the hard_tabs check. --no-trailing_whitespace-check Skip the trailing_whitespace check. --no-selector_inside_resource-check Skip the selector_inside_resource check. --no-case_without_default-check Skip the case_without_default check. --no-unquoted_node_name-check Skip the unquoted_node_name check. Installation on mega-linter Docker image GEM packages (Ruby) : puppet-lint Example success log Results of puppet-lint linter (version 2.4.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/puppet_puppet_lint/ ----------------------------------------------- [SUCCESS] .automation/test/puppet/puppet_good_1.pp Example error log Results of puppet-lint linter (version 2.4.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/puppet_puppet_lint/ ----------------------------------------------- [ERROR] .automation/test/puppet/puppet_bad_1.pp WARNING: class not documented on line 1 WARNING: line has more than 140 characters on line 7 WARNING: double quoted string containing no variables on line 4 WARNING: double quoted string containing no variables on line 5","title":"puppet-lint"},{"location":"descriptors/puppet_puppet_lint/#puppet-lint","text":"","title":"puppet-lint"},{"location":"descriptors/puppet_puppet_lint/#puppet-lint-documentation","text":"Version in Mega-Linter: 2.4.2 Visit Official Web Site See How to configure puppet-lint rules See How to disable puppet-lint rules in files See Index of problems detected by puppet-lint","title":"puppet-lint documentation"},{"location":"descriptors/puppet_puppet_lint/#configuration-in-mega-linter","text":"Enable puppet-lint by adding PUPPET_PUPPET_LINT in ENABLE_LINTERS variable Disable puppet-lint by adding PUPPET_PUPPET_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding PUPPET_PUPPET_LINT in APPLY_FIXES variable Variable Description Default value PUPPET_PUPPET_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PUPPET_PUPPET_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pp\"] PUPPET_PUPPET_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PUPPET_PUPPET_LINT_FILE_NAME puppet-lint configuration file name Use LINTER_DEFAULT to let the linter find it .puppet-lint.rc PUPPET_PUPPET_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PUPPET_PUPPET_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/puppet_puppet_lint/#ide-integration","text":"Use puppet-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code Puppet VsCode Extension","title":"IDE Integration"},{"location":"descriptors/puppet_puppet_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/puppet_puppet_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/puppet_puppet_lint/#how-are-identified-applicable-files","text":"File extensions: .pp","title":"How are identified applicable files"},{"location":"descriptors/puppet_puppet_lint/#example-calls","text":"puppet-lint --fail-on-warnings --no-autoloader_layout-check myfile.pp puppet-lint --fail-on-warnings --no-autoloader_layout-check --fix myfile.pp","title":"Example calls"},{"location":"descriptors/puppet_puppet_lint/#help-content","text":"puppet-lint Basic Command Line Usage: puppet-lint [OPTIONS] PATH PATH The path to the Puppet manifest. Option: --version Display the current version. --no-config Do not load default puppet-lint option files. -c, --config FILE Load puppet-lint options from file. --with-context Show where in the manifest the problem is. --with-filename Display the filename before the warning. --fail-on-warnings Return a non-zero exit status for warnings --error-level LEVEL The level of error to return (warning, error or all). --show-ignored Show problems that have been ignored by control comments --relative Compare module layout relative to the module root -l, --load FILE Load a file containing custom puppet-lint checks. --load-from-puppet MODULEPATH Load plugins from the given Puppet module path. -f, --fix Attempt to automatically fix errors --log-format FORMAT Change the log format. Overrides --with-filename. The following placeholders can be used: %{filename} - Filename without path. %{path} - Path as provided to puppet-lint. %{fullpath} - Expanded path to the file. %{line} - Line number. %{column} - Column number. %{kind} - The kind of message (warning, error). %{KIND} - Uppercase version of %{kind}. %{check} - The name of the check. %{message} - The message. --json Log output as JSON --list-checks List available check names. Checks: --only-checks CHECKS A comma separated list of checks that should be run --ignore-paths PATHS A comma separated list of patterns to ignore --no-file_mode-check Skip the file_mode check. --no-ensure_first_param-check Skip the ensure_first_param check. --no-duplicate_params-check Skip the duplicate_params check. --no-unquoted_file_mode-check Skip the unquoted_file_mode check. --no-unquoted_resource_title-check Skip the unquoted_resource_title check. --no-ensure_not_symlink_target-check Skip the ensure_not_symlink_target check. --no-variable_contains_dash-check Skip the variable_contains_dash check. --no-variable_is_lowercase-check Skip the variable_is_lowercase check. --no-names_containing_uppercase-check Skip the names_containing_uppercase check. --no-code_on_top_scope-check Skip the code_on_top_scope check. --code_on_top_scope-check Enable the code_on_top_scope check. --no-arrow_on_right_operand_line-check Skip the arrow_on_right_operand_line check. --no-right_to_left_relationship-check Skip the right_to_left_relationship check. --no-class_inherits_from_params_class-check Skip the class_inherits_from_params_class check. --class_inherits_from_params_class-check Enable the class_inherits_from_params_class check. --no-variable_scope-check Skip the variable_scope check. --no-nested_classes_or_defines-check Skip the nested_classes_or_defines check. --no-autoloader_layout-check Skip the autoloader_layout check. --no-names_containing_dash-check Skip the names_containing_dash check. --no-inherits_across_namespaces-check Skip the inherits_across_namespaces check. --no-parameter_order-check Skip the parameter_order check. --no-documentation-check Skip the documentation check. --no-single_quote_string_with_variables-check Skip the single_quote_string_with_variables check. --no-variables_not_enclosed-check Skip the variables_not_enclosed check. --no-puppet_url_without_modules-check Skip the puppet_url_without_modules check. --no-only_variable_string-check Skip the only_variable_string check. --no-double_quoted_strings-check Skip the double_quoted_strings check. --no-quoted_booleans-check Skip the quoted_booleans check. --quoted_booleans-check Enable the quoted_booleans check. --no-slash_comments-check Skip the slash_comments check. --no-star_comments-check Skip the star_comments check. --no-arrow_alignment-check Skip the arrow_alignment check. --no-140chars-check Skip the 140chars check. --no-80chars-check Skip the 80chars check. --80chars-check Enable the 80chars check. --no-2sp_soft_tabs-check Skip the 2sp_soft_tabs check. --no-hard_tabs-check Skip the hard_tabs check. --no-trailing_whitespace-check Skip the trailing_whitespace check. --no-selector_inside_resource-check Skip the selector_inside_resource check. --no-case_without_default-check Skip the case_without_default check. --no-unquoted_node_name-check Skip the unquoted_node_name check.","title":"Help content"},{"location":"descriptors/puppet_puppet_lint/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : puppet-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/puppet_puppet_lint/#example-success-log","text":"Results of puppet-lint linter (version 2.4.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/puppet_puppet_lint/ ----------------------------------------------- [SUCCESS] .automation/test/puppet/puppet_good_1.pp","title":"Example success log"},{"location":"descriptors/puppet_puppet_lint/#example-error-log","text":"Results of puppet-lint linter (version 2.4.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/puppet_puppet_lint/ ----------------------------------------------- [ERROR] .automation/test/puppet/puppet_bad_1.pp WARNING: class not documented on line 1 WARNING: line has more than 140 characters on line 7 WARNING: double quoted string containing no variables on line 4 WARNING: double quoted string containing no variables on line 5","title":"Example error log"},{"location":"descriptors/python/","text":"PYTHON Linters Linter Configuration key pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT Linted files File extensions: .py Configuration in Mega-Linter Variable Description Default value PYTHON_FILTER_REGEX_INCLUDE Custom regex including filter PYTHON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All PYTHON linters"},{"location":"descriptors/python/#python","text":"","title":"PYTHON"},{"location":"descriptors/python/#linters","text":"Linter Configuration key pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT","title":"Linters"},{"location":"descriptors/python/#linted-files","text":"File extensions: .py","title":"Linted files"},{"location":"descriptors/python/#configuration-in-mega-linter","text":"Variable Description Default value PYTHON_FILTER_REGEX_INCLUDE Custom regex including filter PYTHON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/python_black/","text":"black documentation Version in Mega-Linter: 19.10 Visit Official Web Site See How to configure black rules If custom .python-black is not found, .python-black will be used Configuration in Mega-Linter Enable black by adding PYTHON_BLACK in ENABLE_LINTERS variable Disable black by adding PYTHON_BLACK in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_BLACK in APPLY_FIXES variable Variable Description Default value PYTHON_BLACK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_BLACK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_BLACK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_BLACK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_BLACK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_BLACK_FILE_NAME black configuration file name Use LINTER_DEFAULT to let the linter find it .python-black PYTHON_BLACK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_BLACK_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use black in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom python-black Emacs blacken Emacs reformatter.el Emacs elpy IDEA black Sublime Text sublack Visual Studio Code VsCode Python Extension Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .py Example calls black --diff --check myfile.py black --config .python-black --diff --check myfile.py black --config .python-black myfile.py Help content Usage: black [OPTIONS] [SRC]... The uncompromising code formatter. Options: -c, --code TEXT Format the code passed in as a string. -l, --line-length INTEGER How many characters per line to allow. [default: 88] -t, --target-version [py27|py33|py34|py35|py36|py37|py38] Python versions that should be supported by Black's output. [default: per-file auto- detection] --py36 Allow using Python 3.6-only syntax on all input files. This will put trailing commas in function signatures and calls also after *args and **kwargs. Deprecated; use --target-version instead. [default: per-file auto-detection] --pyi Format all input files like typing stubs regardless of file extension (useful when piping source on standard input). -S, --skip-string-normalization Don't normalize string quotes or prefixes. --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an internal error. --diff Don't write the files back, just output a diff for each file on stdout. --fast / --safe If --fast given, skip temporary sanity checks. [default: --safe] --include TEXT A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: \\.pyi?$] --exclude TEXT A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: /(\\.eggs|\\.git|\\.hg|\\.mypy _cache|\\.nox|\\.tox|\\.venv|\\.svn|_build|buck- out|build|dist)/] -q, --quiet Don't emit non-error messages to stderr. Errors are still emitted; silence those with 2>/dev/null. -v, --verbose Also emit messages to stderr about files that were not changed or were ignored due to --exclude=. --version Show the version and exit. --config FILE Read configuration from PATH. -h, --help Show this message and exit. Installation on mega-linter Docker image PIP packages (Python): black Example success log Results of black linter (version 19.10) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_black/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py All done! \u2728 \ud83c\udf70 \u2728 1 file would be left unchanged. Example error log Results of black linter (version 19.10) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_black/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py error: cannot format .automation/test/python/python_bad_1.py: Cannot parse: 15:23: if github_token is None Oh no! \ud83d\udca5 \ud83d\udc94 \ud83d\udca5 1 file would fail to reformat.","title":"black"},{"location":"descriptors/python_black/#black-documentation","text":"Version in Mega-Linter: 19.10 Visit Official Web Site See How to configure black rules If custom .python-black is not found, .python-black will be used","title":"black documentation"},{"location":"descriptors/python_black/#configuration-in-mega-linter","text":"Enable black by adding PYTHON_BLACK in ENABLE_LINTERS variable Disable black by adding PYTHON_BLACK in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_BLACK in APPLY_FIXES variable Variable Description Default value PYTHON_BLACK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_BLACK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_BLACK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_BLACK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_BLACK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_BLACK_FILE_NAME black configuration file name Use LINTER_DEFAULT to let the linter find it .python-black PYTHON_BLACK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_BLACK_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/python_black/#ide-integration","text":"Use black in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom python-black Emacs blacken Emacs reformatter.el Emacs elpy IDEA black Sublime Text sublack Visual Studio Code VsCode Python Extension","title":"IDE Integration"},{"location":"descriptors/python_black/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/python_black/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_black/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_black/#example-calls","text":"black --diff --check myfile.py black --config .python-black --diff --check myfile.py black --config .python-black myfile.py","title":"Example calls"},{"location":"descriptors/python_black/#help-content","text":"Usage: black [OPTIONS] [SRC]... The uncompromising code formatter. Options: -c, --code TEXT Format the code passed in as a string. -l, --line-length INTEGER How many characters per line to allow. [default: 88] -t, --target-version [py27|py33|py34|py35|py36|py37|py38] Python versions that should be supported by Black's output. [default: per-file auto- detection] --py36 Allow using Python 3.6-only syntax on all input files. This will put trailing commas in function signatures and calls also after *args and **kwargs. Deprecated; use --target-version instead. [default: per-file auto-detection] --pyi Format all input files like typing stubs regardless of file extension (useful when piping source on standard input). -S, --skip-string-normalization Don't normalize string quotes or prefixes. --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an internal error. --diff Don't write the files back, just output a diff for each file on stdout. --fast / --safe If --fast given, skip temporary sanity checks. [default: --safe] --include TEXT A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: \\.pyi?$] --exclude TEXT A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: /(\\.eggs|\\.git|\\.hg|\\.mypy _cache|\\.nox|\\.tox|\\.venv|\\.svn|_build|buck- out|build|dist)/] -q, --quiet Don't emit non-error messages to stderr. Errors are still emitted; silence those with 2>/dev/null. -v, --verbose Also emit messages to stderr about files that were not changed or were ignored due to --exclude=. --version Show the version and exit. --config FILE Read configuration from PATH. -h, --help Show this message and exit.","title":"Help content"},{"location":"descriptors/python_black/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): black","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_black/#example-success-log","text":"Results of black linter (version 19.10) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_black/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py All done! \u2728 \ud83c\udf70 \u2728 1 file would be left unchanged.","title":"Example success log"},{"location":"descriptors/python_black/#example-error-log","text":"Results of black linter (version 19.10) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_black/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py error: cannot format .automation/test/python/python_bad_1.py: Cannot parse: 15:23: if github_token is None Oh no! \ud83d\udca5 \ud83d\udc94 \ud83d\udca5 1 file would fail to reformat.","title":"Example error log"},{"location":"descriptors/python_flake8/","text":"flake8 flake8 documentation Version in Mega-Linter: 3.8.4 Visit Official Web Site See How to configure flake8 rules If custom .flake8 is not found, .flake8 will be used See How to disable flake8 rules in files See Index of problems detected by flake8 Configuration in Mega-Linter Enable flake8 by adding PYTHON_FLAKE8 in ENABLE_LINTERS variable Disable flake8 by adding PYTHON_FLAKE8 in DISABLE_LINTERS variable Variable Description Default value PYTHON_FLAKE8_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_FLAKE8_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_FLAKE8_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_FLAKE8_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_FLAKE8_FILE_NAME flake8 configuration file name Use LINTER_DEFAULT to let the linter find it .flake8 PYTHON_FLAKE8_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_FLAKE8_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use flake8 in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-flake8 IDEA flake8-support Visual Studio Code Native Support Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .py Example calls flake8 myfile.py flake8 --config .flake8 myfile.py Help content usage: flake8 [options] file file ... positional arguments: filename optional arguments: -h, --help show this help message and exit -v, --verbose Print more information about what is happening in flake8. This option is repeatable and will increase verbosity each time it is repeated. --output-file OUTPUT_FILE Redirect report to a file. --append-config APPEND_CONFIG Provide extra config files to parse in addition to the files found by Flake8 by default. These files are the last ones read and so they take the highest precedence when multiple files provide the same option. --config CONFIG Path to the config file that will be the authoritative config source. This will cause Flake8 to ignore all other configuration files. --isolated Ignore all configuration files. --version show program's version number and exit -q, --quiet Report only file names, or nothing. This option is repeatable. --count Print total number of errors and warnings to standard error and set the exit code to 1 if total is not empty. --diff Report changes only within line number ranges in the unified diff provided on standard in by the user. --exclude patterns Comma-separated list of files or directories to exclude. (Default: ['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.eggs', '*.egg']) --extend-exclude patterns Comma-separated list of files or directories to add to the list of excluded ones. --filename patterns Only check for filenames matching the patterns in this comma-separated list. (Default: ['*.py']) --stdin-display-name STDIN_DISPLAY_NAME The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: stdin) --format format Format errors according to the chosen formatter. --hang-closing Hang closing bracket instead of matching indentation of opening bracket's line. --ignore errors Comma-separated list of errors and warnings to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: ['E121', 'E123', 'E126', 'E24', 'W504', 'E226', 'E704', 'W503']) --extend-ignore errors Comma-separated list of errors and warnings to add to the list of ignored ones. For example, ``--extend- ignore=E4,E51,W234``. --per-file-ignores PER_FILE_IGNORES A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options. --max-line-length n Maximum allowed line length for the entirety of this run. (Default: 79) --max-doc-length n Maximum allowed doc line length for the entirety of this run. (Default: None) --select errors Comma-separated list of errors and warnings to enable. For example, ``--select=E4,E51,W234``. (Default: ['E', 'F', 'W', 'C90']) --disable-noqa Disable the effect of \"# noqa\". This will report errors on lines with \"# noqa\" at the end. --show-source Show the source generate each error or warning. --statistics Count errors and warnings. --enable-extensions ENABLE_EXTENSIONS Enable plugins and extensions that are otherwise disabled by default --exit-zero Exit with status code \"0\" even if there are errors. --install-hook {git,mercurial} Install a hook that is run prior to a commit for the supported version control system. -j JOBS, --jobs JOBS Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, \"auto\", will auto-detect the number of processors available to use. (Default: auto) --tee Write to stdout and output-file. --benchmark Print benchmark information about this run of Flake8 --bug-report Print information necessary when preparing a bug report mccabe: --max-complexity MAX_COMPLEXITY McCabe complexity threshold pyflakes: --builtins BUILTINS define more built-ins, comma separated --doctests also check syntax of the doctests --include-in-doctest INCLUDE_IN_DOCTEST Run doctests only on these files --exclude-from-doctest EXCLUDE_FROM_DOCTEST Skip these files when running doctests Installed plugins: mccabe: 0.6.1, pycodestyle: 2.6.0, pyflakes: 2.2.0 Installation on mega-linter Docker image PIP packages (Python): flake8 Example success log Results of flake8 linter (version 3.8.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_flake8/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py Example error log Results of flake8 linter (version 3.8.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_flake8/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py .automation/test/python/python_bad_1.py:6:13: E261 at least two spaces before inline comment .automation/test/python/python_bad_1.py:7:31: E261 at least two spaces before inline comment .automation/test/python/python_bad_1.py:8:16: E261 at least two spaces before inline comment .automation/test/python/python_bad_1.py:11:67: E202 whitespace before ')' .automation/test/python/python_bad_1.py:13:1: E128 continuation line under-indented for visual indent .automation/test/python/python_bad_1.py:15:23: E999 SyntaxError: invalid syntax .automation/test/python/python_bad_1.py:16:5: E113 unexpected indentation .automation/test/python/python_bad_1.py:17:9: E128 continuation line under-indented for visual indent .automation/test/python/python_bad_1.py:18:9: E128 continuation line under-indented for visual indent .automation/test/python/python_bad_1.py:27:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:56:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:66:24: E201 whitespace after '{' .automation/test/python/python_bad_1.py:87:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:110:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:153:1: E305 expected 2 blank lines after class or function definition, found 1 .automation/test/python/python_bad_1.py:156:18: E261 at least two spaces before inline comment","title":"flake8"},{"location":"descriptors/python_flake8/#flake8","text":"","title":"flake8"},{"location":"descriptors/python_flake8/#flake8-documentation","text":"Version in Mega-Linter: 3.8.4 Visit Official Web Site See How to configure flake8 rules If custom .flake8 is not found, .flake8 will be used See How to disable flake8 rules in files See Index of problems detected by flake8","title":"flake8 documentation"},{"location":"descriptors/python_flake8/#configuration-in-mega-linter","text":"Enable flake8 by adding PYTHON_FLAKE8 in ENABLE_LINTERS variable Disable flake8 by adding PYTHON_FLAKE8 in DISABLE_LINTERS variable Variable Description Default value PYTHON_FLAKE8_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_FLAKE8_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_FLAKE8_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_FLAKE8_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_FLAKE8_FILE_NAME flake8 configuration file name Use LINTER_DEFAULT to let the linter find it .flake8 PYTHON_FLAKE8_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_FLAKE8_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/python_flake8/#ide-integration","text":"Use flake8 in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-flake8 IDEA flake8-support Visual Studio Code Native Support","title":"IDE Integration"},{"location":"descriptors/python_flake8/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/python_flake8/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_flake8/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_flake8/#example-calls","text":"flake8 myfile.py flake8 --config .flake8 myfile.py","title":"Example calls"},{"location":"descriptors/python_flake8/#help-content","text":"usage: flake8 [options] file file ... positional arguments: filename optional arguments: -h, --help show this help message and exit -v, --verbose Print more information about what is happening in flake8. This option is repeatable and will increase verbosity each time it is repeated. --output-file OUTPUT_FILE Redirect report to a file. --append-config APPEND_CONFIG Provide extra config files to parse in addition to the files found by Flake8 by default. These files are the last ones read and so they take the highest precedence when multiple files provide the same option. --config CONFIG Path to the config file that will be the authoritative config source. This will cause Flake8 to ignore all other configuration files. --isolated Ignore all configuration files. --version show program's version number and exit -q, --quiet Report only file names, or nothing. This option is repeatable. --count Print total number of errors and warnings to standard error and set the exit code to 1 if total is not empty. --diff Report changes only within line number ranges in the unified diff provided on standard in by the user. --exclude patterns Comma-separated list of files or directories to exclude. (Default: ['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.eggs', '*.egg']) --extend-exclude patterns Comma-separated list of files or directories to add to the list of excluded ones. --filename patterns Only check for filenames matching the patterns in this comma-separated list. (Default: ['*.py']) --stdin-display-name STDIN_DISPLAY_NAME The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: stdin) --format format Format errors according to the chosen formatter. --hang-closing Hang closing bracket instead of matching indentation of opening bracket's line. --ignore errors Comma-separated list of errors and warnings to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: ['E121', 'E123', 'E126', 'E24', 'W504', 'E226', 'E704', 'W503']) --extend-ignore errors Comma-separated list of errors and warnings to add to the list of ignored ones. For example, ``--extend- ignore=E4,E51,W234``. --per-file-ignores PER_FILE_IGNORES A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options. --max-line-length n Maximum allowed line length for the entirety of this run. (Default: 79) --max-doc-length n Maximum allowed doc line length for the entirety of this run. (Default: None) --select errors Comma-separated list of errors and warnings to enable. For example, ``--select=E4,E51,W234``. (Default: ['E', 'F', 'W', 'C90']) --disable-noqa Disable the effect of \"# noqa\". This will report errors on lines with \"# noqa\" at the end. --show-source Show the source generate each error or warning. --statistics Count errors and warnings. --enable-extensions ENABLE_EXTENSIONS Enable plugins and extensions that are otherwise disabled by default --exit-zero Exit with status code \"0\" even if there are errors. --install-hook {git,mercurial} Install a hook that is run prior to a commit for the supported version control system. -j JOBS, --jobs JOBS Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, \"auto\", will auto-detect the number of processors available to use. (Default: auto) --tee Write to stdout and output-file. --benchmark Print benchmark information about this run of Flake8 --bug-report Print information necessary when preparing a bug report mccabe: --max-complexity MAX_COMPLEXITY McCabe complexity threshold pyflakes: --builtins BUILTINS define more built-ins, comma separated --doctests also check syntax of the doctests --include-in-doctest INCLUDE_IN_DOCTEST Run doctests only on these files --exclude-from-doctest EXCLUDE_FROM_DOCTEST Skip these files when running doctests Installed plugins: mccabe: 0.6.1, pycodestyle: 2.6.0, pyflakes: 2.2.0","title":"Help content"},{"location":"descriptors/python_flake8/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): flake8","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_flake8/#example-success-log","text":"Results of flake8 linter (version 3.8.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_flake8/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py","title":"Example success log"},{"location":"descriptors/python_flake8/#example-error-log","text":"Results of flake8 linter (version 3.8.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_flake8/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py .automation/test/python/python_bad_1.py:6:13: E261 at least two spaces before inline comment .automation/test/python/python_bad_1.py:7:31: E261 at least two spaces before inline comment .automation/test/python/python_bad_1.py:8:16: E261 at least two spaces before inline comment .automation/test/python/python_bad_1.py:11:67: E202 whitespace before ')' .automation/test/python/python_bad_1.py:13:1: E128 continuation line under-indented for visual indent .automation/test/python/python_bad_1.py:15:23: E999 SyntaxError: invalid syntax .automation/test/python/python_bad_1.py:16:5: E113 unexpected indentation .automation/test/python/python_bad_1.py:17:9: E128 continuation line under-indented for visual indent .automation/test/python/python_bad_1.py:18:9: E128 continuation line under-indented for visual indent .automation/test/python/python_bad_1.py:27:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:56:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:66:24: E201 whitespace after '{' .automation/test/python/python_bad_1.py:87:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:110:1: E302 expected 2 blank lines, found 1 .automation/test/python/python_bad_1.py:153:1: E305 expected 2 blank lines after class or function definition, found 1 .automation/test/python/python_bad_1.py:156:18: E261 at least two spaces before inline comment","title":"Example error log"},{"location":"descriptors/python_isort/","text":"isort documentation Version in Mega-Linter: 5.6.4 Visit Official Web Site See How to configure isort rules If custom .isort.cfg is not found, .isort.cfg will be used See How to disable isort rules in files Configuration in Mega-Linter Enable isort by adding PYTHON_ISORT in ENABLE_LINTERS variable Disable isort by adding PYTHON_ISORT in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_ISORT in APPLY_FIXES variable Variable Description Default value PYTHON_ISORT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_ISORT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_ISORT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_ISORT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_ISORT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_ISORT_FILE_NAME isort configuration file name Use LINTER_DEFAULT to let the linter find it .isort.cfg PYTHON_ISORT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_ISORT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use isort in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom atom-python-isort Atom atom-isort Emacs py-isort.el Sublime Text isort plugin vim ale vim vim-isort Visual Studio Code VsCode Python Extension Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .py Example calls isort --diff --check --profile black myfile.py isort --diff --check --profile black --settings-file .isort.cfg myfile.py isort --profile black --settings-file .isort.cfg myfile.py Help content usage: isort [-h] [--src SRC_PATHS] [-a ADD_IMPORTS] [--append] [--ac] [--af] [-b KNOWN_STANDARD_LIBRARY] [--extra-builtin EXTRA_STANDARD_LIBRARY] [-c] [--ca] [--cs] [-d] [--df] [--ds] [-e] [-f KNOWN_FUTURE_LIBRARY] [--fas] [--fass] [--ff FROM_FIRST] [--fgw [FORCE_GRID_WRAP]] [--fss] [-i INDENT] [-j JOBS] [--lai LINES_AFTER_IMPORTS] [--lbt LINES_BETWEEN_TYPES] [--le LINE_ENDING] [--ls] [--lss] [-m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}] [-n] [--nis] [--nlb NO_LINES_BEFORE] [-o KNOWN_THIRD_PARTY] [--ot] [--dt] [-p KNOWN_FIRST_PARTY] [--known-local-folder KNOWN_LOCAL_FOLDER] [-q] [--rm REMOVE_IMPORTS] [--rr] [-s SKIP] [--sd DEFAULT_SECTION] [--sg SKIP_GLOB] [--gitignore] [--sl] [--nsl SINGLE_LINE_EXCLUSIONS] [--sp SETTINGS_PATH] [-t FORCE_TO_TOP] [--tc] [--up] [-V] [-v] [--virtual-env VIRTUAL_ENV] [--conda-env CONDA_ENV] [--vn] [-l LINE_LENGTH] [--wl WRAP_LENGTH] [--ws] [--case-sensitive] [--filter-files] [--py {all,2,27,3,35,36,37,38,39,auto}] [--profile PROFILE] [--interactive] [--old-finders] [--show-config] [--show-files] [--honor-noqa] [--remove-redundant-aliases] [--color] [--float-to-top] [--treat-comment-as-code TREAT_COMMENTS_AS_CODE] [--treat-all-comment-as-code] [--formatter FORMATTER] [--ext SUPPORTED_EXTENSIONS] [--blocked-extension BLOCKED_EXTENSIONS] [--dedup-headings] [--only-sections] [--only-modified] [files [files ...]] Sort Python import definitions alphabetically within logical sections. Run with no arguments to see a quick start guide, otherwise, one or more files/directories/stdin must be provided. Use `-` as the first argument to represent stdin. Use --interactive to use the pre 5.0.0 interactive behavior. If you've used isort 4 but are new to isort 5, see the upgrading guide:https://pycqa.github.io/isort/docs/upgrade_guides/5.0.0/. positional arguments: files One or more Python source files that need their imports sorted. optional arguments: -h, --help show this help message and exit --src SRC_PATHS, --src-path SRC_PATHS Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). -a ADD_IMPORTS, --add-import ADD_IMPORTS Adds the specified import line to all files, automatically determining correct placement. --append, --append-only Only adds the imports specified in --add-imports if the file contains existing imports. --ac, --atomic Ensures the output doesn't save if the resulting file contains syntax errors. --af, --force-adds Forces import adds even if the original file is empty. -b KNOWN_STANDARD_LIBRARY, --builtin KNOWN_STANDARD_LIBRARY Force isort to recognize a module as part of Python's standard library. --extra-builtin EXTRA_STANDARD_LIBRARY Extra modules to be included in the list of ones in Python's standard library. -c, --check-only, --check Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. --ca, --combine-as Combines as imports on the same line. --cs, --combine-star Ensures that if a star import is present, nothing else is imported from that namespace. -d, --stdout Force resulting output to stdout, instead of in-place. --df, --diff Prints a diff of all the changes isort would make to a file, instead of changing it in place --ds, --no-sections Put all imports into the same section bucket -e, --balanced Balances wrapping to produce the most consistent line length possible -f KNOWN_FUTURE_LIBRARY, --future KNOWN_FUTURE_LIBRARY Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of __future__ handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six a better option is to create a another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom-sections-and- ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463. --fas, --force-alphabetical-sort Force all imports to be sorted as a single section --fass, --force-alphabetical-sort-within-sections Force all imports to be sorted alphabetically within a section --ff FROM_FIRST, --from-first FROM_FIRST Switches the typical ordering preference, showing from imports first then straight ones. --fgw [FORCE_GRID_WRAP], --force-grid-wrap [FORCE_GRID_WRAP] Force number of from imports (defaults to 2 when passed as CLI flag without value)to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered. --fss, --force-sort-within-sections Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style. -i INDENT, --indent INDENT String to place for indents defaults to \" \" (4 spaces). -j JOBS, --jobs JOBS Number of files to process in parallel. --lai LINES_AFTER_IMPORTS, --lines-after-imports LINES_AFTER_IMPORTS --lbt LINES_BETWEEN_TYPES, --lines-between-types LINES_BETWEEN_TYPES --le LINE_ENDING, --line-ending LINE_ENDING Forces line endings to the specified value. If not set, values will be guessed per-file. --ls, --length-sort Sort imports by their string length. --lss, --length-sort-straight Sort straight imports by their string length. Similar to `length_sort` but applies only to straight imports and doesn't affect from imports. -m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}, --multi-line {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11} Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-vert-grid-grouped-no-comma, 7-noqa, 8-vertical- hanging-indent-bracket, 9-vertical-prefix-from-module- import, 10-hanging-indent-with-parentheses). -n, --ensure-newline-before-comments Inserts a blank line before a comment following an import. --nis, --no-inline-sort Leaves `from` imports with multiple imports 'as-is' (e.g. `from foo import a, c ,b`). --nlb NO_LINES_BEFORE, --no-lines-before NO_LINES_BEFORE Sections which should not be split with previous by empty lines -o KNOWN_THIRD_PARTY, --thirdparty KNOWN_THIRD_PARTY Force isort to recognize a module as being part of a third party library. --ot, --order-by-type Order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the `--dont-order-by-type` option will turn this off. --dt, --dont-order-by-type Don't order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using `--order-by-type`. -p KNOWN_FIRST_PARTY, --project KNOWN_FIRST_PARTY Force isort to recognize a module as being part of the current python project. --known-local-folder KNOWN_LOCAL_FOLDER Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module). -q, --quiet Shows extra quiet output, only errors are outputted. --rm REMOVE_IMPORTS, --remove-import REMOVE_IMPORTS Removes the specified import from all files. --rr, --reverse-relative Reverse order of relative imports. -s SKIP, --skip SKIP Files that sort imports should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. --sd DEFAULT_SECTION, --section-default DEFAULT_SECTION Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER') --sg SKIP_GLOB, --skip-glob SKIP_GLOB Files that sort imports should skip over. --gitignore, --skip-gitignore Treat project as a git repository and ignore files listed in .gitignore --sl, --force-single-line-imports Forces all from imports to appear on their own line --nsl SINGLE_LINE_EXCLUSIONS, --single-line-exclusions SINGLE_LINE_EXCLUSIONS One or more modules to exclude from the single line rule. --sp SETTINGS_PATH, --settings-path SETTINGS_PATH, --settings-file SETTINGS_PATH, --settings SETTINGS_PATH Explicitly set the settings path or file instead of auto determining based on file location. -t FORCE_TO_TOP, --top FORCE_TO_TOP Force specific imports to the top of their appropriate section. --tc, --trailing-comma Includes a trailing comma on multi line imports that include parentheses. --up, --use-parentheses Use parentheses for line continuation on length limit instead of slashes. **NOTE**: This is separate from wrap modes, and only affects how individual lines that are too long get continued, not sections of multiple imports. -V, --version Displays the currently installed version of isort. -v, --verbose Shows verbose output, such as when files are skipped or when a check is successful. --virtual-env VIRTUAL_ENV Virtual environment to use for determining whether a package is third-party --conda-env CONDA_ENV Conda environment to use for determining whether a package is third-party --vn, --version-number Returns just the current version number without the logo -l LINE_LENGTH, -w LINE_LENGTH, --line-length LINE_LENGTH, --line-width LINE_LENGTH The max length of an import line (used for wrapping long imports). --wl WRAP_LENGTH, --wrap-length WRAP_LENGTH Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length. --ws, --ignore-whitespace Tells isort to ignore whitespace differences when --check-only is being used. --case-sensitive Tells isort to include casing when sorting module names --filter-files Tells isort to filter files even when they are explicitly passed in as part of the CLI command. --py {all,2,27,3,35,36,37,38,39,auto}, --python-version {all,2,27,3,35,36,37,38,39,auto} Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 38) will be used. --profile PROFILE Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug. As well as any shared profiles. --interactive Tells isort to apply changes interactively. --old-finders, --magic-placement Use the old deprecated finder logic that relies on environment introspection magic. --show-config See isort's determined config, as well as sources of config options. --show-files See the files isort will be ran against with the current config options. --honor-noqa Tells isort to honor noqa comments to enforce skipping those comments. --remove-redundant-aliases Tells isort to remove redundant aliases from imports, such as `import os as os`. This defaults to `False` simply because some projects use these seemingly useless aliases to signify intent and change behaviour. --color Tells isort to use color in terminal output. --float-to-top Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching. *NOTE*: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty. --treat-comment-as-code TREAT_COMMENTS_AS_CODE Tells isort to treat the specified single line comment(s) as if they are code. --treat-all-comment-as-code Tells isort to treat all single line comments as if they are code. --formatter FORMATTER Specifies the name of a formatting plugin to use when producing output. --ext SUPPORTED_EXTENSIONS, --extension SUPPORTED_EXTENSIONS, --supported-extension SUPPORTED_EXTENSIONS Specifies what extensions isort can be ran against. --blocked-extension BLOCKED_EXTENSIONS Specifies what extensions isort can never be ran against. --dedup-headings Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set. --only-sections, --os Causes imports to be sorted only based on their sections like STDLIB,THIRDPARTY etc. Imports are unaltered and keep their relative positions within the different sections. --only-modified, --om Suppresses verbose output for non-modified files. Installation on mega-linter Docker image PIP packages (Python): isort black Example success log Results of isort linter (version 5.6.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_isort/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py Example error log Results of isort linter (version 5.6.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_isort/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py ERROR: .automation/test/python/python_bad_1.py Imports are incorrectly sorted and/or formatted. --- .automation/test/python/python_bad_1.py:before 2020-12-05 12:08:47.707389 +++ .automation/test/python/python_bad_1.py:after 2020-12-05 12:34:28.504872 @@ -1,11 +1,11 @@ import json +import sys from os import getenv, path from pprint import pprint -import sys -import click # pylint: disable=import-error -from dotenv import load_dotenv # pylint: disable=import-error -import requests # pylint: disable=import-error +import click # pylint: disable=import-error +import requests # pylint: disable=import-error +from dotenv import load_dotenv # pylint: disable=import-error env = load_dotenv() api_url = getenv(API_URL, default='https://api.github.com/graphql' )","title":"isort"},{"location":"descriptors/python_isort/#isort-documentation","text":"Version in Mega-Linter: 5.6.4 Visit Official Web Site See How to configure isort rules If custom .isort.cfg is not found, .isort.cfg will be used See How to disable isort rules in files","title":"isort documentation"},{"location":"descriptors/python_isort/#configuration-in-mega-linter","text":"Enable isort by adding PYTHON_ISORT in ENABLE_LINTERS variable Disable isort by adding PYTHON_ISORT in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_ISORT in APPLY_FIXES variable Variable Description Default value PYTHON_ISORT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_ISORT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_ISORT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_ISORT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_ISORT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_ISORT_FILE_NAME isort configuration file name Use LINTER_DEFAULT to let the linter find it .isort.cfg PYTHON_ISORT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_ISORT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/python_isort/#ide-integration","text":"Use isort in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom atom-python-isort Atom atom-isort Emacs py-isort.el Sublime Text isort plugin vim ale vim vim-isort Visual Studio Code VsCode Python Extension","title":"IDE Integration"},{"location":"descriptors/python_isort/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/python_isort/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_isort/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_isort/#example-calls","text":"isort --diff --check --profile black myfile.py isort --diff --check --profile black --settings-file .isort.cfg myfile.py isort --profile black --settings-file .isort.cfg myfile.py","title":"Example calls"},{"location":"descriptors/python_isort/#help-content","text":"usage: isort [-h] [--src SRC_PATHS] [-a ADD_IMPORTS] [--append] [--ac] [--af] [-b KNOWN_STANDARD_LIBRARY] [--extra-builtin EXTRA_STANDARD_LIBRARY] [-c] [--ca] [--cs] [-d] [--df] [--ds] [-e] [-f KNOWN_FUTURE_LIBRARY] [--fas] [--fass] [--ff FROM_FIRST] [--fgw [FORCE_GRID_WRAP]] [--fss] [-i INDENT] [-j JOBS] [--lai LINES_AFTER_IMPORTS] [--lbt LINES_BETWEEN_TYPES] [--le LINE_ENDING] [--ls] [--lss] [-m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}] [-n] [--nis] [--nlb NO_LINES_BEFORE] [-o KNOWN_THIRD_PARTY] [--ot] [--dt] [-p KNOWN_FIRST_PARTY] [--known-local-folder KNOWN_LOCAL_FOLDER] [-q] [--rm REMOVE_IMPORTS] [--rr] [-s SKIP] [--sd DEFAULT_SECTION] [--sg SKIP_GLOB] [--gitignore] [--sl] [--nsl SINGLE_LINE_EXCLUSIONS] [--sp SETTINGS_PATH] [-t FORCE_TO_TOP] [--tc] [--up] [-V] [-v] [--virtual-env VIRTUAL_ENV] [--conda-env CONDA_ENV] [--vn] [-l LINE_LENGTH] [--wl WRAP_LENGTH] [--ws] [--case-sensitive] [--filter-files] [--py {all,2,27,3,35,36,37,38,39,auto}] [--profile PROFILE] [--interactive] [--old-finders] [--show-config] [--show-files] [--honor-noqa] [--remove-redundant-aliases] [--color] [--float-to-top] [--treat-comment-as-code TREAT_COMMENTS_AS_CODE] [--treat-all-comment-as-code] [--formatter FORMATTER] [--ext SUPPORTED_EXTENSIONS] [--blocked-extension BLOCKED_EXTENSIONS] [--dedup-headings] [--only-sections] [--only-modified] [files [files ...]] Sort Python import definitions alphabetically within logical sections. Run with no arguments to see a quick start guide, otherwise, one or more files/directories/stdin must be provided. Use `-` as the first argument to represent stdin. Use --interactive to use the pre 5.0.0 interactive behavior. If you've used isort 4 but are new to isort 5, see the upgrading guide:https://pycqa.github.io/isort/docs/upgrade_guides/5.0.0/. positional arguments: files One or more Python source files that need their imports sorted. optional arguments: -h, --help show this help message and exit --src SRC_PATHS, --src-path SRC_PATHS Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). -a ADD_IMPORTS, --add-import ADD_IMPORTS Adds the specified import line to all files, automatically determining correct placement. --append, --append-only Only adds the imports specified in --add-imports if the file contains existing imports. --ac, --atomic Ensures the output doesn't save if the resulting file contains syntax errors. --af, --force-adds Forces import adds even if the original file is empty. -b KNOWN_STANDARD_LIBRARY, --builtin KNOWN_STANDARD_LIBRARY Force isort to recognize a module as part of Python's standard library. --extra-builtin EXTRA_STANDARD_LIBRARY Extra modules to be included in the list of ones in Python's standard library. -c, --check-only, --check Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. --ca, --combine-as Combines as imports on the same line. --cs, --combine-star Ensures that if a star import is present, nothing else is imported from that namespace. -d, --stdout Force resulting output to stdout, instead of in-place. --df, --diff Prints a diff of all the changes isort would make to a file, instead of changing it in place --ds, --no-sections Put all imports into the same section bucket -e, --balanced Balances wrapping to produce the most consistent line length possible -f KNOWN_FUTURE_LIBRARY, --future KNOWN_FUTURE_LIBRARY Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of __future__ handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six a better option is to create a another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom-sections-and- ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463. --fas, --force-alphabetical-sort Force all imports to be sorted as a single section --fass, --force-alphabetical-sort-within-sections Force all imports to be sorted alphabetically within a section --ff FROM_FIRST, --from-first FROM_FIRST Switches the typical ordering preference, showing from imports first then straight ones. --fgw [FORCE_GRID_WRAP], --force-grid-wrap [FORCE_GRID_WRAP] Force number of from imports (defaults to 2 when passed as CLI flag without value)to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered. --fss, --force-sort-within-sections Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style. -i INDENT, --indent INDENT String to place for indents defaults to \" \" (4 spaces). -j JOBS, --jobs JOBS Number of files to process in parallel. --lai LINES_AFTER_IMPORTS, --lines-after-imports LINES_AFTER_IMPORTS --lbt LINES_BETWEEN_TYPES, --lines-between-types LINES_BETWEEN_TYPES --le LINE_ENDING, --line-ending LINE_ENDING Forces line endings to the specified value. If not set, values will be guessed per-file. --ls, --length-sort Sort imports by their string length. --lss, --length-sort-straight Sort straight imports by their string length. Similar to `length_sort` but applies only to straight imports and doesn't affect from imports. -m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}, --multi-line {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11} Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-vert-grid-grouped-no-comma, 7-noqa, 8-vertical- hanging-indent-bracket, 9-vertical-prefix-from-module- import, 10-hanging-indent-with-parentheses). -n, --ensure-newline-before-comments Inserts a blank line before a comment following an import. --nis, --no-inline-sort Leaves `from` imports with multiple imports 'as-is' (e.g. `from foo import a, c ,b`). --nlb NO_LINES_BEFORE, --no-lines-before NO_LINES_BEFORE Sections which should not be split with previous by empty lines -o KNOWN_THIRD_PARTY, --thirdparty KNOWN_THIRD_PARTY Force isort to recognize a module as being part of a third party library. --ot, --order-by-type Order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the `--dont-order-by-type` option will turn this off. --dt, --dont-order-by-type Don't order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using `--order-by-type`. -p KNOWN_FIRST_PARTY, --project KNOWN_FIRST_PARTY Force isort to recognize a module as being part of the current python project. --known-local-folder KNOWN_LOCAL_FOLDER Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module). -q, --quiet Shows extra quiet output, only errors are outputted. --rm REMOVE_IMPORTS, --remove-import REMOVE_IMPORTS Removes the specified import from all files. --rr, --reverse-relative Reverse order of relative imports. -s SKIP, --skip SKIP Files that sort imports should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. --sd DEFAULT_SECTION, --section-default DEFAULT_SECTION Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER') --sg SKIP_GLOB, --skip-glob SKIP_GLOB Files that sort imports should skip over. --gitignore, --skip-gitignore Treat project as a git repository and ignore files listed in .gitignore --sl, --force-single-line-imports Forces all from imports to appear on their own line --nsl SINGLE_LINE_EXCLUSIONS, --single-line-exclusions SINGLE_LINE_EXCLUSIONS One or more modules to exclude from the single line rule. --sp SETTINGS_PATH, --settings-path SETTINGS_PATH, --settings-file SETTINGS_PATH, --settings SETTINGS_PATH Explicitly set the settings path or file instead of auto determining based on file location. -t FORCE_TO_TOP, --top FORCE_TO_TOP Force specific imports to the top of their appropriate section. --tc, --trailing-comma Includes a trailing comma on multi line imports that include parentheses. --up, --use-parentheses Use parentheses for line continuation on length limit instead of slashes. **NOTE**: This is separate from wrap modes, and only affects how individual lines that are too long get continued, not sections of multiple imports. -V, --version Displays the currently installed version of isort. -v, --verbose Shows verbose output, such as when files are skipped or when a check is successful. --virtual-env VIRTUAL_ENV Virtual environment to use for determining whether a package is third-party --conda-env CONDA_ENV Conda environment to use for determining whether a package is third-party --vn, --version-number Returns just the current version number without the logo -l LINE_LENGTH, -w LINE_LENGTH, --line-length LINE_LENGTH, --line-width LINE_LENGTH The max length of an import line (used for wrapping long imports). --wl WRAP_LENGTH, --wrap-length WRAP_LENGTH Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length. --ws, --ignore-whitespace Tells isort to ignore whitespace differences when --check-only is being used. --case-sensitive Tells isort to include casing when sorting module names --filter-files Tells isort to filter files even when they are explicitly passed in as part of the CLI command. --py {all,2,27,3,35,36,37,38,39,auto}, --python-version {all,2,27,3,35,36,37,38,39,auto} Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 38) will be used. --profile PROFILE Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug. As well as any shared profiles. --interactive Tells isort to apply changes interactively. --old-finders, --magic-placement Use the old deprecated finder logic that relies on environment introspection magic. --show-config See isort's determined config, as well as sources of config options. --show-files See the files isort will be ran against with the current config options. --honor-noqa Tells isort to honor noqa comments to enforce skipping those comments. --remove-redundant-aliases Tells isort to remove redundant aliases from imports, such as `import os as os`. This defaults to `False` simply because some projects use these seemingly useless aliases to signify intent and change behaviour. --color Tells isort to use color in terminal output. --float-to-top Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching. *NOTE*: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty. --treat-comment-as-code TREAT_COMMENTS_AS_CODE Tells isort to treat the specified single line comment(s) as if they are code. --treat-all-comment-as-code Tells isort to treat all single line comments as if they are code. --formatter FORMATTER Specifies the name of a formatting plugin to use when producing output. --ext SUPPORTED_EXTENSIONS, --extension SUPPORTED_EXTENSIONS, --supported-extension SUPPORTED_EXTENSIONS Specifies what extensions isort can be ran against. --blocked-extension BLOCKED_EXTENSIONS Specifies what extensions isort can never be ran against. --dedup-headings Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set. --only-sections, --os Causes imports to be sorted only based on their sections like STDLIB,THIRDPARTY etc. Imports are unaltered and keep their relative positions within the different sections. --only-modified, --om Suppresses verbose output for non-modified files.","title":"Help content"},{"location":"descriptors/python_isort/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): isort black","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_isort/#example-success-log","text":"Results of isort linter (version 5.6.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_isort/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py","title":"Example success log"},{"location":"descriptors/python_isort/#example-error-log","text":"Results of isort linter (version 5.6.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_isort/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py ERROR: .automation/test/python/python_bad_1.py Imports are incorrectly sorted and/or formatted. --- .automation/test/python/python_bad_1.py:before 2020-12-05 12:08:47.707389 +++ .automation/test/python/python_bad_1.py:after 2020-12-05 12:34:28.504872 @@ -1,11 +1,11 @@ import json +import sys from os import getenv, path from pprint import pprint -import sys -import click # pylint: disable=import-error -from dotenv import load_dotenv # pylint: disable=import-error -import requests # pylint: disable=import-error +import click # pylint: disable=import-error +import requests # pylint: disable=import-error +from dotenv import load_dotenv # pylint: disable=import-error env = load_dotenv() api_url = getenv(API_URL, default='https://api.github.com/graphql' )","title":"Example error log"},{"location":"descriptors/python_pylint/","text":"pylint documentation Version in Mega-Linter: 2.6.0 Visit Official Web Site See How to configure pylint rules If custom .python-lint is not found, .python-lint will be used See How to disable pylint rules in files See Index of problems detected by pylint Configuration in Mega-Linter Enable pylint by adding PYTHON_PYLINT in ENABLE_LINTERS variable Disable pylint by adding PYTHON_PYLINT in DISABLE_LINTERS variable Variable Description Default value PYTHON_PYLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_PYLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_PYLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_PYLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_PYLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_PYLINT_FILE_NAME pylint configuration file name Use LINTER_DEFAULT to let the linter find it .python-lint PYTHON_PYLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_PYLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use pylint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Eclipse PyLint IDEA PyCharm (Native Support) vim pylint.vim visual_studio Native Support Visual Studio Code Native Support Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .py Example calls pylint myfile.py pylint --rcfile .python-lint myfile.py Help content Usage: pylint [options] Options: -h, --help show this help message and exit --long-help more verbose help. Master: --init-hook=<code> Python code to execute, usually for sys.path manipulation such as pygtk.require(). -E, --errors-only In error mode, checkers without error messages are disabled and for others, only the ERROR messages are displayed, and no reports are done by default. --py3k In Python 3 porting mode, all checkers will be disabled and only messages emitted by the porting checker will be displayed. -v, --verbose In verbose mode, extra non-checker-related info will be displayed. --ignore=<file>[,<file>...] Add files or directories to the blacklist. They should be base names, not paths. [current: CVS] --ignore-patterns=<pattern>[,<pattern>...] Add files or directories matching the regex patterns to the blacklist. The regex matches against base names, not paths. [current: none] --persistent=<y_or_n> Pickle collected data for later comparisons. [current: yes] --load-plugins=<modules> List of plugins (as comma separated values of python module names) to load, usually to register additional checkers. [current: none] --fail-under=<score> Specify a score threshold to be exceeded before program exits with error. [current: 10.0] -j <n-processes>, --jobs=<n-processes> Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use. [current: 1] --limit-inference-results=<number-of-results> Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions. [current: 100] --extension-pkg-whitelist=<pkg[,pkg]> A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. [current: none] --suggestion-mode=<yn> When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages. [current: yes] --exit-zero Always return a 0 (non-error) status code, even if lint errors are found. This is primarily useful in continuous integration scripts. --from-stdin Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument. Commands: --rcfile=<file> Specify a configuration file to load. --help-msg=<msg-id> Display a help message for the given message id and exit. The value may be a comma separated list of message ids. --list-msgs Generate pylint's messages. --list-msgs-enabled Display a list of what messages are enabled and disabled with the given configuration. --list-groups List pylint's message groups. --list-conf-levels Generate pylint's confidence levels. --list-extensions List available extensions. --full-documentation Generate pylint's full documentation. --generate-rcfile Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. Messages control: --confidence=<levels> Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED. [current: none] -e <msg ids>, --enable=<msg ids> Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the \"--disable\" option for examples. -d <msg ids>, --disable=<msg ids> Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use \"--disable=all\" to disable everything first and then reenable specific checks. For example, if you want to run only the similarities checker, you can use \"--disable=all --enable=similarities\". If you want to run only the classes checker, but have no Warning level messages displayed, use \"--disable=all --enable=classes --disable=W\". Reports: -f <format>, --output-format=<format> Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass. [current: text] -r <y_or_n>, --reports=<y_or_n> Tells whether to display a full report or only the messages. [current: no] --evaluation=<python_expression> Python expression which should return a score less than or equal to 10. You have access to the variables 'error', 'warning', 'refactor', and 'convention' which contain the number of messages in each category, as well as 'statement' which is the total number of statements analyzed. This score is used by the global evaluation report (RP0004). [current: 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)] -s <y_or_n>, --score=<y_or_n> Activate the evaluation score. [current: yes] --msg-template=<template> Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details. Installation on mega-linter Docker image PIP packages (Python): pylint Example success log Results of pylint linter (version 2.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_pylint/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py Example error log Results of pylint linter (version 2.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_pylint/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py ************* Module python_bad_1 .automation/test/python/python_bad_1.py:15:24: E0001: invalid syntax (<unknown>, line 15) (syntax-error)","title":"pylint"},{"location":"descriptors/python_pylint/#pylint-documentation","text":"Version in Mega-Linter: 2.6.0 Visit Official Web Site See How to configure pylint rules If custom .python-lint is not found, .python-lint will be used See How to disable pylint rules in files See Index of problems detected by pylint","title":"pylint documentation"},{"location":"descriptors/python_pylint/#configuration-in-mega-linter","text":"Enable pylint by adding PYTHON_PYLINT in ENABLE_LINTERS variable Disable pylint by adding PYTHON_PYLINT in DISABLE_LINTERS variable Variable Description Default value PYTHON_PYLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_PYLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file PYTHON_PYLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file PYTHON_PYLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_PYLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_PYLINT_FILE_NAME pylint configuration file name Use LINTER_DEFAULT to let the linter find it .python-lint PYTHON_PYLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules PYTHON_PYLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/python_pylint/#ide-integration","text":"Use pylint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Eclipse PyLint IDEA PyCharm (Native Support) vim pylint.vim visual_studio Native Support Visual Studio Code Native Support","title":"IDE Integration"},{"location":"descriptors/python_pylint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/python_pylint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_pylint/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_pylint/#example-calls","text":"pylint myfile.py pylint --rcfile .python-lint myfile.py","title":"Example calls"},{"location":"descriptors/python_pylint/#help-content","text":"Usage: pylint [options] Options: -h, --help show this help message and exit --long-help more verbose help. Master: --init-hook=<code> Python code to execute, usually for sys.path manipulation such as pygtk.require(). -E, --errors-only In error mode, checkers without error messages are disabled and for others, only the ERROR messages are displayed, and no reports are done by default. --py3k In Python 3 porting mode, all checkers will be disabled and only messages emitted by the porting checker will be displayed. -v, --verbose In verbose mode, extra non-checker-related info will be displayed. --ignore=<file>[,<file>...] Add files or directories to the blacklist. They should be base names, not paths. [current: CVS] --ignore-patterns=<pattern>[,<pattern>...] Add files or directories matching the regex patterns to the blacklist. The regex matches against base names, not paths. [current: none] --persistent=<y_or_n> Pickle collected data for later comparisons. [current: yes] --load-plugins=<modules> List of plugins (as comma separated values of python module names) to load, usually to register additional checkers. [current: none] --fail-under=<score> Specify a score threshold to be exceeded before program exits with error. [current: 10.0] -j <n-processes>, --jobs=<n-processes> Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use. [current: 1] --limit-inference-results=<number-of-results> Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions. [current: 100] --extension-pkg-whitelist=<pkg[,pkg]> A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. [current: none] --suggestion-mode=<yn> When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages. [current: yes] --exit-zero Always return a 0 (non-error) status code, even if lint errors are found. This is primarily useful in continuous integration scripts. --from-stdin Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument. Commands: --rcfile=<file> Specify a configuration file to load. --help-msg=<msg-id> Display a help message for the given message id and exit. The value may be a comma separated list of message ids. --list-msgs Generate pylint's messages. --list-msgs-enabled Display a list of what messages are enabled and disabled with the given configuration. --list-groups List pylint's message groups. --list-conf-levels Generate pylint's confidence levels. --list-extensions List available extensions. --full-documentation Generate pylint's full documentation. --generate-rcfile Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. Messages control: --confidence=<levels> Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED. [current: none] -e <msg ids>, --enable=<msg ids> Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the \"--disable\" option for examples. -d <msg ids>, --disable=<msg ids> Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use \"--disable=all\" to disable everything first and then reenable specific checks. For example, if you want to run only the similarities checker, you can use \"--disable=all --enable=similarities\". If you want to run only the classes checker, but have no Warning level messages displayed, use \"--disable=all --enable=classes --disable=W\". Reports: -f <format>, --output-format=<format> Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass. [current: text] -r <y_or_n>, --reports=<y_or_n> Tells whether to display a full report or only the messages. [current: no] --evaluation=<python_expression> Python expression which should return a score less than or equal to 10. You have access to the variables 'error', 'warning', 'refactor', and 'convention' which contain the number of messages in each category, as well as 'statement' which is the total number of statements analyzed. This score is used by the global evaluation report (RP0004). [current: 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)] -s <y_or_n>, --score=<y_or_n> Activate the evaluation score. [current: yes] --msg-template=<template> Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details.","title":"Help content"},{"location":"descriptors/python_pylint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): pylint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_pylint/#example-success-log","text":"Results of pylint linter (version 2.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_pylint/ ----------------------------------------------- [SUCCESS] .automation/test/python/python_good_1.py","title":"Example success log"},{"location":"descriptors/python_pylint/#example-error-log","text":"Results of pylint linter (version 2.6.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/python_pylint/ ----------------------------------------------- [ERROR] .automation/test/python/python_bad_1.py ************* Module python_bad_1 .automation/test/python/python_bad_1.py:15:24: E0001: invalid syntax (<unknown>, line 15) (syntax-error)","title":"Example error log"},{"location":"descriptors/r/","text":"R Linters Linter Configuration key lintr R Linted files File extensions: .r .R .Rmd .RMD Configuration in Mega-Linter Variable Description Default value R_FILTER_REGEX_INCLUDE Custom regex including filter R_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All R linters"},{"location":"descriptors/r/#r","text":"","title":"R"},{"location":"descriptors/r/#linters","text":"Linter Configuration key lintr R","title":"Linters"},{"location":"descriptors/r/#linted-files","text":"File extensions: .r .R .Rmd .RMD","title":"Linted files"},{"location":"descriptors/r/#configuration-in-mega-linter","text":"Variable Description Default value R_FILTER_REGEX_INCLUDE Custom regex including filter R_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/r_lintr/","text":"lintr lintr documentation Version in Mega-Linter: 2.0.1.9000 Visit Official Web Site See How to configure lintr rules If custom .lintr is not found, .lintr will be used See Index of problems detected by lintr Configuration in Mega-Linter Enable lintr by adding R_LINTR in ENABLE_LINTERS variable Disable lintr by adding R_LINTR in DISABLE_LINTERS variable Variable Description Default value R_LINTR_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" R_LINTR_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file R_LINTR_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file R_LINTR_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".r\", \".R\", \".Rmd\", \".RMD\"] R_LINTR_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file R_LINTR_FILE_NAME lintr configuration file name Use LINTER_DEFAULT to let the linter find it .lintr R_LINTR_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules R_LINTR_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use lintr in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom Atom lintr Emacs flycheck rstudio Native Support Sublime Text SublimeLinter-contrib-lintr vim ale Visual Studio Code VsCode R LSP Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .r .R .Rmd .RMD Example calls R --slave -e \"errors <- lintr::lint('myfile.r'); print(errors); quit(save = 'no', status = if (length(errors) > 0) 1 else 0) \" Help content No documentation for \u2018lintr\u2019 in specified packages and libraries: you could try \u2018??lintr\u2019 Installation on mega-linter Docker image Dockerfile commands : FROM ghcr.io/assignuser/lintr-lib:latest as lintr-lib COPY --from=lintr-lib /usr/lib/R/library/ /home/r-library RUN R -e \"install.packages(list.dirs('/home/r-library',recursive = FALSE), repos = NULL, type = 'source')\" APK packages (Linux): R R-dev R-doc Example success log Results of lintr linter (version 2.0.1.9000) See documentation on https://nvuillam.github.io/mega-linter/descriptors/r_lintr/ ----------------------------------------------- [SUCCESS] .automation/test/r/r_good_1.r Warning message: In readLines(filename) : incomplete final line found on '.automation/test/r/r_good_1.r' Example error log Results of lintr linter (version 2.0.1.9000) See documentation on https://nvuillam.github.io/mega-linter/descriptors/r_lintr/ ----------------------------------------------- [ERROR] .automation/test/r/r_bad_1.r style:.automation/test/r/r_bad_1.r:8:3::Use <-, not =, for assignment. style:.automation/test/r/r_bad_1.r:8:14::Remove spaces before the left parenthesis in a function call. style:.automation/test/r/r_bad_1.r:8:17::Commas should always have a space after. style:.automation/test/r/r_bad_1.r:8:22::There should be a space between right parenthesis and an opening curly brace. style:.automation/test/r/r_bad_1.r:8:23::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:8:24::Closing curly-braces should always be on their own line, unless it's followed by an else. style:.automation/test/r/r_bad_1.r:11:3::Commented code should be removed. style:.automation/test/r/r_bad_1.r:21:1::functions should have cyclomatic complexity of less than 15, this has 22. style:.automation/test/r/r_bad_1.r:21:1::Variable and function names should not be longer than 30 characters. style:.automation/test/r/r_bad_1.r:21:1::Variable and function name style should be snake_case. style:.automation/test/r/r_bad_1.r:22:1::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:24:1::Lines should not be more than 80 characters. style:.automation/test/r/r_bad_1.r:24:44::Put spaces around all infix operators. warning:.automation/test/r/r_bad_1.r:24:57::Use is.na rather than == NA. style:.automation/test/r/r_bad_1.r:24:64::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:24:69::Closing curly-braces should always be on their own line, unless it's followed by an else. style:.automation/test/r/r_bad_1.r:24:76::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:24:82::Closing curly-braces should always be on their own line, unless it's followed by an else. style:.automation/test/r/r_bad_1.r:31:3::Do not place spaces around code in parentheses or square brackets. warning:.automation/test/r/r_bad_1.r:32:1::Avoid 1:length(...) expressions, use seq_len. style:.automation/test/r/r_bad_1.r:32:37::Put spaces around all infix operators. style:.automation/test/r/r_bad_1.r:32:43::`%>%` should always have a space before it and a new line after it, unless the full pipeline fits on one line. style:.automation/test/r/r_bad_1.r:36:9::Only use double-quotes. style:.automation/test/r/r_bad_1.r:40:8::Put spaces around all infix operators. style:.automation/test/r/r_bad_1.r:40:9::Place a space before left parenthesis, except in a function call. style:.automation/test/r/r_bad_1.r:43:1::Trailing blank lines are superfluous.","title":"lintr"},{"location":"descriptors/r_lintr/#lintr","text":"","title":"lintr"},{"location":"descriptors/r_lintr/#lintr-documentation","text":"Version in Mega-Linter: 2.0.1.9000 Visit Official Web Site See How to configure lintr rules If custom .lintr is not found, .lintr will be used See Index of problems detected by lintr","title":"lintr documentation"},{"location":"descriptors/r_lintr/#configuration-in-mega-linter","text":"Enable lintr by adding R_LINTR in ENABLE_LINTERS variable Disable lintr by adding R_LINTR in DISABLE_LINTERS variable Variable Description Default value R_LINTR_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" R_LINTR_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file R_LINTR_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file R_LINTR_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".r\", \".R\", \".Rmd\", \".RMD\"] R_LINTR_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file R_LINTR_FILE_NAME lintr configuration file name Use LINTER_DEFAULT to let the linter find it .lintr R_LINTR_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules R_LINTR_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/r_lintr/#ide-integration","text":"Use lintr in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom Atom lintr Emacs flycheck rstudio Native Support Sublime Text SublimeLinter-contrib-lintr vim ale Visual Studio Code VsCode R LSP","title":"IDE Integration"},{"location":"descriptors/r_lintr/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/r_lintr/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/r_lintr/#how-are-identified-applicable-files","text":"File extensions: .r .R .Rmd .RMD","title":"How are identified applicable files"},{"location":"descriptors/r_lintr/#example-calls","text":"R --slave -e \"errors <- lintr::lint('myfile.r'); print(errors); quit(save = 'no', status = if (length(errors) > 0) 1 else 0) \"","title":"Example calls"},{"location":"descriptors/r_lintr/#help-content","text":"No documentation for \u2018lintr\u2019 in specified packages and libraries: you could try \u2018??lintr\u2019","title":"Help content"},{"location":"descriptors/r_lintr/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM ghcr.io/assignuser/lintr-lib:latest as lintr-lib COPY --from=lintr-lib /usr/lib/R/library/ /home/r-library RUN R -e \"install.packages(list.dirs('/home/r-library',recursive = FALSE), repos = NULL, type = 'source')\" APK packages (Linux): R R-dev R-doc","title":"Installation on mega-linter Docker image"},{"location":"descriptors/r_lintr/#example-success-log","text":"Results of lintr linter (version 2.0.1.9000) See documentation on https://nvuillam.github.io/mega-linter/descriptors/r_lintr/ ----------------------------------------------- [SUCCESS] .automation/test/r/r_good_1.r Warning message: In readLines(filename) : incomplete final line found on '.automation/test/r/r_good_1.r'","title":"Example success log"},{"location":"descriptors/r_lintr/#example-error-log","text":"Results of lintr linter (version 2.0.1.9000) See documentation on https://nvuillam.github.io/mega-linter/descriptors/r_lintr/ ----------------------------------------------- [ERROR] .automation/test/r/r_bad_1.r style:.automation/test/r/r_bad_1.r:8:3::Use <-, not =, for assignment. style:.automation/test/r/r_bad_1.r:8:14::Remove spaces before the left parenthesis in a function call. style:.automation/test/r/r_bad_1.r:8:17::Commas should always have a space after. style:.automation/test/r/r_bad_1.r:8:22::There should be a space between right parenthesis and an opening curly brace. style:.automation/test/r/r_bad_1.r:8:23::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:8:24::Closing curly-braces should always be on their own line, unless it's followed by an else. style:.automation/test/r/r_bad_1.r:11:3::Commented code should be removed. style:.automation/test/r/r_bad_1.r:21:1::functions should have cyclomatic complexity of less than 15, this has 22. style:.automation/test/r/r_bad_1.r:21:1::Variable and function names should not be longer than 30 characters. style:.automation/test/r/r_bad_1.r:21:1::Variable and function name style should be snake_case. style:.automation/test/r/r_bad_1.r:22:1::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:24:1::Lines should not be more than 80 characters. style:.automation/test/r/r_bad_1.r:24:44::Put spaces around all infix operators. warning:.automation/test/r/r_bad_1.r:24:57::Use is.na rather than == NA. style:.automation/test/r/r_bad_1.r:24:64::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:24:69::Closing curly-braces should always be on their own line, unless it's followed by an else. style:.automation/test/r/r_bad_1.r:24:76::Opening curly braces should never go on their own line and should always be followed by a new line. style:.automation/test/r/r_bad_1.r:24:82::Closing curly-braces should always be on their own line, unless it's followed by an else. style:.automation/test/r/r_bad_1.r:31:3::Do not place spaces around code in parentheses or square brackets. warning:.automation/test/r/r_bad_1.r:32:1::Avoid 1:length(...) expressions, use seq_len. style:.automation/test/r/r_bad_1.r:32:37::Put spaces around all infix operators. style:.automation/test/r/r_bad_1.r:32:43::`%>%` should always have a space before it and a new line after it, unless the full pipeline fits on one line. style:.automation/test/r/r_bad_1.r:36:9::Only use double-quotes. style:.automation/test/r/r_bad_1.r:40:8::Put spaces around all infix operators. style:.automation/test/r/r_bad_1.r:40:9::Place a space before left parenthesis, except in a function call. style:.automation/test/r/r_bad_1.r:43:1::Trailing blank lines are superfluous.","title":"Example error log"},{"location":"descriptors/raku/","text":"RAKU Linters Linter Configuration key raku RAKU Linted files File extensions: .raku .rakumod .rakutest .pm6 .pl6 .p6 Configuration in Mega-Linter Variable Description Default value RAKU_FILTER_REGEX_INCLUDE Custom regex including filter RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All RAKU linters"},{"location":"descriptors/raku/#raku","text":"","title":"RAKU"},{"location":"descriptors/raku/#linters","text":"Linter Configuration key raku RAKU","title":"Linters"},{"location":"descriptors/raku/#linted-files","text":"File extensions: .raku .rakumod .rakutest .pm6 .pl6 .p6","title":"Linted files"},{"location":"descriptors/raku/#configuration-in-mega-linter","text":"Variable Description Default value RAKU_FILTER_REGEX_INCLUDE Custom regex including filter RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/raku_raku/","text":"raku raku documentation Version in Mega-Linter: 2020.10 Visit Official Web Site Configuration in Mega-Linter Enable raku by adding RAKU_RAKU in ENABLE_LINTERS variable Disable raku by adding RAKU_RAKU in DISABLE_LINTERS variable Variable Description Default value RAKU_RAKU_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RAKU_RAKU_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RAKU_RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RAKU_RAKU_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".raku\", \".rakumod\", \".rakutest\", \".pm6\", \".pl6\", \".p6\"] RAKU_RAKU_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RAKU_RAKU_FILE_NAME raku configuration file name Use LINTER_DEFAULT to let the linter find it META6.json RAKU_RAKU_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RAKU_RAKU_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use raku in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom language-perl6 comma Native Support Visual Studio Code Perl6 Language Support Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files File extensions: .raku .rakumod .rakutest .pm6 .pl6 .p6 Example calls raku -I ./lib -c myfile.raku Help content /opt/rakudo-pkg/share/perl6/runtime/perl6.moarvm [switches] [--] [programfile] [arguments] With no arguments, enters a REPL (see --repl-mode option). With a \"[programfile]\" or the \"-e\" option, compiles the given program and, by default, also executes the compiled code. - read program source from STDIN or start REPL if a TTY -c check syntax only (runs BEGIN and CHECK blocks) --doc extract documentation and print it as text -e program one line of program, strict is enabled by default -h, --help display this help text -n run program once for each line of input -p same as -n, but also print $_ at the end of lines -I path adds the path to the module search path -M module loads the module prior to running the program --target=stage specify compilation stage to emit --optimize=level use the given level of optimization (0..3) --rakudo-home=path Override the path of the Rakudo runtime files -o, --output=name specify name of output file -v, --version display version information -V print configuration summary --stagestats display time spent in the compilation stages --ll-exception display a low level backtrace on errors --doc=module use Pod::To::[module] to render inline documentation --repl-mode=interactive|non-interactive when running without \"-e\" or filename arguments, a REPL is started. By default, if STDIN is a TTY, \"interactive\" REPL is started that shows extra messages and prompts, otherwise a \"non-interactive\" mode is used where STDIN is read entirely and evaluated as if it were a program, without any extra output (in fact, no REPL machinery is even loaded). This option allows to bypass TTY detection and force one of the REPL modes. --profile[=name] write profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-compile[=name] write compile-time profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-kind[=name] choose the type of profile to generate instrumented - performance measurements (default) heap - record heap snapshots after every garbage collector run --profile-filename=name provide a different filename for profile. Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML This option will go away in a future Rakudo release --profile-stage=stage write profile information for the given compilation stage to a file. Use --profile-compile to set name and format --full-cleanup try to free all memory and exit cleanly --debug-port=port listen for incoming debugger connections --debug-suspend pause execution at the entry point --tracing output a line to stderr on every interpreter instr (only if enabled in MoarVM) Note that only boolean single-letter options may be bundled. The following environment variables are respected: RAKULIB Modify the module search path PERL6LIB Modify the module search path # to be deprecated RAKUDO_HOME Override the path of the Rakudo runtime files NQP_HOME Override the path of the NQP runtime files Installation on mega-linter Docker image Dockerfile commands : RUN curl -L https://github.com/nxadm/rakudo-pkg/releases/download/v2020.10-02/rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk > rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && apk add --no-cache --allow-untrusted rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && rm rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && /opt/rakudo-pkg/bin/add-rakudo-to-path \\ && source /root/.profile \\ && /opt/rakudo-pkg/bin/install-zef-as-user ENV PATH=\"~/.raku/bin:/opt/rakudo-pkg/bin:/opt/rakudo-pkg/share/perl6/site/bin:$PATH\" Example success log Results of raku linter (version 2020.11) See documentation on https://nvuillam.github.io/mega-linter/descriptors/raku_raku/ ----------------------------------------------- [SUCCESS] .automation/test/raku/raku_good_1.raku Syntax OK Example error log Results of raku linter (version 2020.11) See documentation on https://nvuillam.github.io/mega-linter/descriptors/raku_raku/ ----------------------------------------------- [ERROR] .automation/test/raku/raku_bad_1.raku ===SORRY!=== Error while compiling .automation/test/raku/raku_bad_1.raku Variable '$foo' is not declared. Did you mean '@foo'? at .automation/test/raku/raku_bad_1.raku:4 ------> <BOL>\u23cf$foo[1] = 42","title":"raku"},{"location":"descriptors/raku_raku/#raku","text":"","title":"raku"},{"location":"descriptors/raku_raku/#raku-documentation","text":"Version in Mega-Linter: 2020.10 Visit Official Web Site","title":"raku documentation"},{"location":"descriptors/raku_raku/#configuration-in-mega-linter","text":"Enable raku by adding RAKU_RAKU in ENABLE_LINTERS variable Disable raku by adding RAKU_RAKU in DISABLE_LINTERS variable Variable Description Default value RAKU_RAKU_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RAKU_RAKU_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RAKU_RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RAKU_RAKU_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".raku\", \".rakumod\", \".rakutest\", \".pm6\", \".pl6\", \".p6\"] RAKU_RAKU_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RAKU_RAKU_FILE_NAME raku configuration file name Use LINTER_DEFAULT to let the linter find it META6.json RAKU_RAKU_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RAKU_RAKU_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/raku_raku/#ide-integration","text":"Use raku in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom language-perl6 comma Native Support Visual Studio Code Perl6 Language Support","title":"IDE Integration"},{"location":"descriptors/raku_raku/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/raku_raku/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/raku_raku/#how-are-identified-applicable-files","text":"File extensions: .raku .rakumod .rakutest .pm6 .pl6 .p6","title":"How are identified applicable files"},{"location":"descriptors/raku_raku/#example-calls","text":"raku -I ./lib -c myfile.raku","title":"Example calls"},{"location":"descriptors/raku_raku/#help-content","text":"/opt/rakudo-pkg/share/perl6/runtime/perl6.moarvm [switches] [--] [programfile] [arguments] With no arguments, enters a REPL (see --repl-mode option). With a \"[programfile]\" or the \"-e\" option, compiles the given program and, by default, also executes the compiled code. - read program source from STDIN or start REPL if a TTY -c check syntax only (runs BEGIN and CHECK blocks) --doc extract documentation and print it as text -e program one line of program, strict is enabled by default -h, --help display this help text -n run program once for each line of input -p same as -n, but also print $_ at the end of lines -I path adds the path to the module search path -M module loads the module prior to running the program --target=stage specify compilation stage to emit --optimize=level use the given level of optimization (0..3) --rakudo-home=path Override the path of the Rakudo runtime files -o, --output=name specify name of output file -v, --version display version information -V print configuration summary --stagestats display time spent in the compilation stages --ll-exception display a low level backtrace on errors --doc=module use Pod::To::[module] to render inline documentation --repl-mode=interactive|non-interactive when running without \"-e\" or filename arguments, a REPL is started. By default, if STDIN is a TTY, \"interactive\" REPL is started that shows extra messages and prompts, otherwise a \"non-interactive\" mode is used where STDIN is read entirely and evaluated as if it were a program, without any extra output (in fact, no REPL machinery is even loaded). This option allows to bypass TTY detection and force one of the REPL modes. --profile[=name] write profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-compile[=name] write compile-time profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-kind[=name] choose the type of profile to generate instrumented - performance measurements (default) heap - record heap snapshots after every garbage collector run --profile-filename=name provide a different filename for profile. Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML This option will go away in a future Rakudo release --profile-stage=stage write profile information for the given compilation stage to a file. Use --profile-compile to set name and format --full-cleanup try to free all memory and exit cleanly --debug-port=port listen for incoming debugger connections --debug-suspend pause execution at the entry point --tracing output a line to stderr on every interpreter instr (only if enabled in MoarVM) Note that only boolean single-letter options may be bundled. The following environment variables are respected: RAKULIB Modify the module search path PERL6LIB Modify the module search path # to be deprecated RAKUDO_HOME Override the path of the Rakudo runtime files NQP_HOME Override the path of the NQP runtime files","title":"Help content"},{"location":"descriptors/raku_raku/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl -L https://github.com/nxadm/rakudo-pkg/releases/download/v2020.10-02/rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk > rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && apk add --no-cache --allow-untrusted rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && rm rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && /opt/rakudo-pkg/bin/add-rakudo-to-path \\ && source /root/.profile \\ && /opt/rakudo-pkg/bin/install-zef-as-user ENV PATH=\"~/.raku/bin:/opt/rakudo-pkg/bin:/opt/rakudo-pkg/share/perl6/site/bin:$PATH\"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/raku_raku/#example-success-log","text":"Results of raku linter (version 2020.11) See documentation on https://nvuillam.github.io/mega-linter/descriptors/raku_raku/ ----------------------------------------------- [SUCCESS] .automation/test/raku/raku_good_1.raku Syntax OK","title":"Example success log"},{"location":"descriptors/raku_raku/#example-error-log","text":"Results of raku linter (version 2020.11) See documentation on https://nvuillam.github.io/mega-linter/descriptors/raku_raku/ ----------------------------------------------- [ERROR] .automation/test/raku/raku_bad_1.raku ===SORRY!=== Error while compiling .automation/test/raku/raku_bad_1.raku Variable '$foo' is not declared. Did you mean '@foo'? at .automation/test/raku/raku_bad_1.raku:4 ------> <BOL>\u23cf$foo[1] = 42","title":"Example error log"},{"location":"descriptors/rst/","text":"RST Linters Linter Configuration key rst-lint RST rstcheck RST rstfmt RST Linted files File extensions: .rst Configuration in Mega-Linter Variable Description Default value RST_FILTER_REGEX_INCLUDE Custom regex including filter RST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All RST linters"},{"location":"descriptors/rst/#rst","text":"","title":"RST"},{"location":"descriptors/rst/#linters","text":"Linter Configuration key rst-lint RST rstcheck RST rstfmt RST","title":"Linters"},{"location":"descriptors/rst/#linted-files","text":"File extensions: .rst","title":"Linted files"},{"location":"descriptors/rst/#configuration-in-mega-linter","text":"Variable Description Default value RST_FILTER_REGEX_INCLUDE Custom regex including filter RST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/rst_rst_lint/","text":"rst-lint rst-lint documentation Version in Mega-Linter: 1.3.2 Visit Official Web Site Configuration in Mega-Linter Enable rst-lint by adding RST_RST_LINT in ENABLE_LINTERS variable Disable rst-lint by adding RST_RST_LINT in DISABLE_LINTERS variable Variable Description Default value RST_RST_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RST_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RST_RST_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RST_RST_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RST_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RST_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .rst Example calls rst-lint myfile.rst Help content usage: rst-lint [-h] [--version] [--format {text,json}] [--encoding ENCODING] [--level {debug,info,warning,error,severe}] [--rst-prolog RST_PROLOG] path [path ...] Lint reStructuredText files. Returns 0 if all files pass linting, 1 for an internal error, and 2 if linting failed. positional arguments: path File/folder to lint optional arguments: -h, --help show this help message and exit --version show program's version number and exit --format {text,json} Format of the output (default: \"text\") --encoding ENCODING Encoding of the input file (e.g. \"utf-8\") --level {debug,info,warning,error,severe} Minimum error level to report (default: \"warning\") --rst-prolog RST_PROLOG reStructuredText content to prepend to all files (useful for substitutions) Installation on mega-linter Docker image PIP packages (Python): restructuredtext_lint Example success log Results of rst-lint linter (version 1.3.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rst_lint/ ----------------------------------------------- [SUCCESS] .automation/test/rst/rst_good_1.rst Example error log Results of rst-lint linter (version 1.3.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rst_lint/ ----------------------------------------------- [ERROR] .automation/test/rst/rst_bad_1.rst WARNING .automation/test/rst/rst_bad_1.rst:2 Title underline too short.","title":"rst-lint"},{"location":"descriptors/rst_rst_lint/#rst-lint","text":"","title":"rst-lint"},{"location":"descriptors/rst_rst_lint/#rst-lint-documentation","text":"Version in Mega-Linter: 1.3.2 Visit Official Web Site","title":"rst-lint documentation"},{"location":"descriptors/rst_rst_lint/#configuration-in-mega-linter","text":"Enable rst-lint by adding RST_RST_LINT in ENABLE_LINTERS variable Disable rst-lint by adding RST_RST_LINT in DISABLE_LINTERS variable Variable Description Default value RST_RST_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RST_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RST_RST_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RST_RST_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RST_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RST_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/rst_rst_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/rst_rst_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rst_rst_lint/#how-are-identified-applicable-files","text":"File extensions: .rst","title":"How are identified applicable files"},{"location":"descriptors/rst_rst_lint/#example-calls","text":"rst-lint myfile.rst","title":"Example calls"},{"location":"descriptors/rst_rst_lint/#help-content","text":"usage: rst-lint [-h] [--version] [--format {text,json}] [--encoding ENCODING] [--level {debug,info,warning,error,severe}] [--rst-prolog RST_PROLOG] path [path ...] Lint reStructuredText files. Returns 0 if all files pass linting, 1 for an internal error, and 2 if linting failed. positional arguments: path File/folder to lint optional arguments: -h, --help show this help message and exit --version show program's version number and exit --format {text,json} Format of the output (default: \"text\") --encoding ENCODING Encoding of the input file (e.g. \"utf-8\") --level {debug,info,warning,error,severe} Minimum error level to report (default: \"warning\") --rst-prolog RST_PROLOG reStructuredText content to prepend to all files (useful for substitutions)","title":"Help content"},{"location":"descriptors/rst_rst_lint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): restructuredtext_lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rst_rst_lint/#example-success-log","text":"Results of rst-lint linter (version 1.3.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rst_lint/ ----------------------------------------------- [SUCCESS] .automation/test/rst/rst_good_1.rst","title":"Example success log"},{"location":"descriptors/rst_rst_lint/#example-error-log","text":"Results of rst-lint linter (version 1.3.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rst_lint/ ----------------------------------------------- [ERROR] .automation/test/rst/rst_bad_1.rst WARNING .automation/test/rst/rst_bad_1.rst:2 Title underline too short.","title":"Example error log"},{"location":"descriptors/rst_rstcheck/","text":"rstcheck rstcheck documentation Version in Mega-Linter: 3.3.1 Visit Official Web Site See How to configure rstcheck rules See How to disable rstcheck rules in files Configuration in Mega-Linter Enable rstcheck by adding RST_RSTCHECK in ENABLE_LINTERS variable Disable rstcheck by adding RST_RSTCHECK in DISABLE_LINTERS variable Variable Description Default value RST_RSTCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RSTCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RST_RSTCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RST_RSTCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RSTCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RSTCHECK_FILE_NAME rstcheck configuration file name Use LINTER_DEFAULT to let the linter find it .rstcheck.cfg RST_RSTCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RST_RSTCHECK_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use rstcheck in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code vscode-restructuredtext Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .rst Example calls rstcheck myfile.rst rstcheck -c .rstcheck.cfg myfile.rst Help content usage: rstcheck [-h] [-r] [--report level] [--ignore-language language] [--ignore-messages messages] [--ignore-directives directives] [--ignore-substitutions substitutions] [--ignore-roles roles] [--debug] [--version] files [files ...] Checks code blocks in reStructuredText. Sphinx is enabled. positional arguments: files files to check optional arguments: -h, --help show this help message and exit -r, --recursive run recursively over directories --report level report system messages at or higher than level; info, warning, error, severe, none (default: info) --ignore-language language, --ignore language comma-separated list of languages to ignore --ignore-messages messages python regex that match the messages to ignore --ignore-directives directives comma-separated list of directives to ignore --ignore-substitutions substitutions comma-separated list of substitutions to ignore --ignore-roles roles comma-separated list of roles to ignore --debug show messages helpful for debugging --version show program's version number and exit Installation on mega-linter Docker image PIP packages (Python): rstcheck Example success log Results of rstcheck linter (version 3.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rstcheck/ ----------------------------------------------- [SUCCESS] .automation/test/rst/rst_good_1.rst Example error log Results of rstcheck linter (version 3.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rstcheck/ ----------------------------------------------- [ERROR] .automation/test/rst/rst_bad_1.rst .automation/test/rst/rst_bad_1.rst:2: (WARNING/2) Title underline too short.","title":"rstcheck"},{"location":"descriptors/rst_rstcheck/#rstcheck","text":"","title":"rstcheck"},{"location":"descriptors/rst_rstcheck/#rstcheck-documentation","text":"Version in Mega-Linter: 3.3.1 Visit Official Web Site See How to configure rstcheck rules See How to disable rstcheck rules in files","title":"rstcheck documentation"},{"location":"descriptors/rst_rstcheck/#configuration-in-mega-linter","text":"Enable rstcheck by adding RST_RSTCHECK in ENABLE_LINTERS variable Disable rstcheck by adding RST_RSTCHECK in DISABLE_LINTERS variable Variable Description Default value RST_RSTCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RSTCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RST_RSTCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RST_RSTCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RSTCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RSTCHECK_FILE_NAME rstcheck configuration file name Use LINTER_DEFAULT to let the linter find it .rstcheck.cfg RST_RSTCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RST_RSTCHECK_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/rst_rstcheck/#ide-integration","text":"Use rstcheck in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code vscode-restructuredtext","title":"IDE Integration"},{"location":"descriptors/rst_rstcheck/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/rst_rstcheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rst_rstcheck/#how-are-identified-applicable-files","text":"File extensions: .rst","title":"How are identified applicable files"},{"location":"descriptors/rst_rstcheck/#example-calls","text":"rstcheck myfile.rst rstcheck -c .rstcheck.cfg myfile.rst","title":"Example calls"},{"location":"descriptors/rst_rstcheck/#help-content","text":"usage: rstcheck [-h] [-r] [--report level] [--ignore-language language] [--ignore-messages messages] [--ignore-directives directives] [--ignore-substitutions substitutions] [--ignore-roles roles] [--debug] [--version] files [files ...] Checks code blocks in reStructuredText. Sphinx is enabled. positional arguments: files files to check optional arguments: -h, --help show this help message and exit -r, --recursive run recursively over directories --report level report system messages at or higher than level; info, warning, error, severe, none (default: info) --ignore-language language, --ignore language comma-separated list of languages to ignore --ignore-messages messages python regex that match the messages to ignore --ignore-directives directives comma-separated list of directives to ignore --ignore-substitutions substitutions comma-separated list of substitutions to ignore --ignore-roles roles comma-separated list of roles to ignore --debug show messages helpful for debugging --version show program's version number and exit","title":"Help content"},{"location":"descriptors/rst_rstcheck/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): rstcheck","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rst_rstcheck/#example-success-log","text":"Results of rstcheck linter (version 3.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rstcheck/ ----------------------------------------------- [SUCCESS] .automation/test/rst/rst_good_1.rst","title":"Example success log"},{"location":"descriptors/rst_rstcheck/#example-error-log","text":"Results of rstcheck linter (version 3.3.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rstcheck/ ----------------------------------------------- [ERROR] .automation/test/rst/rst_bad_1.rst .automation/test/rst/rst_bad_1.rst:2: (WARNING/2) Title underline too short.","title":"Example error log"},{"location":"descriptors/rst_rstfmt/","text":"rstfmt rstfmt documentation Visit Official Web Site Configuration in Mega-Linter Enable rstfmt by adding RST_RSTFMT in ENABLE_LINTERS variable Disable rstfmt by adding RST_RSTFMT in DISABLE_LINTERS variable Enable auto-fixes by adding RST_RSTFMT in APPLY_FIXES variable Variable Description Default value RST_RSTFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RSTFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RST_RSTFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RST_RSTFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RSTFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RSTFMT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36 Behind the scenes How are identified applicable files File extensions: .rst Example calls rstfmt myfile.rst rstfmt -i myfile.rst Help content usage: rstfmt [-h] [-v] [-w WIDTH] [--check] [--test] [files [files ...]] positional arguments: files optional arguments: -h, --help show this help message and exit -v, --verbose -w WIDTH, --width WIDTH --check --test Installation on mega-linter Docker image PIP packages (Python): rstfmt Example success log Results of rstfmt linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rstfmt/ ----------------------------------------------- [SUCCESS] .automation/test/rst_rstfmt/rst_good_1.rst","title":"rstfmt"},{"location":"descriptors/rst_rstfmt/#rstfmt","text":"","title":"rstfmt"},{"location":"descriptors/rst_rstfmt/#rstfmt-documentation","text":"Visit Official Web Site","title":"rstfmt documentation"},{"location":"descriptors/rst_rstfmt/#configuration-in-mega-linter","text":"Enable rstfmt by adding RST_RSTFMT in ENABLE_LINTERS variable Disable rstfmt by adding RST_RSTFMT in DISABLE_LINTERS variable Enable auto-fixes by adding RST_RSTFMT in APPLY_FIXES variable Variable Description Default value RST_RSTFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RSTFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RST_RSTFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RST_RSTFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RSTFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RSTFMT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/rst_rstfmt/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 python Mega-Linter optimized for PYTHON based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/rst_rstfmt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rst_rstfmt/#how-are-identified-applicable-files","text":"File extensions: .rst","title":"How are identified applicable files"},{"location":"descriptors/rst_rstfmt/#example-calls","text":"rstfmt myfile.rst rstfmt -i myfile.rst","title":"Example calls"},{"location":"descriptors/rst_rstfmt/#help-content","text":"usage: rstfmt [-h] [-v] [-w WIDTH] [--check] [--test] [files [files ...]] positional arguments: files optional arguments: -h, --help show this help message and exit -v, --verbose -w WIDTH, --width WIDTH --check --test","title":"Help content"},{"location":"descriptors/rst_rstfmt/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): rstfmt","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rst_rstfmt/#example-success-log","text":"Results of rstfmt linter (version 0.0.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rst_rstfmt/ ----------------------------------------------- [SUCCESS] .automation/test/rst_rstfmt/rst_good_1.rst","title":"Example success log"},{"location":"descriptors/ruby/","text":"RUBY Linters Linter Configuration key rubocop RUBY Linted files File extensions: .rb Configuration in Mega-Linter Variable Description Default value RUBY_FILTER_REGEX_INCLUDE Custom regex including filter RUBY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): ruby ruby-dev ruby-bundler ruby-rdoc","title":"All RUBY linters"},{"location":"descriptors/ruby/#ruby","text":"","title":"RUBY"},{"location":"descriptors/ruby/#linters","text":"Linter Configuration key rubocop RUBY","title":"Linters"},{"location":"descriptors/ruby/#linted-files","text":"File extensions: .rb","title":"Linted files"},{"location":"descriptors/ruby/#configuration-in-mega-linter","text":"Variable Description Default value RUBY_FILTER_REGEX_INCLUDE Custom regex including filter RUBY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/ruby/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/ruby/#installation","text":"APK packages (Linux): ruby ruby-dev ruby-bundler ruby-rdoc","title":"Installation"},{"location":"descriptors/ruby_rubocop/","text":"rubocop documentation Version in Mega-Linter: 0.82.0 Visit Official Web Site See How to configure rubocop rules If custom .ruby-lint.yml is not found, .ruby-lint.yml will be used See How to disable rubocop rules in files See Index of problems detected by rubocop Configuration in Mega-Linter Enable rubocop by adding RUBY_RUBOCOP in ENABLE_LINTERS variable Disable rubocop by adding RUBY_RUBOCOP in DISABLE_LINTERS variable Enable auto-fixes by adding RUBY_RUBOCOP in APPLY_FIXES variable Variable Description Default value RUBY_RUBOCOP_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUBY_RUBOCOP_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RUBY_RUBOCOP_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rb\"] RUBY_RUBOCOP_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUBY_RUBOCOP_FILE_NAME rubocop configuration file name Use LINTER_DEFAULT to let the linter find it .ruby-lint.yml RUBY_RUBOCOP_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RUBY_RUBOCOP_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use rubocop in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-rubocop Brackets brackets-rubocop Emacs rubocop-emacs Emacs flycheck IDEA RubyMine Sublime Text sublime_rubocop vim vim-rubocop vim ale Visual Studio Code VsCode Ruby Extension Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 ruby Mega-Linter optimized for RUBY based projects 30 Behind the scenes How are identified applicable files File extensions: .rb Example calls rubocop --force-exclusion myfile.rb rubocop --force-exclusion -c .ruby-lint.yml myfile.rb rubocop --force-exclusion --safe-auto-correct -c .ruby-lint.yml myfile.rb Help content Usage: rubocop [options] [file1, file2, ...] -L, --list-target-files List all files RuboCop will inspect. --except [COP1,COP2,...] Disable the given cop(s). --only [COP1,COP2,...] Run only the given cop(s). --only-guide-cops Run only cops for rules that link to a style guide. -c, --config FILE Specify configuration file. --force-exclusion Force excluding files specified in the configuration `Exclude` even if they are explicitly passed as arguments. --ignore-parent-exclusion Prevent from inheriting AllCops/Exclude from parent folders. --force-default-config Use default configuration even if configuration files are present in the directory tree. --auto-gen-config Generate a configuration file acting as a TODO list. --exclude-limit COUNT Used together with --auto-gen-config to set the limit for how many Exclude properties to generate. Default is 15. --disable-uncorrectable Used with --auto-correct to annotate any offenses that do not support autocorrect with `rubocop:todo` comments. --no-offense-counts Do not include offense counts in configuration file generated by --auto-gen-config. --auto-gen-only-exclude Generate only Exclude parameters and not Max when running --auto-gen-config, except if the number of files with offenses is bigger than exclude-limit. --no-auto-gen-timestamp Do not include the date and time when the --auto-gen-config was run in the file it generates. --init Generate a .rubocop.yml file in the current directory. -f, --format FORMATTER Choose an output formatter. This option can be specified multiple times to enable multiple formatters at the same time. [p]rogress is used by default [a]utogenconf [c]lang [e]macs [fi]les [fu]ubar [h]tml [j]son [ju]nit [o]ffenses [pa]cman [p]rogress [q]uiet [s]imple [t]ap [w]orst custom formatter class name -o, --out FILE Write output to a file instead of STDOUT. This option applies to the previously specified --format, or the default format if no format is specified. -r, --require FILE Require Ruby file. --fail-level SEVERITY Minimum severity (A/R/C/W/E/F) for exit with error code. --display-only-fail-level-offenses Only output offense messages at the specified --fail-level or above --show-cops [COP1,COP2,...] Shows the given cops, or all cops by default, and their configurations for the current directory. -F, --fail-fast Inspect files in order of modification time and stop after the first file containing offenses. -C, --cache FLAG Use result caching (FLAG=true) or don't (FLAG=false), default determined by configuration parameter AllCops: UseCache. -d, --debug Display debug info. -D, --[no-]display-cop-names Display cop names in offense messages. Default is true. -E, --extra-details Display extra details in offense messages. -S, --display-style-guide Display style guide URLs in offense messages. -a, --auto-correct Auto-correct offenses. --disable-pending-cops Run without pending cops. --enable-pending-cops Run with pending cops. --ignore-disable-comments Run cops even when they are disabled locally with a comment. --safe Run only safe cops. --[no-]color Force color output on or off. -v, --version Display version. -V, --verbose-version Display verbose version. -P, --parallel Use available CPUs to execute inspection in parallel. -l, --lint Run only lint cops. -x, --fix-layout Run only layout cops, with auto-correct on. --safe-auto-correct Run auto-correct only when it's safe. -s, --stdin FILE Pipe source from STDIN, using FILE in offense reports. This is useful for editor integration. Installation on mega-linter Docker image GEM packages (Ruby) : rubocop:0.82.0 rubocop-github:0.16.0 rubocop-performance:1.7.1 rubocop-rails:2.5 rubocop-rspec:1.41.0 Example success log Results of rubocop linter (version 0.82.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ruby_rubocop/ ----------------------------------------------- [SUCCESS] .automation/test/ruby/ruby_good_1.rb Inspecting 1 file . 1 file inspected, no offenses detected Example error log Results of rubocop linter (version 0.82.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ruby_rubocop/ ----------------------------------------------- [ERROR] .automation/test/ruby/ruby_bad_1.rb Inspecting 1 file C Offenses: mp/lint/.automation/test/ruby/ruby_bad_1.rb:1:1: C: Style/FrozenStringLiteralComment: Missing frozen string literal comment. mp/lint/.automation/test/ruby/ruby_bad_1.rb:11:11: C: Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. File.open('/tmp/urls.txt', \" w\" ) do | file| ^^^^^^^^^^^^^^^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:11:32: C: Layout/SpaceInsideParens: Space inside parentheses detected. File.open('/tmp/urls.txt', \" w\" ) do | file| ^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:11:39: C: Layout/SpaceAroundBlockParameters: Space before first block parameter detected. File.open('/tmp/urls.txt', \" w\" ) do | file| ^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:12:24: C: Layout/SpaceAroundBlockParameters: Space after last block parameter detected. Hook.active.map do |h | ^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:13:13: C: Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets. urls = [ ARRAY_OF_URLS_CALLING_INSTANCE] ^ 1 file inspected, 6 offenses detected","title":"rubocop"},{"location":"descriptors/ruby_rubocop/#rubocop-documentation","text":"Version in Mega-Linter: 0.82.0 Visit Official Web Site See How to configure rubocop rules If custom .ruby-lint.yml is not found, .ruby-lint.yml will be used See How to disable rubocop rules in files See Index of problems detected by rubocop","title":"rubocop documentation"},{"location":"descriptors/ruby_rubocop/#configuration-in-mega-linter","text":"Enable rubocop by adding RUBY_RUBOCOP in ENABLE_LINTERS variable Disable rubocop by adding RUBY_RUBOCOP in DISABLE_LINTERS variable Enable auto-fixes by adding RUBY_RUBOCOP in APPLY_FIXES variable Variable Description Default value RUBY_RUBOCOP_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUBY_RUBOCOP_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RUBY_RUBOCOP_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rb\"] RUBY_RUBOCOP_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUBY_RUBOCOP_FILE_NAME rubocop configuration file name Use LINTER_DEFAULT to let the linter find it .ruby-lint.yml RUBY_RUBOCOP_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RUBY_RUBOCOP_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/ruby_rubocop/#ide-integration","text":"Use rubocop in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-rubocop Brackets brackets-rubocop Emacs rubocop-emacs Emacs flycheck IDEA RubyMine Sublime Text sublime_rubocop vim vim-rubocop vim ale Visual Studio Code VsCode Ruby Extension","title":"IDE Integration"},{"location":"descriptors/ruby_rubocop/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 ruby Mega-Linter optimized for RUBY based projects 30","title":"Mega-Linter Flavours"},{"location":"descriptors/ruby_rubocop/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/ruby_rubocop/#how-are-identified-applicable-files","text":"File extensions: .rb","title":"How are identified applicable files"},{"location":"descriptors/ruby_rubocop/#example-calls","text":"rubocop --force-exclusion myfile.rb rubocop --force-exclusion -c .ruby-lint.yml myfile.rb rubocop --force-exclusion --safe-auto-correct -c .ruby-lint.yml myfile.rb","title":"Example calls"},{"location":"descriptors/ruby_rubocop/#help-content","text":"Usage: rubocop [options] [file1, file2, ...] -L, --list-target-files List all files RuboCop will inspect. --except [COP1,COP2,...] Disable the given cop(s). --only [COP1,COP2,...] Run only the given cop(s). --only-guide-cops Run only cops for rules that link to a style guide. -c, --config FILE Specify configuration file. --force-exclusion Force excluding files specified in the configuration `Exclude` even if they are explicitly passed as arguments. --ignore-parent-exclusion Prevent from inheriting AllCops/Exclude from parent folders. --force-default-config Use default configuration even if configuration files are present in the directory tree. --auto-gen-config Generate a configuration file acting as a TODO list. --exclude-limit COUNT Used together with --auto-gen-config to set the limit for how many Exclude properties to generate. Default is 15. --disable-uncorrectable Used with --auto-correct to annotate any offenses that do not support autocorrect with `rubocop:todo` comments. --no-offense-counts Do not include offense counts in configuration file generated by --auto-gen-config. --auto-gen-only-exclude Generate only Exclude parameters and not Max when running --auto-gen-config, except if the number of files with offenses is bigger than exclude-limit. --no-auto-gen-timestamp Do not include the date and time when the --auto-gen-config was run in the file it generates. --init Generate a .rubocop.yml file in the current directory. -f, --format FORMATTER Choose an output formatter. This option can be specified multiple times to enable multiple formatters at the same time. [p]rogress is used by default [a]utogenconf [c]lang [e]macs [fi]les [fu]ubar [h]tml [j]son [ju]nit [o]ffenses [pa]cman [p]rogress [q]uiet [s]imple [t]ap [w]orst custom formatter class name -o, --out FILE Write output to a file instead of STDOUT. This option applies to the previously specified --format, or the default format if no format is specified. -r, --require FILE Require Ruby file. --fail-level SEVERITY Minimum severity (A/R/C/W/E/F) for exit with error code. --display-only-fail-level-offenses Only output offense messages at the specified --fail-level or above --show-cops [COP1,COP2,...] Shows the given cops, or all cops by default, and their configurations for the current directory. -F, --fail-fast Inspect files in order of modification time and stop after the first file containing offenses. -C, --cache FLAG Use result caching (FLAG=true) or don't (FLAG=false), default determined by configuration parameter AllCops: UseCache. -d, --debug Display debug info. -D, --[no-]display-cop-names Display cop names in offense messages. Default is true. -E, --extra-details Display extra details in offense messages. -S, --display-style-guide Display style guide URLs in offense messages. -a, --auto-correct Auto-correct offenses. --disable-pending-cops Run without pending cops. --enable-pending-cops Run with pending cops. --ignore-disable-comments Run cops even when they are disabled locally with a comment. --safe Run only safe cops. --[no-]color Force color output on or off. -v, --version Display version. -V, --verbose-version Display verbose version. -P, --parallel Use available CPUs to execute inspection in parallel. -l, --lint Run only lint cops. -x, --fix-layout Run only layout cops, with auto-correct on. --safe-auto-correct Run auto-correct only when it's safe. -s, --stdin FILE Pipe source from STDIN, using FILE in offense reports. This is useful for editor integration.","title":"Help content"},{"location":"descriptors/ruby_rubocop/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : rubocop:0.82.0 rubocop-github:0.16.0 rubocop-performance:1.7.1 rubocop-rails:2.5 rubocop-rspec:1.41.0","title":"Installation on mega-linter Docker image"},{"location":"descriptors/ruby_rubocop/#example-success-log","text":"Results of rubocop linter (version 0.82.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ruby_rubocop/ ----------------------------------------------- [SUCCESS] .automation/test/ruby/ruby_good_1.rb Inspecting 1 file . 1 file inspected, no offenses detected","title":"Example success log"},{"location":"descriptors/ruby_rubocop/#example-error-log","text":"Results of rubocop linter (version 0.82.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/ruby_rubocop/ ----------------------------------------------- [ERROR] .automation/test/ruby/ruby_bad_1.rb Inspecting 1 file C Offenses: mp/lint/.automation/test/ruby/ruby_bad_1.rb:1:1: C: Style/FrozenStringLiteralComment: Missing frozen string literal comment. mp/lint/.automation/test/ruby/ruby_bad_1.rb:11:11: C: Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. File.open('/tmp/urls.txt', \" w\" ) do | file| ^^^^^^^^^^^^^^^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:11:32: C: Layout/SpaceInsideParens: Space inside parentheses detected. File.open('/tmp/urls.txt', \" w\" ) do | file| ^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:11:39: C: Layout/SpaceAroundBlockParameters: Space before first block parameter detected. File.open('/tmp/urls.txt', \" w\" ) do | file| ^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:12:24: C: Layout/SpaceAroundBlockParameters: Space after last block parameter detected. Hook.active.map do |h | ^ mp/lint/.automation/test/ruby/ruby_bad_1.rb:13:13: C: Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets. urls = [ ARRAY_OF_URLS_CALLING_INSTANCE] ^ 1 file inspected, 6 offenses detected","title":"Example error log"},{"location":"descriptors/rust/","text":"RUST Linters Linter Configuration key clippy RUST Linted files File extensions: .rs Configuration in Mega-Linter Variable Description Default value RUST_FILTER_REGEX_INCLUDE Custom regex including filter RUST_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y ENV PATH=\"/root/.cargo/bin:${PATH}\"","title":"All RUST linters"},{"location":"descriptors/rust/#rust","text":"","title":"RUST"},{"location":"descriptors/rust/#linters","text":"Linter Configuration key clippy RUST","title":"Linters"},{"location":"descriptors/rust/#linted-files","text":"File extensions: .rs","title":"Linted files"},{"location":"descriptors/rust/#configuration-in-mega-linter","text":"Variable Description Default value RUST_FILTER_REGEX_INCLUDE Custom regex including filter RUST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/rust/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rust/#installation","text":"Dockerfile commands : RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y ENV PATH=\"/root/.cargo/bin:${PATH}\"","title":"Installation"},{"location":"descriptors/rust_clippy/","text":"clippy clippy documentation Version in Mega-Linter: 0.0.212 Visit Official Web Site See How to configure clippy rules See How to disable clippy rules in files See Index of problems detected by clippy Configuration in Mega-Linter Enable clippy by adding RUST_CLIPPY in ENABLE_LINTERS variable Disable clippy by adding RUST_CLIPPY in DISABLE_LINTERS variable Variable Description Default value RUST_CLIPPY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUST_CLIPPY_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RUST_CLIPPY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RUST_CLIPPY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rs\"] RUST_CLIPPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUST_CLIPPY_FILE_NAME clippy configuration file name Use LINTER_DEFAULT to let the linter find it .clippy.toml RUST_CLIPPY_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RUST_CLIPPY_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use clippy in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom Atom IDE Rest Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 rust Mega-Linter optimized for RUST based projects 30 Behind the scenes How are identified applicable files File extensions: .rs Example calls cargo clippy Help content Rust's package manager USAGE: cargo [+toolchain] [OPTIONS] [SUBCOMMAND] OPTIONS: -V, --version Print version info and exit --list List installed commands --explain <CODE> Run `rustc --explain CODE` -v, --verbose Use verbose output (-vv very verbose/build.rs output) -q, --quiet No output printed to stdout --color <WHEN> Coloring: auto, always, never --frozen Require Cargo.lock and cache are up to date --locked Require Cargo.lock is up to date --offline Run without accessing the network -Z <FLAG>... Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details -h, --help Prints help information Some common cargo commands are (see all commands with --list): build, b Compile the current package check, c Analyze the current package and report errors, but don't build object files clean Remove the target directory doc Build this package's and its dependencies' documentation new Create a new cargo package init Create a new cargo package in an existing directory run, r Run a binary or example of the local package test, t Run the tests bench Run the benchmarks update Update dependencies listed in Cargo.lock search Search registry for crates publish Package and upload this package to the registry install Install a Rust binary. Default location is $HOME/.cargo/bin uninstall Uninstall a Rust binary See 'cargo help <command>' for more information on a specific command. Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y ENV PATH=\"/root/.cargo/bin:${PATH}\" # Linter install RUN rustup component add clippy Example success log Results of clippy linter (version 0.0.212) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rust_clippy/ ----------------------------------------------- [SUCCESS] .automation/test/rust/good Checking megalinter v1.0.0 (.automation/test/rust/good) warning: function is never used: `main` --> rust_good_1.rs:9:4 | 9 | fn main() { | ^^^^ | = note: `#[warn(dead_code)]` on by default warning: 1 warning emitted Finished dev [unoptimized + debuginfo] target(s) in 0.24s Example error log Results of clippy linter (version 0.0.212) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rust_clippy/ ----------------------------------------------- [ERROR] .automation/test/rust/bad Checking megalinter v1.0.0 (.automation/test/rust/bad) error: mismatched closing delimiter: `}` --> rust_bad_1.rs:14:1 | 9 | fn main() { | - closing delimiter possibly meant for this ... 13 | println!(\"Hello World!\" | - unclosed delimiter 14 | } | ^ mismatched closing delimiter error: aborting due to previous error error: could not compile `megalinter` To learn more, run the command again with --verbose.","title":"clippy"},{"location":"descriptors/rust_clippy/#clippy","text":"","title":"clippy"},{"location":"descriptors/rust_clippy/#clippy-documentation","text":"Version in Mega-Linter: 0.0.212 Visit Official Web Site See How to configure clippy rules See How to disable clippy rules in files See Index of problems detected by clippy","title":"clippy documentation"},{"location":"descriptors/rust_clippy/#configuration-in-mega-linter","text":"Enable clippy by adding RUST_CLIPPY in ENABLE_LINTERS variable Disable clippy by adding RUST_CLIPPY in DISABLE_LINTERS variable Variable Description Default value RUST_CLIPPY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUST_CLIPPY_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file RUST_CLIPPY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file RUST_CLIPPY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rs\"] RUST_CLIPPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUST_CLIPPY_FILE_NAME clippy configuration file name Use LINTER_DEFAULT to let the linter find it .clippy.toml RUST_CLIPPY_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules RUST_CLIPPY_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/rust_clippy/#ide-integration","text":"Use clippy in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom Atom IDE Rest","title":"IDE Integration"},{"location":"descriptors/rust_clippy/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 rust Mega-Linter optimized for RUST based projects 30","title":"Mega-Linter Flavours"},{"location":"descriptors/rust_clippy/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rust_clippy/#how-are-identified-applicable-files","text":"File extensions: .rs","title":"How are identified applicable files"},{"location":"descriptors/rust_clippy/#example-calls","text":"cargo clippy","title":"Example calls"},{"location":"descriptors/rust_clippy/#help-content","text":"Rust's package manager USAGE: cargo [+toolchain] [OPTIONS] [SUBCOMMAND] OPTIONS: -V, --version Print version info and exit --list List installed commands --explain <CODE> Run `rustc --explain CODE` -v, --verbose Use verbose output (-vv very verbose/build.rs output) -q, --quiet No output printed to stdout --color <WHEN> Coloring: auto, always, never --frozen Require Cargo.lock and cache are up to date --locked Require Cargo.lock is up to date --offline Run without accessing the network -Z <FLAG>... Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details -h, --help Prints help information Some common cargo commands are (see all commands with --list): build, b Compile the current package check, c Analyze the current package and report errors, but don't build object files clean Remove the target directory doc Build this package's and its dependencies' documentation new Create a new cargo package init Create a new cargo package in an existing directory run, r Run a binary or example of the local package test, t Run the tests bench Run the benchmarks update Update dependencies listed in Cargo.lock search Search registry for crates publish Package and upload this package to the registry install Install a Rust binary. Default location is $HOME/.cargo/bin uninstall Uninstall a Rust binary See 'cargo help <command>' for more information on a specific command.","title":"Help content"},{"location":"descriptors/rust_clippy/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y ENV PATH=\"/root/.cargo/bin:${PATH}\" # Linter install RUN rustup component add clippy","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rust_clippy/#example-success-log","text":"Results of clippy linter (version 0.0.212) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rust_clippy/ ----------------------------------------------- [SUCCESS] .automation/test/rust/good Checking megalinter v1.0.0 (.automation/test/rust/good) warning: function is never used: `main` --> rust_good_1.rs:9:4 | 9 | fn main() { | ^^^^ | = note: `#[warn(dead_code)]` on by default warning: 1 warning emitted Finished dev [unoptimized + debuginfo] target(s) in 0.24s","title":"Example success log"},{"location":"descriptors/rust_clippy/#example-error-log","text":"Results of clippy linter (version 0.0.212) See documentation on https://nvuillam.github.io/mega-linter/descriptors/rust_clippy/ ----------------------------------------------- [ERROR] .automation/test/rust/bad Checking megalinter v1.0.0 (.automation/test/rust/bad) error: mismatched closing delimiter: `}` --> rust_bad_1.rs:14:1 | 9 | fn main() { | - closing delimiter possibly meant for this ... 13 | println!(\"Hello World!\" | - unclosed delimiter 14 | } | ^ mismatched closing delimiter error: aborting due to previous error error: could not compile `megalinter` To learn more, run the command again with --verbose.","title":"Example error log"},{"location":"descriptors/salesforce/","text":"SALESFORCE Linters Linter Configuration key sfdx-scanner SALESFORCE_SFDX_SCANNER Linted files Configuration in Mega-Linter Variable Description Default value SALESFORCE_FILTER_REGEX_INCLUDE Custom regex including filter SALESFORCE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation NPM packages (node.js): sfdx-cli","title":"All SALESFORCE linters"},{"location":"descriptors/salesforce/#salesforce","text":"","title":"SALESFORCE"},{"location":"descriptors/salesforce/#linters","text":"Linter Configuration key sfdx-scanner SALESFORCE_SFDX_SCANNER","title":"Linters"},{"location":"descriptors/salesforce/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/salesforce/#configuration-in-mega-linter","text":"Variable Description Default value SALESFORCE_FILTER_REGEX_INCLUDE Custom regex including filter SALESFORCE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/salesforce/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce/#installation","text":"NPM packages (node.js): sfdx-cli","title":"Installation"},{"location":"descriptors/salesforce_sfdx_scanner/","text":"sfdx-scanner sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help sfdx-scanner documentation Version in Mega-Linter: 2.4.0 Visit Official Web Site See How to configure sfdx-scanner rules See How to disable sfdx-scanner rules in files See Index of problems detected by sfdx-scanner Configuration in Mega-Linter Enable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in ENABLE_LINTERS variable Disable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS Run linter but disable crash if errors found false SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app IDE Integration Use sfdx-scanner in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Eclipse pmd-eclipse-plugin Emacs pmd-emacs IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 Behind the scenes How are identified applicable files Example calls sfdx scanner:run Help content evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run [-c <array>] [-r <array>] [-e <array>] [-t <array> | ] [-f csv|html|json|junit|table|xml] [-o <string>] [--tsconfig <string>] [--env <string>] [-v | --json] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] OPTIONS -c, --category=category categor(ies) of rules to run -e, --engine=engine engine(s) to run -f, --format=(csv|html|json|junit|table|xml) format of results -o, --outfile=outfile location of output file -r, --ruleset=ruleset [deprecated] ruleset(s) of rules to run -t, --target=target location of source code -v, --violations-cause-error throws an error when violations are detected --env=env JSON-formatted string, overrides ESLint's default environment variables --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --tsconfig=tsconfig location of tsconfig.json file --verbose emit additional command output to stdout EXAMPLE Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories or rulesets is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" --ruleset \"Braces\" Evaluates all rules in the Design and Best Practices categories, and all rules in the Braces ruleset. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. \u203a Error: EEXIT: 0 \u203a Code: EEXIT NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices Default ruleset...,quickstart,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices Default ruleset...,quickstart,ApexUnit pmd AvoidGlobalModifier apex Best Practices Default ruleset...,Style,quickstart pmd AvoidLogicInTrigger apex Best Practices Default ruleset...,Style,quickstart pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDmlStatementsInLoops apex Performance Performance,Default ruleset... pmd AvoidSoqlInLoops apex Performance Performance,Default ruleset... pmd AvoidSoslInLoops apex Performance Performance,Default ruleset... pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Default ruleset...,quickstart,Security pmd ApexCRUDViolation apex Security Default ruleset...,quickstart,Security pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Default ruleset...,quickstart,Security pmd ApexInsecureEndpoint apex Security Default ruleset...,quickstart,Security pmd ApexOpenRedirect apex Security Default ruleset...,quickstart,Security pmd ApexSharingViolations apex Security Default ruleset...,quickstart,Security pmd ApexSOQLInjection apex Security Default ruleset...,quickstart,Security pmd ApexSuggestUsingNamedCred apex Security Default ruleset...,quickstart,Security pmd ApexXSSFromEscapeFalse apex Security Default ruleset...,quickstart,Security pmd ApexXSSFromURLParam apex Security Default ruleset...,quickstart,Security pmd ClassNamingConventions apex Code Style Default ruleset...,Style,quickstart pmd IfElseStmtsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd IfStmtsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Default ruleset...,Style,quickstart pmd OneDeclarationPerLine apex Code Style Default ruleset...,quickstart pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Default ruleset...,Style pmd WhileLoopsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd AvoidDeeplyNestedIfStmts apex Design Default ruleset...,quickstart,Complexity pmd CyclomaticComplexity apex Design Default ruleset...,quickstart,Metrics tempora... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design Default ruleset...,quickstart,Complexity pmd ExcessiveParameterList apex Design Default ruleset...,quickstart,Complexity pmd ExcessivePublicCount apex Design Default ruleset...,quickstart,Complexity pmd NcssConstructorCount apex Design Default ruleset...,quickstart,Complexity pmd NcssMethodCount apex Design Default ruleset...,quickstart,Complexity pmd NcssTypeCount apex Design Default ruleset...,quickstart,Complexity pmd StdCyclomaticComplexity apex Design Default ruleset...,quickstart,Complexity pmd TooManyFields apex Design Default ruleset...,quickstart,Complexity pmd ApexDoc apex Documentation Default ruleset...,quickstart pmd ApexCSRF apex Error Prone Default ruleset...,quickstart pmd AvoidDirectAccessTriggerMap apex Error Prone Default ruleset...,Style,quickstart pmd AvoidHardcodingId apex Error Prone Default ruleset...,Style,quickstart pmd EmptyCatchBlock apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyIfStmt apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyStatementBlock apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyTryOrFinallyBlock apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyWhileStmt apex Error Prone Default ruleset...,quickstart,Empty Code pmd MethodWithSameNameAsEnclosingClass apex Error Prone Default ruleset...,Style,quickstart pmd AvoidNonExistentAnnotations apex Error Prone Default ruleset...,quickstart pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript getter-return typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-const-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-dupe-args typescript Possible Errors Possible Errors eslint-typescript no-dupe-class-members typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-dupe-keys typescript Possible Errors Possible Errors eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-extra-semi typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-new-symbol typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-redeclare typescript Best Practices Best Practices eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-this-before-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-undef typescript Variables Variables eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unreachable typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-unused-vars typescript Variables Variables eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript valid-typeof typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-ts-ignore typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/camelcase typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/class-name-casing typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/interface-name-prefix typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript Installation on mega-linter Docker image Dockerfile commands : RUN sfdx plugins:install @salesforce/sfdx-scanner Example success log Results of sfdx-scanner linter (version 2.4.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [SUCCESS] /tmp/098844eb-9b85-4505-b6b6-8c6bcd96050f No rule violations found. Example error log Results of sfdx-scanner linter (version 2.4.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [ERROR] /tmp/a62282d7-5f53-42be-9816-03d1c2da8715 LOCATION DESCRIPTION CATEGORY U R L \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 force-app/main/default/classes/SoqlInLoop.cls:1 Apex classes should declare a sharing model if DML Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexsharingviolations or SOQL/SOSL is used force-app/main/default/classes/SoqlInLoop.cls:1 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:2 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:4 Avoid Soql queries inside loops Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#avoidsoqlinloops force-app/main/default/classes/SoqlInLoop.cls:4 Avoid operations in loops that may hit governor Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#operationwithlimitsinloop limits force-app/main/default/classes/SoqlInLoop.cls:4 Validate CRUD permission before SOQL/DML operation Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexcrudviolation force-app/main/default/classes/SoqlInLoop.cls:4 Variable 'accounts' defined but not used Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#unusedlocalvariable force-app/main/default/triggers/trgUser.trigger:1 Avoid logic in triggers Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#avoidlogicintrigger force-app/main/default/triggers/trgUser.trigger:4 The static field name 'BaseURI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#fieldnamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:4 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'BaseURI' starts with uppercase character. force-app/main/default/triggers/trgUser.trigger:7 The local variable name 'URI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#localvariablenamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:7 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'URI' starts with uppercase character. force-app/main/default/aura/auraIf/auraIfController.js:49 'event' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars force-app/main/default/aura/auraIf/auraIfController.js:49 'helper' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars ERROR running scanner:run: Detected rule violations of severity 1 or lower. Please see the logs above.","title":"sfdx-scanner"},{"location":"descriptors/salesforce_sfdx_scanner/#sfdx-scanner","text":"sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help","title":"sfdx-scanner"},{"location":"descriptors/salesforce_sfdx_scanner/#sfdx-scanner-documentation","text":"Version in Mega-Linter: 2.4.0 Visit Official Web Site See How to configure sfdx-scanner rules See How to disable sfdx-scanner rules in files See Index of problems detected by sfdx-scanner","title":"sfdx-scanner documentation"},{"location":"descriptors/salesforce_sfdx_scanner/#configuration-in-mega-linter","text":"Enable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in ENABLE_LINTERS variable Disable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS Run linter but disable crash if errors found false SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app","title":"Configuration in Mega-Linter"},{"location":"descriptors/salesforce_sfdx_scanner/#ide-integration","text":"Use sfdx-scanner in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Eclipse pmd-eclipse-plugin Emacs pmd-emacs IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack","title":"IDE Integration"},{"location":"descriptors/salesforce_sfdx_scanner/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72","title":"Mega-Linter Flavours"},{"location":"descriptors/salesforce_sfdx_scanner/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce_sfdx_scanner/#how-are-identified-applicable-files","text":"","title":"How are identified applicable files"},{"location":"descriptors/salesforce_sfdx_scanner/#example-calls","text":"sfdx scanner:run","title":"Example calls"},{"location":"descriptors/salesforce_sfdx_scanner/#help-content","text":"evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run [-c <array>] [-r <array>] [-e <array>] [-t <array> | ] [-f csv|html|json|junit|table|xml] [-o <string>] [--tsconfig <string>] [--env <string>] [-v | --json] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] OPTIONS -c, --category=category categor(ies) of rules to run -e, --engine=engine engine(s) to run -f, --format=(csv|html|json|junit|table|xml) format of results -o, --outfile=outfile location of output file -r, --ruleset=ruleset [deprecated] ruleset(s) of rules to run -t, --target=target location of source code -v, --violations-cause-error throws an error when violations are detected --env=env JSON-formatted string, overrides ESLint's default environment variables --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --tsconfig=tsconfig location of tsconfig.json file --verbose emit additional command output to stdout EXAMPLE Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories or rulesets is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" --ruleset \"Braces\" Evaluates all rules in the Design and Best Practices categories, and all rules in the Braces ruleset. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. \u203a Error: EEXIT: 0 \u203a Code: EEXIT NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices Default ruleset...,quickstart,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices Default ruleset...,quickstart,ApexUnit pmd AvoidGlobalModifier apex Best Practices Default ruleset...,Style,quickstart pmd AvoidLogicInTrigger apex Best Practices Default ruleset...,Style,quickstart pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDmlStatementsInLoops apex Performance Performance,Default ruleset... pmd AvoidSoqlInLoops apex Performance Performance,Default ruleset... pmd AvoidSoslInLoops apex Performance Performance,Default ruleset... pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Default ruleset...,quickstart,Security pmd ApexCRUDViolation apex Security Default ruleset...,quickstart,Security pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Default ruleset...,quickstart,Security pmd ApexInsecureEndpoint apex Security Default ruleset...,quickstart,Security pmd ApexOpenRedirect apex Security Default ruleset...,quickstart,Security pmd ApexSharingViolations apex Security Default ruleset...,quickstart,Security pmd ApexSOQLInjection apex Security Default ruleset...,quickstart,Security pmd ApexSuggestUsingNamedCred apex Security Default ruleset...,quickstart,Security pmd ApexXSSFromEscapeFalse apex Security Default ruleset...,quickstart,Security pmd ApexXSSFromURLParam apex Security Default ruleset...,quickstart,Security pmd ClassNamingConventions apex Code Style Default ruleset...,Style,quickstart pmd IfElseStmtsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd IfStmtsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Default ruleset...,Style,quickstart pmd OneDeclarationPerLine apex Code Style Default ruleset...,quickstart pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Default ruleset...,Style pmd WhileLoopsMustUseBraces apex Code Style Default ruleset...,Braces,quickstart pmd AvoidDeeplyNestedIfStmts apex Design Default ruleset...,quickstart,Complexity pmd CyclomaticComplexity apex Design Default ruleset...,quickstart,Metrics tempora... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design Default ruleset...,quickstart,Complexity pmd ExcessiveParameterList apex Design Default ruleset...,quickstart,Complexity pmd ExcessivePublicCount apex Design Default ruleset...,quickstart,Complexity pmd NcssConstructorCount apex Design Default ruleset...,quickstart,Complexity pmd NcssMethodCount apex Design Default ruleset...,quickstart,Complexity pmd NcssTypeCount apex Design Default ruleset...,quickstart,Complexity pmd StdCyclomaticComplexity apex Design Default ruleset...,quickstart,Complexity pmd TooManyFields apex Design Default ruleset...,quickstart,Complexity pmd ApexDoc apex Documentation Default ruleset...,quickstart pmd ApexCSRF apex Error Prone Default ruleset...,quickstart pmd AvoidDirectAccessTriggerMap apex Error Prone Default ruleset...,Style,quickstart pmd AvoidHardcodingId apex Error Prone Default ruleset...,Style,quickstart pmd EmptyCatchBlock apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyIfStmt apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyStatementBlock apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyTryOrFinallyBlock apex Error Prone Default ruleset...,quickstart,Empty Code pmd EmptyWhileStmt apex Error Prone Default ruleset...,quickstart,Empty Code pmd MethodWithSameNameAsEnclosingClass apex Error Prone Default ruleset...,Style,quickstart pmd AvoidNonExistentAnnotations apex Error Prone Default ruleset...,quickstart pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript getter-return typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-const-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-dupe-args typescript Possible Errors Possible Errors eslint-typescript no-dupe-class-members typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-dupe-keys typescript Possible Errors Possible Errors eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-extra-semi typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-new-symbol typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-redeclare typescript Best Practices Best Practices eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-this-before-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-undef typescript Variables Variables eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unreachable typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-unused-vars typescript Variables Variables eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript valid-typeof typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-ts-ignore typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/camelcase typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/class-name-casing typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/interface-name-prefix typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript","title":"Help content"},{"location":"descriptors/salesforce_sfdx_scanner/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN sfdx plugins:install @salesforce/sfdx-scanner","title":"Installation on mega-linter Docker image"},{"location":"descriptors/salesforce_sfdx_scanner/#example-success-log","text":"Results of sfdx-scanner linter (version 2.4.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [SUCCESS] /tmp/098844eb-9b85-4505-b6b6-8c6bcd96050f No rule violations found.","title":"Example success log"},{"location":"descriptors/salesforce_sfdx_scanner/#example-error-log","text":"Results of sfdx-scanner linter (version 2.4.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [ERROR] /tmp/a62282d7-5f53-42be-9816-03d1c2da8715 LOCATION DESCRIPTION CATEGORY U R L \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 force-app/main/default/classes/SoqlInLoop.cls:1 Apex classes should declare a sharing model if DML Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexsharingviolations or SOQL/SOSL is used force-app/main/default/classes/SoqlInLoop.cls:1 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:2 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:4 Avoid Soql queries inside loops Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#avoidsoqlinloops force-app/main/default/classes/SoqlInLoop.cls:4 Avoid operations in loops that may hit governor Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#operationwithlimitsinloop limits force-app/main/default/classes/SoqlInLoop.cls:4 Validate CRUD permission before SOQL/DML operation Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexcrudviolation force-app/main/default/classes/SoqlInLoop.cls:4 Variable 'accounts' defined but not used Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#unusedlocalvariable force-app/main/default/triggers/trgUser.trigger:1 Avoid logic in triggers Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#avoidlogicintrigger force-app/main/default/triggers/trgUser.trigger:4 The static field name 'BaseURI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#fieldnamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:4 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'BaseURI' starts with uppercase character. force-app/main/default/triggers/trgUser.trigger:7 The local variable name 'URI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#localvariablenamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:7 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'URI' starts with uppercase character. force-app/main/default/aura/auraIf/auraIfController.js:49 'event' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars force-app/main/default/aura/auraIf/auraIfController.js:49 'helper' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars ERROR running scanner:run: Detected rule violations of severity 1 or lower. Please see the logs above.","title":"Example error log"},{"location":"descriptors/scala/","text":"SCALA Linters Linter Configuration key scalafix SCALA Linted files File extensions: .scala Configuration in Mega-Linter Variable Description Default value SCALA_FILTER_REGEX_INCLUDE Custom regex including filter SCALA_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier","title":"All SCALA linters"},{"location":"descriptors/scala/#scala","text":"","title":"SCALA"},{"location":"descriptors/scala/#linters","text":"Linter Configuration key scalafix SCALA","title":"Linters"},{"location":"descriptors/scala/#linted-files","text":"File extensions: .scala","title":"Linted files"},{"location":"descriptors/scala/#configuration-in-mega-linter","text":"Variable Description Default value SCALA_FILTER_REGEX_INCLUDE Custom regex including filter SCALA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/scala/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/scala/#installation","text":"Dockerfile commands : RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier","title":"Installation"},{"location":"descriptors/scala_scalafix/","text":"scalafix scalafix documentation Version in Mega-Linter: 0.9.24 Visit Official Web Site See How to configure scalafix rules If custom .scalafix.conf is not found, .scalafix.conf will be used See How to disable scalafix rules in files See Index of problems detected by scalafix Configuration in Mega-Linter Enable scalafix by adding SCALA_SCALAFIX in ENABLE_LINTERS variable Disable scalafix by adding SCALA_SCALAFIX in DISABLE_LINTERS variable Variable Description Default value SCALA_SCALAFIX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SCALA_SCALAFIX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SCALA_SCALAFIX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scala\"] SCALA_SCALAFIX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SCALA_SCALAFIX_FILE_NAME scalafix configuration file name Use LINTER_DEFAULT to let the linter find it .scalafix.conf SCALA_SCALAFIX_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SCALA_SCALAFIX_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 scala Mega-Linter optimized for SCALA based projects 30 Behind the scenes How are identified applicable files File extensions: .scala Example calls scalafix --check myfile.scala scalafix --check --config .scalafix.conf myfile.scala scalafix --config .scalafix.conf myfile.scala Help content Scalafix 0.9.24 Usage: scalafix [options] [<path> ...] Scalafix is a refactoring and linting tool. Scalafix supports both syntactic and semantic linter and rewrite rules. Syntactic rules can run on source code without compilation. Semantic rules can run on source code that has been compiled with the SemanticDB compiler plugin. Common options: --rules | -r [String ...] (default: []) Scalafix rules to run, for example ExplicitResultTypes. The syntax for rules is documented in https://scalacenter.github.io/scalafix/docs/users/configuration#rules --files | -f [<path> ...] (default: []) Files or directories (recursively visited) to fix. --config <path> (default: null) File path to a .scalafix.conf configuration file. Defaults to .scalafix.conf in the current working directory, if any. --check Check that all files have been fixed with scalafix, exiting with non-zero code on violations. Won't write to files. --stdout Print fixed output to stdout instead of writing in-place. --diff If set, only apply scalafix to added and edited files in git diff against the master branch. --diff-base String (default: null) If set, only apply scalafix to added and edited files in git diff against a provided branch, commit or tag. --syntactic Run only syntactic rules, ignore semantic rules even if they are explicitly configured in .scalafix.conf or via --rules --triggered Overlay the default rules & rule settings in .scalafix.conf with the `triggered` section --verbose Print out additional diagnostics while running scalafix. --help | -h Print out this help message and exit --version | -v Print out version number and exit Semantic options: --classpath Classpath (default: \"<classpath>\") Full classpath of the files to fix, required for semantic rules. The source files that should be fixed must be compiled with semanticdb-scalac. Dependencies are required by rules like ExplicitResultTypes, but the dependencies do not need to be compiled with semanticdb-scalac. --sourceroot <path> (default: null) Absolute path passed to semanticdb with -P:semanticdb:sourceroot:<path>. Relative filenames persisted in the Semantic DB are absolutized by the sourceroot. Defaults to current working directory if not provided. --auto-classpath If set, automatically infer the --classpath flag by scanning for directories with META-INF/semanticdb --auto-classpath-roots [<path> ...] (default: []) Additional directories to scan for --auto-classpath --scalac-options [String ...] (default: []) The scala compiler options used to compile this --classpath, for example -Ywarn-unused-import --scala-version String (default: \"2.13.4\") The Scala compiler version that was used to compile this project. Tab completions: --bash Print out bash tab completions. To install: ``` # macOS, requires \"brew install bash-completion\" scalafix --bash > /usr/local/etc/bash_completion.d/scalafix # Linux scalafix --bash > /etc/bash_completion.d/scalafix ``` --zsh Print out zsh tab completions. To install: ``` scalafix --zsh > /usr/local/share/zsh/site-functions/_scalafix unfunction _scalafix autoload -U _scalafix ``` Less common options: --exclude [<glob> ...] (default: []) Unix-style glob for files to exclude from fixing. The glob syntax is defined by `nio.FileSystem.getPathMatcher`. --tool-classpath URLClassLoader (default: \"<classloader>\") Additional classpath for compiling and classloading custom rules, as a set of filesystem paths, separated by ':' on Unix or ';' on Windows. --charset Charset (default: \"UTF-8\") The encoding to use for reading/writing files --no-sys-exit If set, throw exception in the end instead of System.exit --no-stale-semanticdb Don't error on stale semanticdb files. --settings ScalafixConfig (default: {}) Custom settings to override .scalafix.conf --out-from String (default: null) Write fixed output to custom location instead of in-place. Regex is passed as first argument to file.replaceAll(--out-from, --out-to), requires --out-to. --out-to String (default: null) Companion of --out-from, string that is passed as second argument to fileToFix.replaceAll(--out-from, --out-to) --auto-suppress-linter-errors Insert /* scalafix:ok */ suppressions instead of reporting linter errors. --cwd <path> (default: \"/\") The current working directory Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier # Linter install RUN ./coursier install scalafix --quiet --install-dir /usr/bin Example success log Results of scalafix linter (version 0.9.24) See documentation on https://nvuillam.github.io/mega-linter/descriptors/scala_scalafix/ ----------------------------------------------- [SUCCESS] .automation/test/scala/scala_good_1.scala Example error log Results of scalafix linter (version 0.9.24) See documentation on https://nvuillam.github.io/mega-linter/descriptors/scala_scalafix/ ----------------------------------------------- [ERROR] .automation/test/scala/scala_bad_1.scala .automation/test/scala/scala_bad_1.scala:3:34: error: [DisableSyntax.offensive] Please consider a less offensive word such as 'extension' or 'enrichment' println(\"Hello, world of pimps !\") ^^^^","title":"scalafix"},{"location":"descriptors/scala_scalafix/#scalafix","text":"","title":"scalafix"},{"location":"descriptors/scala_scalafix/#scalafix-documentation","text":"Version in Mega-Linter: 0.9.24 Visit Official Web Site See How to configure scalafix rules If custom .scalafix.conf is not found, .scalafix.conf will be used See How to disable scalafix rules in files See Index of problems detected by scalafix","title":"scalafix documentation"},{"location":"descriptors/scala_scalafix/#configuration-in-mega-linter","text":"Enable scalafix by adding SCALA_SCALAFIX in ENABLE_LINTERS variable Disable scalafix by adding SCALA_SCALAFIX in DISABLE_LINTERS variable Variable Description Default value SCALA_SCALAFIX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SCALA_SCALAFIX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SCALA_SCALAFIX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scala\"] SCALA_SCALAFIX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SCALA_SCALAFIX_FILE_NAME scalafix configuration file name Use LINTER_DEFAULT to let the linter find it .scalafix.conf SCALA_SCALAFIX_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SCALA_SCALAFIX_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/scala_scalafix/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 scala Mega-Linter optimized for SCALA based projects 30","title":"Mega-Linter Flavours"},{"location":"descriptors/scala_scalafix/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/scala_scalafix/#how-are-identified-applicable-files","text":"File extensions: .scala","title":"How are identified applicable files"},{"location":"descriptors/scala_scalafix/#example-calls","text":"scalafix --check myfile.scala scalafix --check --config .scalafix.conf myfile.scala scalafix --config .scalafix.conf myfile.scala","title":"Example calls"},{"location":"descriptors/scala_scalafix/#help-content","text":"Scalafix 0.9.24 Usage: scalafix [options] [<path> ...] Scalafix is a refactoring and linting tool. Scalafix supports both syntactic and semantic linter and rewrite rules. Syntactic rules can run on source code without compilation. Semantic rules can run on source code that has been compiled with the SemanticDB compiler plugin. Common options: --rules | -r [String ...] (default: []) Scalafix rules to run, for example ExplicitResultTypes. The syntax for rules is documented in https://scalacenter.github.io/scalafix/docs/users/configuration#rules --files | -f [<path> ...] (default: []) Files or directories (recursively visited) to fix. --config <path> (default: null) File path to a .scalafix.conf configuration file. Defaults to .scalafix.conf in the current working directory, if any. --check Check that all files have been fixed with scalafix, exiting with non-zero code on violations. Won't write to files. --stdout Print fixed output to stdout instead of writing in-place. --diff If set, only apply scalafix to added and edited files in git diff against the master branch. --diff-base String (default: null) If set, only apply scalafix to added and edited files in git diff against a provided branch, commit or tag. --syntactic Run only syntactic rules, ignore semantic rules even if they are explicitly configured in .scalafix.conf or via --rules --triggered Overlay the default rules & rule settings in .scalafix.conf with the `triggered` section --verbose Print out additional diagnostics while running scalafix. --help | -h Print out this help message and exit --version | -v Print out version number and exit Semantic options: --classpath Classpath (default: \"<classpath>\") Full classpath of the files to fix, required for semantic rules. The source files that should be fixed must be compiled with semanticdb-scalac. Dependencies are required by rules like ExplicitResultTypes, but the dependencies do not need to be compiled with semanticdb-scalac. --sourceroot <path> (default: null) Absolute path passed to semanticdb with -P:semanticdb:sourceroot:<path>. Relative filenames persisted in the Semantic DB are absolutized by the sourceroot. Defaults to current working directory if not provided. --auto-classpath If set, automatically infer the --classpath flag by scanning for directories with META-INF/semanticdb --auto-classpath-roots [<path> ...] (default: []) Additional directories to scan for --auto-classpath --scalac-options [String ...] (default: []) The scala compiler options used to compile this --classpath, for example -Ywarn-unused-import --scala-version String (default: \"2.13.4\") The Scala compiler version that was used to compile this project. Tab completions: --bash Print out bash tab completions. To install: ``` # macOS, requires \"brew install bash-completion\" scalafix --bash > /usr/local/etc/bash_completion.d/scalafix # Linux scalafix --bash > /etc/bash_completion.d/scalafix ``` --zsh Print out zsh tab completions. To install: ``` scalafix --zsh > /usr/local/share/zsh/site-functions/_scalafix unfunction _scalafix autoload -U _scalafix ``` Less common options: --exclude [<glob> ...] (default: []) Unix-style glob for files to exclude from fixing. The glob syntax is defined by `nio.FileSystem.getPathMatcher`. --tool-classpath URLClassLoader (default: \"<classloader>\") Additional classpath for compiling and classloading custom rules, as a set of filesystem paths, separated by ':' on Unix or ';' on Windows. --charset Charset (default: \"UTF-8\") The encoding to use for reading/writing files --no-sys-exit If set, throw exception in the end instead of System.exit --no-stale-semanticdb Don't error on stale semanticdb files. --settings ScalafixConfig (default: {}) Custom settings to override .scalafix.conf --out-from String (default: null) Write fixed output to custom location instead of in-place. Regex is passed as first argument to file.replaceAll(--out-from, --out-to), requires --out-to. --out-to String (default: null) Companion of --out-from, string that is passed as second argument to fileToFix.replaceAll(--out-from, --out-to) --auto-suppress-linter-errors Insert /* scalafix:ok */ suppressions instead of reporting linter errors. --cwd <path> (default: \"/\") The current working directory","title":"Help content"},{"location":"descriptors/scala_scalafix/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier # Linter install RUN ./coursier install scalafix --quiet --install-dir /usr/bin","title":"Installation on mega-linter Docker image"},{"location":"descriptors/scala_scalafix/#example-success-log","text":"Results of scalafix linter (version 0.9.24) See documentation on https://nvuillam.github.io/mega-linter/descriptors/scala_scalafix/ ----------------------------------------------- [SUCCESS] .automation/test/scala/scala_good_1.scala","title":"Example success log"},{"location":"descriptors/scala_scalafix/#example-error-log","text":"Results of scalafix linter (version 0.9.24) See documentation on https://nvuillam.github.io/mega-linter/descriptors/scala_scalafix/ ----------------------------------------------- [ERROR] .automation/test/scala/scala_bad_1.scala .automation/test/scala/scala_bad_1.scala:3:34: error: [DisableSyntax.offensive] Please consider a less offensive word such as 'extension' or 'enrichment' println(\"Hello, world of pimps !\") ^^^^","title":"Example error log"},{"location":"descriptors/snakemake/","text":"SNAKEMAKE Linters Linter Configuration key snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT Linted files File extensions: .smk File names: Snakefile Configuration in Mega-Linter Variable Description Default value SNAKEMAKE_FILTER_REGEX_INCLUDE Custom regex including filter SNAKEMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SNAKEMAKE linters"},{"location":"descriptors/snakemake/#snakemake","text":"","title":"SNAKEMAKE"},{"location":"descriptors/snakemake/#linters","text":"Linter Configuration key snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT","title":"Linters"},{"location":"descriptors/snakemake/#linted-files","text":"File extensions: .smk File names: Snakefile","title":"Linted files"},{"location":"descriptors/snakemake/#configuration-in-mega-linter","text":"Variable Description Default value SNAKEMAKE_FILTER_REGEX_INCLUDE Custom regex including filter SNAKEMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/snakemake_snakefmt/","text":"snakefmt snakefmt documentation Version in Mega-Linter: 0.2.5 Visit Official Web Site See How to configure snakefmt rules If custom .snakefmt.toml is not found, .snakefmt.toml will be used Configuration in Mega-Linter Enable snakefmt by adding SNAKEMAKE_SNAKEFMT in ENABLE_LINTERS variable Disable snakefmt by adding SNAKEMAKE_SNAKEFMT in DISABLE_LINTERS variable Enable auto-fixes by adding SNAKEMAKE_SNAKEFMT in APPLY_FIXES variable Variable Description Default value SNAKEMAKE_SNAKEFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_SNAKEFMT_FILE_NAME snakefmt configuration file name Use LINTER_DEFAULT to let the linter find it .snakefmt.toml SNAKEMAKE_SNAKEFMT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .smk File names: Snakefile Example calls snakefmt --check --compact-diff Snakefile snakefmt --check --compact-diff --config .snakefmt.toml Snakefile snakefmt --config .snakefmt.toml Snakefile Help content Usage: snakefmt [OPTIONS] [SRC]... The uncompromising Snakemake code formatter. SRC specifies directories and files to format. Directories will be searched for file names that conform to the include/exclude patterns provided. Files are modified in-place by default; use diff, check, or `snakefmt - < Snakefile` to avoid this. Options: -l, --line-length INT Lines longer than INT will be wrapped. [default: 88] --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an error. -d, --diff Don't write the files back, just output a diff for each file to stdout. --compact-diff Same as --diff but only shows lines that would change plus a few lines of context. --include PATTERN A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.smk$|^Snakefile)] --exclude PATTERN A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.snakemake|\\.eg gs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\\.tox|\\.venv|\\.svn|_ build|buck-out|build|dist)] -c, --config PATH Read configuration from PATH. By default, will try to read from `./pyproject.toml` -h, --help Show this message and exit. -V, --version Show the version and exit. -v, --verbose Turns on debug-level logging. Installation on mega-linter Docker image PIP packages (Python): snakefmt Example success log Results of snakefmt linter (version 0.2.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakefmt/ ----------------------------------------------- [SUCCESS] .automation/test/snakemake/snakemake_good_1.smk =====> Diff for .automation/test/snakemake/snakemake_good_1.smk <===== [INFO] All 1 file(s) would be left unchanged \ud83c\udf89 Example error log Results of snakefmt linter (version 0.2.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakefmt/ ----------------------------------------------- [ERROR] .automation/test/snakemake/snakemake_bad_1.smk =====> Diff for .automation/test/snakemake/snakemake_bad_1.smk <===== --- original +++ new @@ -1,10 +1,11 @@ rule all: input: - file1='result.txt', + file1=\"result.txt\", + rule simulation: output: - file1=\"result.txt\" + file1=\"result.txt\", shell: \"\"\" touch {output} [INFO] 1 file(s) would be changed \ud83d\ude2c","title":"snakefmt"},{"location":"descriptors/snakemake_snakefmt/#snakefmt","text":"","title":"snakefmt"},{"location":"descriptors/snakemake_snakefmt/#snakefmt-documentation","text":"Version in Mega-Linter: 0.2.5 Visit Official Web Site See How to configure snakefmt rules If custom .snakefmt.toml is not found, .snakefmt.toml will be used","title":"snakefmt documentation"},{"location":"descriptors/snakemake_snakefmt/#configuration-in-mega-linter","text":"Enable snakefmt by adding SNAKEMAKE_SNAKEFMT in ENABLE_LINTERS variable Disable snakefmt by adding SNAKEMAKE_SNAKEFMT in DISABLE_LINTERS variable Enable auto-fixes by adding SNAKEMAKE_SNAKEFMT in APPLY_FIXES variable Variable Description Default value SNAKEMAKE_SNAKEFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_SNAKEFMT_FILE_NAME snakefmt configuration file name Use LINTER_DEFAULT to let the linter find it .snakefmt.toml SNAKEMAKE_SNAKEFMT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/snakemake_snakefmt/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/snakemake_snakefmt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/snakemake_snakefmt/#how-are-identified-applicable-files","text":"File extensions: .smk File names: Snakefile","title":"How are identified applicable files"},{"location":"descriptors/snakemake_snakefmt/#example-calls","text":"snakefmt --check --compact-diff Snakefile snakefmt --check --compact-diff --config .snakefmt.toml Snakefile snakefmt --config .snakefmt.toml Snakefile","title":"Example calls"},{"location":"descriptors/snakemake_snakefmt/#help-content","text":"Usage: snakefmt [OPTIONS] [SRC]... The uncompromising Snakemake code formatter. SRC specifies directories and files to format. Directories will be searched for file names that conform to the include/exclude patterns provided. Files are modified in-place by default; use diff, check, or `snakefmt - < Snakefile` to avoid this. Options: -l, --line-length INT Lines longer than INT will be wrapped. [default: 88] --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an error. -d, --diff Don't write the files back, just output a diff for each file to stdout. --compact-diff Same as --diff but only shows lines that would change plus a few lines of context. --include PATTERN A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.smk$|^Snakefile)] --exclude PATTERN A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.snakemake|\\.eg gs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\\.tox|\\.venv|\\.svn|_ build|buck-out|build|dist)] -c, --config PATH Read configuration from PATH. By default, will try to read from `./pyproject.toml` -h, --help Show this message and exit. -V, --version Show the version and exit. -v, --verbose Turns on debug-level logging.","title":"Help content"},{"location":"descriptors/snakemake_snakefmt/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): snakefmt","title":"Installation on mega-linter Docker image"},{"location":"descriptors/snakemake_snakefmt/#example-success-log","text":"Results of snakefmt linter (version 0.2.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakefmt/ ----------------------------------------------- [SUCCESS] .automation/test/snakemake/snakemake_good_1.smk =====> Diff for .automation/test/snakemake/snakemake_good_1.smk <===== [INFO] All 1 file(s) would be left unchanged \ud83c\udf89","title":"Example success log"},{"location":"descriptors/snakemake_snakefmt/#example-error-log","text":"Results of snakefmt linter (version 0.2.4) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakefmt/ ----------------------------------------------- [ERROR] .automation/test/snakemake/snakemake_bad_1.smk =====> Diff for .automation/test/snakemake/snakemake_bad_1.smk <===== --- original +++ new @@ -1,10 +1,11 @@ rule all: input: - file1='result.txt', + file1=\"result.txt\", + rule simulation: output: - file1=\"result.txt\" + file1=\"result.txt\", shell: \"\"\" touch {output} [INFO] 1 file(s) would be changed \ud83d\ude2c","title":"Example error log"},{"location":"descriptors/snakemake_snakemake/","text":"snakemake documentation Version in Mega-Linter: 5.30.2 Visit Official Web Site Configuration in Mega-Linter Enable snakemake by adding SNAKEMAKE_LINT in ENABLE_LINTERS variable Disable snakemake by adding SNAKEMAKE_LINT in DISABLE_LINTERS variable Variable Description Default value SNAKEMAKE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SNAKEMAKE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use snakemake in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA SnakeCharm Visual Studio Code VsCode SnakeMake Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .smk File names: Snakefile Example calls snakemake --lint -s Snakefile Help content usage: snakemake [-h] [--dry-run] [--profile PROFILE] [--cache [RULE [RULE ...]]] [--snakefile FILE] [--cores [N]] [--local-cores N] [--resources [NAME=INT [NAME=INT ...]]] [--set-threads RULE=THREADS [RULE=THREADS ...]] [--set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...]] [--default-resources [NAME=INT [NAME=INT ...]]] [--preemption-default PREEMPTION_DEFAULT] [--preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...]] [--config [KEY=VALUE [KEY=VALUE ...]]] [--configfile FILE [FILE ...]] [--envvars VARNAME [VARNAME ...]] [--directory DIR] [--touch] [--keep-going] [--force] [--forceall] [--forcerun [TARGET [TARGET ...]]] [--prioritize TARGET [TARGET ...]] [--batch RULE=BATCH/BATCHES] [--until TARGET [TARGET ...]] [--omit-from TARGET [TARGET ...]] [--rerun-incomplete] [--shadow-prefix DIR] [--scheduler [{ilp,greedy}]] [--wms-monitor [WMS_MONITOR]] [--scheduler-ilp-solver {PULP_CBC_CMD,PULP_CHOCO_CMD}] [--no-subworkflows] [--groups GROUPS [GROUPS ...]] [--group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...]] [--report [FILE]] [--report-stylesheet CSSFILE] [--edit-notebook TARGET] [--notebook-listen IP:PORT] [--lint [{text,json}]] [--generate-unit-tests [TESTPATH]] [--export-cwl FILE] [--list] [--list-target-rules] [--dag] [--rulegraph] [--filegraph] [--d3dag] [--summary] [--detailed-summary] [--archive FILE] [--cleanup-metadata FILE [FILE ...]] [--cleanup-shadow] [--skip-script-cleanup] [--unlock] [--list-version-changes] [--list-code-changes] [--list-input-changes] [--list-params-changes] [--list-untracked] [--delete-all-output] [--delete-temp-output] [--bash-completion] [--keep-incomplete] [--drop-metadata] [--version] [--reason] [--gui [PORT]] [--printshellcmds] [--debug-dag] [--stats FILE] [--nocolor] [--quiet] [--print-compilation] [--verbose] [--force-use-threads] [--allow-ambiguity] [--nolock] [--ignore-incomplete] [--max-inventory-time SECONDS] [--latency-wait SECONDS] [--wait-for-files [FILE [FILE ...]]] [--notemp] [--keep-remote] [--keep-target-files] [--allowed-rules ALLOWED_RULES [ALLOWED_RULES ...]] [--max-jobs-per-second MAX_JOBS_PER_SECOND] [--max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND] [-T RESTART_TIMES] [--attempt ATTEMPT] [--wrapper-prefix WRAPPER_PREFIX] [--default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob}] [--default-remote-prefix DEFAULT_REMOTE_PREFIX] [--no-shared-fs] [--greediness GREEDINESS] [--no-hooks] [--overwrite-shellcmd OVERWRITE_SHELLCMD] [--debug] [--runtime-profile FILE] [--mode {0,1,2}] [--show-failed-logs] [--log-handler-script FILE] [--log-service {none,slack}] [--cluster CMD | --cluster-sync CMD | --drmaa [ARGS]] [--cluster-config FILE] [--immediate-submit] [--jobscript SCRIPT] [--jobname NAME] [--cluster-status CLUSTER_STATUS] [--drmaa-log-dir DIR] [--kubernetes [NAMESPACE]] [--container-image IMAGE] [--tibanna] [--tibanna-sfn TIBANNA_SFN] [--precommand PRECOMMAND] [--tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...]] [--google-lifesciences] [--google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...]] [--google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION] [--google-lifesciences-keep-cache] [--tes URL] [--use-conda] [--list-conda-envs] [--conda-prefix DIR] [--conda-cleanup-envs] [--conda-cleanup-pkgs [{tarballs,cache}]] [--conda-create-envs-only] [--conda-frontend {conda,mamba}] [--use-singularity] [--singularity-prefix DIR] [--singularity-args ARGS] [--use-envmodules] [target [target ...]] Snakemake is a Python based language and execution environment for GNU Make- like workflows. optional arguments: -h, --help show this help message and exit EXECUTION: target Targets to build. May be rules or files. (default: None) --dry-run, --dryrun, -n Do not execute anything, and display what would be done. If you have a very large workflow, use --dry-run --quiet to just print a summary of the DAG of jobs. (default: False) --profile PROFILE Name of profile to use for configuring Snakemake. Snakemake will search for a corresponding folder in /etc/xdg/snakemake and /root/.config/snakemake. Alternatively, this can be an absolute or relative path. The profile folder has to contain a file 'config.yaml'. This file can be used to set default values for command line options in YAML format. For example, '--cluster qsub' becomes 'cluster: qsub' in the YAML file. Profiles can be obtained from https://github.com/snakemake-profiles. (default: None) --cache [RULE [RULE ...]] Store output files of given rules in a central cache given by the environment variable $SNAKEMAKE_OUTPUT_CACHE. Likewise, retrieve output files of the given rules from this cache if they have been created before (by anybody writing to the same cache), instead of actually executing the rules. Output files are identified by hashing all steps, parameters and software stack (conda envs or containers) needed to create them. (default: None) --snakefile FILE, -s FILE The workflow definition in form of a snakefile.Usually, you should not need to specify this. By default, Snakemake will search for 'Snakefile', 'snakefile', 'workflow/Snakefile', 'workflow/snakefile' beneath the current working directory, in this order. Only if you definitely want a different layout, you need to use this parameter. (default: None) --cores [N], --jobs [N], -j [N] Use at most N CPU cores/jobs in parallel. If N is omitted or 'all', the limit is set to the number of available CPU cores. (default: None) --local-cores N In cluster mode, use at most N cores of the host machine in parallel (default: number of CPU cores of the host). The cores are used to execute local rules. This option is ignored when not in cluster mode. (default: 2) --resources [NAME=INT [NAME=INT ...]], --res [NAME=INT [NAME=INT ...]] Define additional resources that shall constrain the scheduling analogously to threads (see above). A resource is defined as a name and an integer value. E.g. --resources mem_mb=1000. Rules can use resources by defining the resource keyword, e.g. resources: mem_mb=600. If now two rules require 600 of the resource 'mem_mb' they won't be run in parallel by the scheduler. (default: None) --set-threads RULE=THREADS [RULE=THREADS ...] Overwrite thread usage of rules. This allows to fine- tune workflow parallelization. In particular, this is helpful to target certain cluster nodes by e.g. shifting a rule to use more, or less threads than defined in the workflow. Thereby, THREADS has to be a positive integer, and RULE has to be the name of the rule. (default: None) --set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...] Overwrite number of scatter items of scattergather processes. This allows to fine-tune workflow parallelization. Thereby, SCATTERITEMS has to be a positive integer, and NAME has to be the name of the scattergather process defined via a scattergather directive in the workflow. (default: None) --default-resources [NAME=INT [NAME=INT ...]], --default-res [NAME=INT [NAME=INT ...]] Define default values of resources for rules that do not define their own values. In addition to plain integers, python expressions over inputsize are allowed (e.g. '2*input.size_mb').When specifying this without any arguments (--default-resources), it defines 'mem_mb=max(2*input.size_mb, 1000)' 'disk_mb=max(2*input.size_mb, 1000)', i.e., default disk and mem usage is twice the input file size but at least 1GB. (default: None) --preemption-default PREEMPTION_DEFAULT A preemptible instance can be requested when using the Google Life Sciences API. If you set a --preemption- default,all rules will be subject to the default. Specifically, this integer is the number of restart attempts that will be made given that the instance is killed unexpectedly. Note that preemptible instances have a maximum running time of 24 hours. If you want to set preemptible instances for only a subset of rules, use --preemptible-rules instead. (default: None) --preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...] A preemptible instance can be requested when using the Google Life Sciences API. If you want to use these instances for a subset of your rules, you can use --preemptible-rules and then specify a list of rule and integer pairs, where each integer indicates the number of restarts to use for the rule's instance in the case that the instance is terminated unexpectedly. --preemptible-rules can be used in combination with --preemption-default, and will take priority. Note that preemptible instances have a maximum running time of 24. If you want to apply a consistent number of retries across all your rules, use --premption-default instead. Example: snakemake --preemption-default 10 --preemptible-rules map_reads=3 call_variants=0 (default: None) --config [KEY=VALUE [KEY=VALUE ...]], -C [KEY=VALUE [KEY=VALUE ...]] Set or overwrite values in the workflow config object. The workflow config object is accessible as variable config inside the workflow. Default values can be set by providing a JSON file (see Documentation). (default: None) --configfile FILE [FILE ...], --configfiles FILE [FILE ...] Specify or overwrite the config file of the workflow (see the docs). Values specified in JSON or YAML format are available in the global config dictionary inside the workflow. Multiple files overwrite each other in the given order. (default: None) --envvars VARNAME [VARNAME ...] Environment variables to pass to cloud jobs. (default: None) --directory DIR, -d DIR Specify working directory (relative paths in the snakefile will use this as their origin). (default: None) --touch, -t Touch output files (mark them up to date without really changing them) instead of running their commands. This is used to pretend that the rules were executed, in order to fool future invocations of snakemake. Fails if a file does not yet exist. Note that this will only touch files that would otherwise be recreated by Snakemake (e.g. because their input files are newer). For enforcing a touch, combine this with --force, --forceall, or --forcerun. Note however that you loose the provenance information when the files have been created in realitiy. Hence, this should be used only as a last resort. (default: False) --keep-going, -k Go on with independent jobs if a job fails. (default: False) --force, -f Force the execution of the selected target or the first rule regardless of already created output. (default: False) --forceall, -F Force the execution of the selected (or the first) rule and all rules it is dependent on regardless of already created output. (default: False) --forcerun [TARGET [TARGET ...]], -R [TARGET [TARGET ...]] Force the re-execution or creation of the given rules or files. Use this option if you changed a rule and want to have all its output in your workflow updated. (default: None) --prioritize TARGET [TARGET ...], -P TARGET [TARGET ...] Tell the scheduler to assign creation of given targets (and all their dependencies) highest priority. (EXPERIMENTAL) (default: None) --batch RULE=BATCH/BATCHES Only create the given BATCH of the input files of the given RULE. This can be used to iteratively run parts of very large workflows. Only the execution plan of the relevant part of the workflow has to be calculated, thereby speeding up DAG computation. It is recommended to provide the most suitable rule for batching when documenting a workflow. It should be some aggregating rule that would be executed only once, and has a large number of input files. For example, it can be a rule that aggregates over samples. (default: None) --until TARGET [TARGET ...], -U TARGET [TARGET ...] Runs the pipeline until it reaches the specified rules or files. Only runs jobs that are dependencies of the specified rule or files, does not run sibling DAGs. (default: None) --omit-from TARGET [TARGET ...], -O TARGET [TARGET ...] Prevent the execution or creation of the given rules or files as well as any rules or files that are downstream of these targets in the DAG. Also runs jobs in sibling DAGs that are independent of the rules or files specified here. (default: None) --rerun-incomplete, --ri Re-run all jobs the output of which is recognized as incomplete. (default: False) --shadow-prefix DIR Specify a directory in which the 'shadow' directory is created. If not supplied, the value is set to the '.snakemake' directory relative to the working directory. (default: None) --scheduler [{ilp,greedy}] Specifies if jobs are selected by a greedy algorithm or by solving an ilp. The ilp scheduler aims to reduce runtime and hdd usage by best possible use of resources. (default: greedy) --wms-monitor [WMS_MONITOR] IP and port of workflow management system to monitor the execution of snakemake (e.g. http://127.0.0.1:5000 (default: None) --scheduler-ilp-solver {PULP_CBC_CMD,PULP_CHOCO_CMD} Specifies solver to be utilized when selecting ilp- scheduler. (default: COIN_CMD) --no-subworkflows, --nosw Do not evaluate or execute subworkflows. (default: False) GROUPING: --groups GROUPS [GROUPS ...] Assign rules to groups (this overwrites any group definitions from the workflow). (default: None) --group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...] Set the number of connected components a group is allowed to span. By default, this is 1, but this flag allows to extend this. This can be used to run e.g. 3 jobs of the same rule in the same group, although they are not connected. It can be helpful for putting together many small jobs or benefitting of shared memory setups. (default: None) REPORTS: --report [FILE] Create an HTML report with results and statistics. This can be either a .html file or a .zip file. In the former case, all results are embedded into the .html (this only works for small data). In the latter case, results are stored along with a file report.html in the zip archive. If no filename is given, an embedded report.html is the default. (default: None) --report-stylesheet CSSFILE Custom stylesheet to use for report. In particular, this can be used for branding the report with e.g. a custom logo, see docs. (default: None) NOTEBOOKS: --edit-notebook TARGET Interactively edit the notebook associated with the rule used to generate the given target file. This will start a local jupyter notebook server. Any changes to the notebook should be saved, and the server has to be stopped by closing the notebook and hitting the 'Quit' button on the jupyter dashboard. Afterwards, the updated notebook will be automatically stored in the path defined in the rule. If the notebook is not yet present, this will create an empty draft. (default: None) --notebook-listen IP:PORT The IP address and PORT the notebook server used for editing the notebook (--edit-notebook) will listen on. (default: localhost:8888) UTILITIES: --lint [{text,json}] Perform linting on the given workflow. This will print snakemake specific suggestions to improve code quality (work in progress, more lints to be added in the future). If no argument is provided, plain text output is used. (default: None) --generate-unit-tests [TESTPATH] Automatically generate unit tests for each workflow rule. This assumes that all input files of each job are already present. Rules without a job with present input files will be skipped (a warning will be issued). For each rule, one test case will be created in the specified test folder (.tests/unit by default). After successfull execution, tests can be run with 'pytest TESTPATH'. (default: None) --export-cwl FILE Compile workflow to CWL and store it in given FILE. (default: None) --list, -l Show available rules in given Snakefile. (default: False) --list-target-rules, --lt Show available target rules in given Snakefile. (default: False) --dag Do not execute anything and print the directed acyclic graph of jobs in the dot language. Recommended use on Unix systems: snakemake --dag | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --rulegraph Do not execute anything and print the dependency graph of rules in the dot language. This will be less crowded than above DAG of jobs, but also show less information. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --rulegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --filegraph Do not execute anything and print the dependency graph of rules with their input and output files in the dot language. This is an intermediate solution between above DAG of jobs and the rule graph. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --filegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --d3dag Print the DAG in D3.js compatible JSON format. (default: False) --summary, -S Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, status, plan. Thereby rule version contains the versionthe file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --detailed-summary, -D Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, input file(s), shell command, status, plan. Thereby rule version contains the version the file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. The input file and shell command columns are self explanatory. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --archive FILE Archive the workflow into the given tar archive FILE. The archive will be created such that the workflow can be re-executed on a vanilla system. The function needs conda and git to be installed. It will archive every file that is under git version control. Note that it is best practice to have the Snakefile, config files, and scripts under version control. Hence, they will be included in the archive. Further, it will add input files that are not generated by by the workflow itself and conda environments. Note that symlinks are dereferenced. Supported formats are .tar, .tar.gz, .tar.bz2 and .tar.xz. (default: None) --cleanup-metadata FILE [FILE ...], --cm FILE [FILE ...] Cleanup the metadata of given files. That means that snakemake removes any tracked version info, and any marks that files are incomplete. (default: None) --cleanup-shadow Cleanup old shadow directories which have not been deleted due to failures or power loss. (default: False) --skip-script-cleanup Don't delete wrapper scripts used for execution (default: False) --unlock Remove a lock on the working directory. (default: False) --list-version-changes, --lv List all output files that have been created with a different version (as determined by the version keyword). (default: False) --list-code-changes, --lc List all output files for which the rule body (run or shell) have changed in the Snakefile. (default: False) --list-input-changes, --li List all output files for which the defined input files have changed in the Snakefile (e.g. new input files were added in the rule definition or files were renamed). For listing input file modification in the filesystem, use --summary. (default: False) --list-params-changes, --lp List all output files for which the defined params have changed in the Snakefile. (default: False) --list-untracked, --lu List all files in the working directory that are not used in the workflow. This can be used e.g. for identifying leftover files. Hidden files and directories are ignored. (default: False) --delete-all-output Remove all files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. Write-protected files are not removed. Nevertheless, use with care! (default: False) --delete-temp-output Remove all temporary files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. (default: False) --bash-completion Output code to register bash completion for snakemake. Put the following in your .bashrc (including the accents): `snakemake --bash-completion` or issue it in an open terminal session. (default: False) --keep-incomplete Do not remove incomplete output files by failed jobs. (default: False) --drop-metadata Drop metadata file tracking information after job finishes. Provenance-information based reports (e.g. --report and the --list_x_changes functions) will be empty or incomplete. (default: False) --version, -v show program's version number and exit OUTPUT: --reason, -r Print the reason for each executed rule. (default: False) --gui [PORT] Serve an HTML based user interface to the given network and port e.g. 168.129.10.15:8000. By default Snakemake is only available in the local network (default port: 8000). To make Snakemake listen to all ip addresses add the special host address 0.0.0.0 to the url (0.0.0.0:8000). This is important if Snakemake is used in a virtualised environment like Docker. If possible, a browser window is opened. (default: None) --printshellcmds, -p Print out the shell commands that will be executed. (default: False) --debug-dag Print candidate and selected jobs (including their wildcards) while inferring DAG. This can help to debug unexpected DAG topology or errors. (default: False) --stats FILE Write stats about Snakefile execution in JSON format to the given file. (default: None) --nocolor Do not use a colored output. (default: False) --quiet, -q Do not output any progress or rule information. (default: False) --print-compilation Print the python representation of the workflow. (default: False) --verbose Print debugging output. (default: False) BEHAVIOR: --force-use-threads Force threads rather than processes. Helpful if shared memory (/dev/shm) is full or unavailable. (default: False) --allow-ambiguity, -a Don't check for ambiguous rules and simply use the first if several can produce the same file. This allows the user to prioritize rules by their order in the snakefile. (default: False) --nolock Do not lock the working directory (default: False) --ignore-incomplete, --ii Do not check for incomplete output files. (default: False) --max-inventory-time SECONDS Spend at most SECONDS seconds to create a file inventory for the working directory. The inventory vastly speeds up file modification and existence checks when computing which jobs need to be executed. However, creating the inventory itself can be slow, e.g. on network file systems. Hence, we do not spend more than a given amount of time and fall back to individual checks for the rest. (default: 20) --latency-wait SECONDS, --output-wait SECONDS, -w SECONDS Wait given seconds if an output file of a job is not present after the job finished. This helps if your filesystem suffers from latency (default 5). (default: 5) --wait-for-files [FILE [FILE ...]] Wait --latency-wait seconds for these files to be present before executing the workflow. This option is used internally to handle filesystem latency in cluster environments. (default: None) --notemp, --nt Ignore temp() declarations. This is useful when running only a part of the workflow, since temp() would lead to deletion of probably needed files by other parts of the workflow. (default: False) --keep-remote Keep local copies of remote input files. (default: False) --keep-target-files Do not adjust the paths of given target files relative to the working directory. (default: False) --allowed-rules ALLOWED_RULES [ALLOWED_RULES ...] Only consider given rules. If omitted, all rules in Snakefile are used. Note that this is intended primarily for internal use and may lead to unexpected results otherwise. (default: None) --max-jobs-per-second MAX_JOBS_PER_SECOND Maximal number of cluster/drmaa jobs per second, default is 10, fractions allowed. (default: 10) --max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND Maximal number of job status checks per second, default is 10, fractions allowed. (default: 10) -T RESTART_TIMES, --restart-times RESTART_TIMES Number of times to restart failing jobs (defaults to 0). (default: 0) --attempt ATTEMPT Internal use only: define the initial value of the attempt parameter (default: 1). (default: 1) --wrapper-prefix WRAPPER_PREFIX Prefix for URL created from wrapper directive (default: https://github.com/snakemake/snakemake- wrappers/raw/). Set this to a different URL to use your fork or a local clone of the repository, e.g., use a git URL like 'git+file://path/to/your/local/clone@'. (default: https://github.com/snakemake/snakemake-wrappers/raw/) --default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob} Specify default remote provider to be used for all input and output files that don't yet specify one. (default: None) --default-remote-prefix DEFAULT_REMOTE_PREFIX Specify prefix for default remote provider. E.g. a bucket name. (default: ) --no-shared-fs Do not assume that jobs share a common file system. When this flag is activated, Snakemake will assume that the filesystem on a cluster node is not shared with other nodes. For example, this will lead to downloading remote files on each cluster node separately. Further, it won't take special measures to deal with filesystem latency issues. This option will in most cases only make sense in combination with --default-remote-provider. Further, when using --cluster you will have to also provide --cluster- status. Only activate this if you know what you are doing. (default: False) --greediness GREEDINESS Set the greediness of scheduling. This value between 0 and 1 determines how careful jobs are selected for execution. The default value (1.0) provides the best speed and still acceptable scheduling quality. (default: None) --no-hooks Do not invoke onstart, onsuccess or onerror hooks after execution. (default: False) --overwrite-shellcmd OVERWRITE_SHELLCMD Provide a shell command that shall be executed instead of those given in the workflow. This is for debugging purposes only. (default: None) --debug Allow to debug rules with e.g. PDB. This flag allows to set breakpoints in run blocks. (default: False) --runtime-profile FILE Profile Snakemake and write the output to FILE. This requires yappi to be installed. (default: None) --mode {0,1,2} Set execution mode of Snakemake (internal use only). (default: 0) --show-failed-logs Automatically display logs of failed jobs. (default: False) --log-handler-script FILE Provide a custom script containing a function 'def log_handler(msg):'. Snakemake will call this function for every logging output (given as a dictionary msg)allowing to e.g. send notifications in the form of e.g. slack messages or emails. (default: None) --log-service {none,slack} Set a specific messaging service for logging output.Snakemake will notify the service on errors and completed execution.Currently only slack is supported. (default: None) CLUSTER: --cluster CMD, -c CMD Execute snakemake rules with the given submit command, e.g. qsub. Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. The submit command can be decorated to make it aware of certain job properties (name, rulename, input, output, params, wildcards, log, threads and dependencies (see the argument below)), e.g.: $ snakemake --cluster 'qsub -pe threaded {threads}'. (default: None) --cluster-sync CMD cluster submission command will block, returning the remote exitstatus upon remote termination (for example, this should be usedif the cluster command is 'qsub -sync y' (SGE) (default: None) --drmaa [ARGS] Execute snakemake on a cluster accessed via DRMAA, Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. ARGS can be used to specify options of the underlying cluster system, thereby using the job properties name, rulename, input, output, params, wildcards, log, threads and dependencies, e.g.: --drmaa ' -pe threaded {threads}'. Note that ARGS must be given in quotes and with a leading whitespace. (default: None) --cluster-config FILE, -u FILE A JSON or YAML file that defines the wildcards used in 'cluster'for specific rules, instead of having them specified in the Snakefile. For example, for rule 'job' you may define: { 'job' : { 'time' : '24:00:00' } } to specify the time for rule 'job'. You can specify more than one file. The configuration files are merged with later values overriding earlier ones. This option is deprecated in favor of using --profile, see docs. (default: []) --immediate-submit, --is Immediately submit all jobs to the cluster instead of waiting for present input files. This will fail, unless you make the cluster aware of job dependencies, e.g. via: $ snakemake --cluster 'sbatch --dependency {dependencies}. Assuming that your submit script (here sbatch) outputs the generated job id to the first stdout line, {dependencies} will be filled with space separated job ids this job depends on. (default: False) --jobscript SCRIPT, --js SCRIPT Provide a custom job script for submission to the cluster. The default script resides as 'jobscript.sh' in the installation directory. (default: None) --jobname NAME, --jn NAME Provide a custom name for the jobscript that is submitted to the cluster (see --cluster). NAME is \"snakejob.{name}.{jobid}.sh\" per default. The wildcard {jobid} has to be present in the name. (default: snakejob.{name}.{jobid}.sh) --cluster-status CLUSTER_STATUS Status command for cluster execution. This is only considered in combination with the --cluster flag. If provided, Snakemake will use the status command to determine if a job has finished successfully or failed. For this it is necessary that the submit command provided to --cluster returns the cluster job id. Then, the status command will be invoked with the job id. Snakemake expects it to return 'success' if the job was successfull, 'failed' if the job failed and 'running' if the job still runs. (default: None) --drmaa-log-dir DIR Specify a directory in which stdout and stderr files of DRMAA jobs will be written. The value may be given as a relative path, in which case Snakemake will use the current invocation directory as the origin. If given, this will override any given '-o' and/or '-e' native specification. If not given, all DRMAA stdout and stderr files are written to the current working directory. (default: None) KUBERNETES: --kubernetes [NAMESPACE] Execute workflow in a kubernetes cluster (in the cloud). NAMESPACE is the namespace you want to use for your job (if nothing specified: 'default'). Usually, this requires --default-remote-provider and --default- remote-prefix to be set to a S3 or GS bucket where your . data shall be stored. It is further advisable to activate conda integration via --use-conda. (default: None) --container-image IMAGE Docker image to use, e.g., when submitting jobs to kubernetes Defaults to 'https://hub.docker.com/r/snakemake/snakemake', tagged with the same version as the currently running Snakemake instance. Note that overwriting this value is up to your responsibility. Any used image has to contain a working snakemake installation that is compatible with (or ideally the same as) the currently running version. (default: None) TIBANNA: --tibanna Execute workflow on AWS cloud using Tibanna. This requires --default-remote-prefix to be set to S3 bucket name and prefix (e.g. 'bucketname/subdirectory') where input is already stored and output will be sent to. Using --tibanna implies --default-resources is set as default. Optionally, use --precommand to specify any preparation command to run before snakemake command on the cloud (inside snakemake container on Tibanna VM). Also, --use-conda, --use-singularity, --config, --configfile are supported and will be carried over. (default: False) --tibanna-sfn TIBANNA_SFN Name of Tibanna Unicorn step function (e.g. tibanna_unicorn_monty).This works as serverless scheduler/resource allocator and must be deployed first using tibanna cli. (e.g. tibanna deploy_unicorn --usergroup=monty --buckets=bucketname) (default: None) --precommand PRECOMMAND Any command to execute before snakemake command on AWS cloud such as wget, git clone, unzip, etc. This is used with --tibanna.Do not include input/output download/upload commands - file transfer between S3 bucket and the run environment (container) is automatically handled by Tibanna. (default: None) --tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...] Additional tibanna config e.g. --tibanna-config spot_instance=true subnet=<subnet_id> security group=<security_group_id> (default: None) GOOGLE_LIFE_SCIENCE: --google-lifesciences Execute workflow on Google Cloud cloud using the Google Life. Science API. This requires default application credentials (json) to be created and export to the environment to use Google Cloud Storage, Compute Engine, and Life Sciences. The credential file should be exported as GOOGLE_APPLICATION_CREDENTIALS for snakemake to discover. Also, --use-conda, --use- singularity, --config, --configfile are supported and will be carried over. (default: False) --google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...] Specify one or more valid instance regions (defaults to US) (default: ['us-east1', 'us-west1', 'us- central1']) --google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION The Life Sciences API service used to schedule the jobs. E.g., us-centra1 (Iowa) and europe-west2 (London) Watch the terminal output to see all options found to be available. If not specified, defaults to the first found with a matching prefix from regions specified with --google-lifesciences-regions. (default: None) --google-lifesciences-keep-cache Cache workflows in your Google Cloud Storage Bucket specified by --default-remote-prefix/{source}/{cache}. Each workflow working directory is compressed to a .tar.gz, named by the hash of the contents, and kept in Google Cloud Storage. By default, the caches are deleted at the shutdown step of the workflow. (default: False) TES: --tes URL Send workflow tasks to GA4GH TES server specified by url. (default: None) CONDA: --use-conda If defined in the rule, run job in a conda environment. If this flag is not set, the conda directive is ignored. (default: False) --list-conda-envs List all conda environments and their location on disk. (default: False) --conda-prefix DIR Specify a directory in which the 'conda' and 'conda- archive' directories are created. These are used to store conda environments and their archives, respectively. If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-conda` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. (default: None) --conda-cleanup-envs Cleanup unused conda environments. (default: False) --conda-cleanup-pkgs [{tarballs,cache}] Cleanup conda packages after creating environments. In case of 'tarballs' mode, will clean up all downloaded package tarballs. In case of 'cache' mode, will additionally clean up unused package caches. If mode is omitted, will default to only cleaning up the tarballs. (default: None) --conda-create-envs-only If specified, only creates the job-specific conda environments then exits. The `--use-conda` flag must also be set. (default: False) --conda-frontend {conda,mamba} Choose the conda frontend for installing environments. Caution: mamba is much faster, but still in beta test. (default: conda) SINGULARITY: --use-singularity If defined in the rule, run job within a singularity container. If this flag is not set, the singularity directive is ignored. (default: False) --singularity-prefix DIR Specify a directory in which singularity images will be stored.If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-singularity` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. (default: None) --singularity-args ARGS Pass additional args to singularity. (default: ) ENVIRONMENT MODULES: --use-envmodules If defined in the rule, run job within the given environment modules, loaded in the given order. This can be combined with --use-conda and --use- singularity, which will then be only used as a fallback for rules which don't define environment modules. (default: False) Installation on mega-linter Docker image PIP packages (Python): snakemake Example success log Results of snakemake linter (version 5.30.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakemake/ ----------------------------------------------- [SUCCESS] .automation/test/snakemake/snakemake_good_1.smk Congratulations, your workflow is in a good condition! Example error log Results of snakemake linter (version 5.30.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakemake/ ----------------------------------------------- [ERROR] .automation/test/snakemake/snakemake_bad_1.smk Lints for rule simulation (line 11, .automation/test/snakemake/snakemake_bad_1.smk): * No log directive defined: Without a log directive, all output will be printed to the terminal. In distributed environments, this means that errors are harder to discover. In local environments, output of concurrent jobs will be mixed and become unreadable. Also see: https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#log-files * Specify a conda environment or container for each rule.: This way, the used software for each specific step is documented, and the workflow can be executed on any machine without prerequisites. Also see: https://snakemake.readthedocs.io/en/latest/snakefiles/deployment.html#integrated-package-management https://snakemake.readthedocs.io/en/latest/snakefiles/deployment.html#running-jobs-in-containers","title":"snakemake"},{"location":"descriptors/snakemake_snakemake/#snakemake-documentation","text":"Version in Mega-Linter: 5.30.2 Visit Official Web Site","title":"snakemake documentation"},{"location":"descriptors/snakemake_snakemake/#configuration-in-mega-linter","text":"Enable snakemake by adding SNAKEMAKE_LINT in ENABLE_LINTERS variable Disable snakemake by adding SNAKEMAKE_LINT in DISABLE_LINTERS variable Variable Description Default value SNAKEMAKE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SNAKEMAKE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/snakemake_snakemake/#ide-integration","text":"Use snakemake in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name IDEA SnakeCharm Visual Studio Code VsCode SnakeMake","title":"IDE Integration"},{"location":"descriptors/snakemake_snakemake/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/snakemake_snakemake/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/snakemake_snakemake/#how-are-identified-applicable-files","text":"File extensions: .smk File names: Snakefile","title":"How are identified applicable files"},{"location":"descriptors/snakemake_snakemake/#example-calls","text":"snakemake --lint -s Snakefile","title":"Example calls"},{"location":"descriptors/snakemake_snakemake/#help-content","text":"usage: snakemake [-h] [--dry-run] [--profile PROFILE] [--cache [RULE [RULE ...]]] [--snakefile FILE] [--cores [N]] [--local-cores N] [--resources [NAME=INT [NAME=INT ...]]] [--set-threads RULE=THREADS [RULE=THREADS ...]] [--set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...]] [--default-resources [NAME=INT [NAME=INT ...]]] [--preemption-default PREEMPTION_DEFAULT] [--preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...]] [--config [KEY=VALUE [KEY=VALUE ...]]] [--configfile FILE [FILE ...]] [--envvars VARNAME [VARNAME ...]] [--directory DIR] [--touch] [--keep-going] [--force] [--forceall] [--forcerun [TARGET [TARGET ...]]] [--prioritize TARGET [TARGET ...]] [--batch RULE=BATCH/BATCHES] [--until TARGET [TARGET ...]] [--omit-from TARGET [TARGET ...]] [--rerun-incomplete] [--shadow-prefix DIR] [--scheduler [{ilp,greedy}]] [--wms-monitor [WMS_MONITOR]] [--scheduler-ilp-solver {PULP_CBC_CMD,PULP_CHOCO_CMD}] [--no-subworkflows] [--groups GROUPS [GROUPS ...]] [--group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...]] [--report [FILE]] [--report-stylesheet CSSFILE] [--edit-notebook TARGET] [--notebook-listen IP:PORT] [--lint [{text,json}]] [--generate-unit-tests [TESTPATH]] [--export-cwl FILE] [--list] [--list-target-rules] [--dag] [--rulegraph] [--filegraph] [--d3dag] [--summary] [--detailed-summary] [--archive FILE] [--cleanup-metadata FILE [FILE ...]] [--cleanup-shadow] [--skip-script-cleanup] [--unlock] [--list-version-changes] [--list-code-changes] [--list-input-changes] [--list-params-changes] [--list-untracked] [--delete-all-output] [--delete-temp-output] [--bash-completion] [--keep-incomplete] [--drop-metadata] [--version] [--reason] [--gui [PORT]] [--printshellcmds] [--debug-dag] [--stats FILE] [--nocolor] [--quiet] [--print-compilation] [--verbose] [--force-use-threads] [--allow-ambiguity] [--nolock] [--ignore-incomplete] [--max-inventory-time SECONDS] [--latency-wait SECONDS] [--wait-for-files [FILE [FILE ...]]] [--notemp] [--keep-remote] [--keep-target-files] [--allowed-rules ALLOWED_RULES [ALLOWED_RULES ...]] [--max-jobs-per-second MAX_JOBS_PER_SECOND] [--max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND] [-T RESTART_TIMES] [--attempt ATTEMPT] [--wrapper-prefix WRAPPER_PREFIX] [--default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob}] [--default-remote-prefix DEFAULT_REMOTE_PREFIX] [--no-shared-fs] [--greediness GREEDINESS] [--no-hooks] [--overwrite-shellcmd OVERWRITE_SHELLCMD] [--debug] [--runtime-profile FILE] [--mode {0,1,2}] [--show-failed-logs] [--log-handler-script FILE] [--log-service {none,slack}] [--cluster CMD | --cluster-sync CMD | --drmaa [ARGS]] [--cluster-config FILE] [--immediate-submit] [--jobscript SCRIPT] [--jobname NAME] [--cluster-status CLUSTER_STATUS] [--drmaa-log-dir DIR] [--kubernetes [NAMESPACE]] [--container-image IMAGE] [--tibanna] [--tibanna-sfn TIBANNA_SFN] [--precommand PRECOMMAND] [--tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...]] [--google-lifesciences] [--google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...]] [--google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION] [--google-lifesciences-keep-cache] [--tes URL] [--use-conda] [--list-conda-envs] [--conda-prefix DIR] [--conda-cleanup-envs] [--conda-cleanup-pkgs [{tarballs,cache}]] [--conda-create-envs-only] [--conda-frontend {conda,mamba}] [--use-singularity] [--singularity-prefix DIR] [--singularity-args ARGS] [--use-envmodules] [target [target ...]] Snakemake is a Python based language and execution environment for GNU Make- like workflows. optional arguments: -h, --help show this help message and exit EXECUTION: target Targets to build. May be rules or files. (default: None) --dry-run, --dryrun, -n Do not execute anything, and display what would be done. If you have a very large workflow, use --dry-run --quiet to just print a summary of the DAG of jobs. (default: False) --profile PROFILE Name of profile to use for configuring Snakemake. Snakemake will search for a corresponding folder in /etc/xdg/snakemake and /root/.config/snakemake. Alternatively, this can be an absolute or relative path. The profile folder has to contain a file 'config.yaml'. This file can be used to set default values for command line options in YAML format. For example, '--cluster qsub' becomes 'cluster: qsub' in the YAML file. Profiles can be obtained from https://github.com/snakemake-profiles. (default: None) --cache [RULE [RULE ...]] Store output files of given rules in a central cache given by the environment variable $SNAKEMAKE_OUTPUT_CACHE. Likewise, retrieve output files of the given rules from this cache if they have been created before (by anybody writing to the same cache), instead of actually executing the rules. Output files are identified by hashing all steps, parameters and software stack (conda envs or containers) needed to create them. (default: None) --snakefile FILE, -s FILE The workflow definition in form of a snakefile.Usually, you should not need to specify this. By default, Snakemake will search for 'Snakefile', 'snakefile', 'workflow/Snakefile', 'workflow/snakefile' beneath the current working directory, in this order. Only if you definitely want a different layout, you need to use this parameter. (default: None) --cores [N], --jobs [N], -j [N] Use at most N CPU cores/jobs in parallel. If N is omitted or 'all', the limit is set to the number of available CPU cores. (default: None) --local-cores N In cluster mode, use at most N cores of the host machine in parallel (default: number of CPU cores of the host). The cores are used to execute local rules. This option is ignored when not in cluster mode. (default: 2) --resources [NAME=INT [NAME=INT ...]], --res [NAME=INT [NAME=INT ...]] Define additional resources that shall constrain the scheduling analogously to threads (see above). A resource is defined as a name and an integer value. E.g. --resources mem_mb=1000. Rules can use resources by defining the resource keyword, e.g. resources: mem_mb=600. If now two rules require 600 of the resource 'mem_mb' they won't be run in parallel by the scheduler. (default: None) --set-threads RULE=THREADS [RULE=THREADS ...] Overwrite thread usage of rules. This allows to fine- tune workflow parallelization. In particular, this is helpful to target certain cluster nodes by e.g. shifting a rule to use more, or less threads than defined in the workflow. Thereby, THREADS has to be a positive integer, and RULE has to be the name of the rule. (default: None) --set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...] Overwrite number of scatter items of scattergather processes. This allows to fine-tune workflow parallelization. Thereby, SCATTERITEMS has to be a positive integer, and NAME has to be the name of the scattergather process defined via a scattergather directive in the workflow. (default: None) --default-resources [NAME=INT [NAME=INT ...]], --default-res [NAME=INT [NAME=INT ...]] Define default values of resources for rules that do not define their own values. In addition to plain integers, python expressions over inputsize are allowed (e.g. '2*input.size_mb').When specifying this without any arguments (--default-resources), it defines 'mem_mb=max(2*input.size_mb, 1000)' 'disk_mb=max(2*input.size_mb, 1000)', i.e., default disk and mem usage is twice the input file size but at least 1GB. (default: None) --preemption-default PREEMPTION_DEFAULT A preemptible instance can be requested when using the Google Life Sciences API. If you set a --preemption- default,all rules will be subject to the default. Specifically, this integer is the number of restart attempts that will be made given that the instance is killed unexpectedly. Note that preemptible instances have a maximum running time of 24 hours. If you want to set preemptible instances for only a subset of rules, use --preemptible-rules instead. (default: None) --preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...] A preemptible instance can be requested when using the Google Life Sciences API. If you want to use these instances for a subset of your rules, you can use --preemptible-rules and then specify a list of rule and integer pairs, where each integer indicates the number of restarts to use for the rule's instance in the case that the instance is terminated unexpectedly. --preemptible-rules can be used in combination with --preemption-default, and will take priority. Note that preemptible instances have a maximum running time of 24. If you want to apply a consistent number of retries across all your rules, use --premption-default instead. Example: snakemake --preemption-default 10 --preemptible-rules map_reads=3 call_variants=0 (default: None) --config [KEY=VALUE [KEY=VALUE ...]], -C [KEY=VALUE [KEY=VALUE ...]] Set or overwrite values in the workflow config object. The workflow config object is accessible as variable config inside the workflow. Default values can be set by providing a JSON file (see Documentation). (default: None) --configfile FILE [FILE ...], --configfiles FILE [FILE ...] Specify or overwrite the config file of the workflow (see the docs). Values specified in JSON or YAML format are available in the global config dictionary inside the workflow. Multiple files overwrite each other in the given order. (default: None) --envvars VARNAME [VARNAME ...] Environment variables to pass to cloud jobs. (default: None) --directory DIR, -d DIR Specify working directory (relative paths in the snakefile will use this as their origin). (default: None) --touch, -t Touch output files (mark them up to date without really changing them) instead of running their commands. This is used to pretend that the rules were executed, in order to fool future invocations of snakemake. Fails if a file does not yet exist. Note that this will only touch files that would otherwise be recreated by Snakemake (e.g. because their input files are newer). For enforcing a touch, combine this with --force, --forceall, or --forcerun. Note however that you loose the provenance information when the files have been created in realitiy. Hence, this should be used only as a last resort. (default: False) --keep-going, -k Go on with independent jobs if a job fails. (default: False) --force, -f Force the execution of the selected target or the first rule regardless of already created output. (default: False) --forceall, -F Force the execution of the selected (or the first) rule and all rules it is dependent on regardless of already created output. (default: False) --forcerun [TARGET [TARGET ...]], -R [TARGET [TARGET ...]] Force the re-execution or creation of the given rules or files. Use this option if you changed a rule and want to have all its output in your workflow updated. (default: None) --prioritize TARGET [TARGET ...], -P TARGET [TARGET ...] Tell the scheduler to assign creation of given targets (and all their dependencies) highest priority. (EXPERIMENTAL) (default: None) --batch RULE=BATCH/BATCHES Only create the given BATCH of the input files of the given RULE. This can be used to iteratively run parts of very large workflows. Only the execution plan of the relevant part of the workflow has to be calculated, thereby speeding up DAG computation. It is recommended to provide the most suitable rule for batching when documenting a workflow. It should be some aggregating rule that would be executed only once, and has a large number of input files. For example, it can be a rule that aggregates over samples. (default: None) --until TARGET [TARGET ...], -U TARGET [TARGET ...] Runs the pipeline until it reaches the specified rules or files. Only runs jobs that are dependencies of the specified rule or files, does not run sibling DAGs. (default: None) --omit-from TARGET [TARGET ...], -O TARGET [TARGET ...] Prevent the execution or creation of the given rules or files as well as any rules or files that are downstream of these targets in the DAG. Also runs jobs in sibling DAGs that are independent of the rules or files specified here. (default: None) --rerun-incomplete, --ri Re-run all jobs the output of which is recognized as incomplete. (default: False) --shadow-prefix DIR Specify a directory in which the 'shadow' directory is created. If not supplied, the value is set to the '.snakemake' directory relative to the working directory. (default: None) --scheduler [{ilp,greedy}] Specifies if jobs are selected by a greedy algorithm or by solving an ilp. The ilp scheduler aims to reduce runtime and hdd usage by best possible use of resources. (default: greedy) --wms-monitor [WMS_MONITOR] IP and port of workflow management system to monitor the execution of snakemake (e.g. http://127.0.0.1:5000 (default: None) --scheduler-ilp-solver {PULP_CBC_CMD,PULP_CHOCO_CMD} Specifies solver to be utilized when selecting ilp- scheduler. (default: COIN_CMD) --no-subworkflows, --nosw Do not evaluate or execute subworkflows. (default: False) GROUPING: --groups GROUPS [GROUPS ...] Assign rules to groups (this overwrites any group definitions from the workflow). (default: None) --group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...] Set the number of connected components a group is allowed to span. By default, this is 1, but this flag allows to extend this. This can be used to run e.g. 3 jobs of the same rule in the same group, although they are not connected. It can be helpful for putting together many small jobs or benefitting of shared memory setups. (default: None) REPORTS: --report [FILE] Create an HTML report with results and statistics. This can be either a .html file or a .zip file. In the former case, all results are embedded into the .html (this only works for small data). In the latter case, results are stored along with a file report.html in the zip archive. If no filename is given, an embedded report.html is the default. (default: None) --report-stylesheet CSSFILE Custom stylesheet to use for report. In particular, this can be used for branding the report with e.g. a custom logo, see docs. (default: None) NOTEBOOKS: --edit-notebook TARGET Interactively edit the notebook associated with the rule used to generate the given target file. This will start a local jupyter notebook server. Any changes to the notebook should be saved, and the server has to be stopped by closing the notebook and hitting the 'Quit' button on the jupyter dashboard. Afterwards, the updated notebook will be automatically stored in the path defined in the rule. If the notebook is not yet present, this will create an empty draft. (default: None) --notebook-listen IP:PORT The IP address and PORT the notebook server used for editing the notebook (--edit-notebook) will listen on. (default: localhost:8888) UTILITIES: --lint [{text,json}] Perform linting on the given workflow. This will print snakemake specific suggestions to improve code quality (work in progress, more lints to be added in the future). If no argument is provided, plain text output is used. (default: None) --generate-unit-tests [TESTPATH] Automatically generate unit tests for each workflow rule. This assumes that all input files of each job are already present. Rules without a job with present input files will be skipped (a warning will be issued). For each rule, one test case will be created in the specified test folder (.tests/unit by default). After successfull execution, tests can be run with 'pytest TESTPATH'. (default: None) --export-cwl FILE Compile workflow to CWL and store it in given FILE. (default: None) --list, -l Show available rules in given Snakefile. (default: False) --list-target-rules, --lt Show available target rules in given Snakefile. (default: False) --dag Do not execute anything and print the directed acyclic graph of jobs in the dot language. Recommended use on Unix systems: snakemake --dag | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --rulegraph Do not execute anything and print the dependency graph of rules in the dot language. This will be less crowded than above DAG of jobs, but also show less information. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --rulegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --filegraph Do not execute anything and print the dependency graph of rules with their input and output files in the dot language. This is an intermediate solution between above DAG of jobs and the rule graph. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --filegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --d3dag Print the DAG in D3.js compatible JSON format. (default: False) --summary, -S Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, status, plan. Thereby rule version contains the versionthe file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --detailed-summary, -D Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, input file(s), shell command, status, plan. Thereby rule version contains the version the file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. The input file and shell command columns are self explanatory. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --archive FILE Archive the workflow into the given tar archive FILE. The archive will be created such that the workflow can be re-executed on a vanilla system. The function needs conda and git to be installed. It will archive every file that is under git version control. Note that it is best practice to have the Snakefile, config files, and scripts under version control. Hence, they will be included in the archive. Further, it will add input files that are not generated by by the workflow itself and conda environments. Note that symlinks are dereferenced. Supported formats are .tar, .tar.gz, .tar.bz2 and .tar.xz. (default: None) --cleanup-metadata FILE [FILE ...], --cm FILE [FILE ...] Cleanup the metadata of given files. That means that snakemake removes any tracked version info, and any marks that files are incomplete. (default: None) --cleanup-shadow Cleanup old shadow directories which have not been deleted due to failures or power loss. (default: False) --skip-script-cleanup Don't delete wrapper scripts used for execution (default: False) --unlock Remove a lock on the working directory. (default: False) --list-version-changes, --lv List all output files that have been created with a different version (as determined by the version keyword). (default: False) --list-code-changes, --lc List all output files for which the rule body (run or shell) have changed in the Snakefile. (default: False) --list-input-changes, --li List all output files for which the defined input files have changed in the Snakefile (e.g. new input files were added in the rule definition or files were renamed). For listing input file modification in the filesystem, use --summary. (default: False) --list-params-changes, --lp List all output files for which the defined params have changed in the Snakefile. (default: False) --list-untracked, --lu List all files in the working directory that are not used in the workflow. This can be used e.g. for identifying leftover files. Hidden files and directories are ignored. (default: False) --delete-all-output Remove all files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. Write-protected files are not removed. Nevertheless, use with care! (default: False) --delete-temp-output Remove all temporary files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. (default: False) --bash-completion Output code to register bash completion for snakemake. Put the following in your .bashrc (including the accents): `snakemake --bash-completion` or issue it in an open terminal session. (default: False) --keep-incomplete Do not remove incomplete output files by failed jobs. (default: False) --drop-metadata Drop metadata file tracking information after job finishes. Provenance-information based reports (e.g. --report and the --list_x_changes functions) will be empty or incomplete. (default: False) --version, -v show program's version number and exit OUTPUT: --reason, -r Print the reason for each executed rule. (default: False) --gui [PORT] Serve an HTML based user interface to the given network and port e.g. 168.129.10.15:8000. By default Snakemake is only available in the local network (default port: 8000). To make Snakemake listen to all ip addresses add the special host address 0.0.0.0 to the url (0.0.0.0:8000). This is important if Snakemake is used in a virtualised environment like Docker. If possible, a browser window is opened. (default: None) --printshellcmds, -p Print out the shell commands that will be executed. (default: False) --debug-dag Print candidate and selected jobs (including their wildcards) while inferring DAG. This can help to debug unexpected DAG topology or errors. (default: False) --stats FILE Write stats about Snakefile execution in JSON format to the given file. (default: None) --nocolor Do not use a colored output. (default: False) --quiet, -q Do not output any progress or rule information. (default: False) --print-compilation Print the python representation of the workflow. (default: False) --verbose Print debugging output. (default: False) BEHAVIOR: --force-use-threads Force threads rather than processes. Helpful if shared memory (/dev/shm) is full or unavailable. (default: False) --allow-ambiguity, -a Don't check for ambiguous rules and simply use the first if several can produce the same file. This allows the user to prioritize rules by their order in the snakefile. (default: False) --nolock Do not lock the working directory (default: False) --ignore-incomplete, --ii Do not check for incomplete output files. (default: False) --max-inventory-time SECONDS Spend at most SECONDS seconds to create a file inventory for the working directory. The inventory vastly speeds up file modification and existence checks when computing which jobs need to be executed. However, creating the inventory itself can be slow, e.g. on network file systems. Hence, we do not spend more than a given amount of time and fall back to individual checks for the rest. (default: 20) --latency-wait SECONDS, --output-wait SECONDS, -w SECONDS Wait given seconds if an output file of a job is not present after the job finished. This helps if your filesystem suffers from latency (default 5). (default: 5) --wait-for-files [FILE [FILE ...]] Wait --latency-wait seconds for these files to be present before executing the workflow. This option is used internally to handle filesystem latency in cluster environments. (default: None) --notemp, --nt Ignore temp() declarations. This is useful when running only a part of the workflow, since temp() would lead to deletion of probably needed files by other parts of the workflow. (default: False) --keep-remote Keep local copies of remote input files. (default: False) --keep-target-files Do not adjust the paths of given target files relative to the working directory. (default: False) --allowed-rules ALLOWED_RULES [ALLOWED_RULES ...] Only consider given rules. If omitted, all rules in Snakefile are used. Note that this is intended primarily for internal use and may lead to unexpected results otherwise. (default: None) --max-jobs-per-second MAX_JOBS_PER_SECOND Maximal number of cluster/drmaa jobs per second, default is 10, fractions allowed. (default: 10) --max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND Maximal number of job status checks per second, default is 10, fractions allowed. (default: 10) -T RESTART_TIMES, --restart-times RESTART_TIMES Number of times to restart failing jobs (defaults to 0). (default: 0) --attempt ATTEMPT Internal use only: define the initial value of the attempt parameter (default: 1). (default: 1) --wrapper-prefix WRAPPER_PREFIX Prefix for URL created from wrapper directive (default: https://github.com/snakemake/snakemake- wrappers/raw/). Set this to a different URL to use your fork or a local clone of the repository, e.g., use a git URL like 'git+file://path/to/your/local/clone@'. (default: https://github.com/snakemake/snakemake-wrappers/raw/) --default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob} Specify default remote provider to be used for all input and output files that don't yet specify one. (default: None) --default-remote-prefix DEFAULT_REMOTE_PREFIX Specify prefix for default remote provider. E.g. a bucket name. (default: ) --no-shared-fs Do not assume that jobs share a common file system. When this flag is activated, Snakemake will assume that the filesystem on a cluster node is not shared with other nodes. For example, this will lead to downloading remote files on each cluster node separately. Further, it won't take special measures to deal with filesystem latency issues. This option will in most cases only make sense in combination with --default-remote-provider. Further, when using --cluster you will have to also provide --cluster- status. Only activate this if you know what you are doing. (default: False) --greediness GREEDINESS Set the greediness of scheduling. This value between 0 and 1 determines how careful jobs are selected for execution. The default value (1.0) provides the best speed and still acceptable scheduling quality. (default: None) --no-hooks Do not invoke onstart, onsuccess or onerror hooks after execution. (default: False) --overwrite-shellcmd OVERWRITE_SHELLCMD Provide a shell command that shall be executed instead of those given in the workflow. This is for debugging purposes only. (default: None) --debug Allow to debug rules with e.g. PDB. This flag allows to set breakpoints in run blocks. (default: False) --runtime-profile FILE Profile Snakemake and write the output to FILE. This requires yappi to be installed. (default: None) --mode {0,1,2} Set execution mode of Snakemake (internal use only). (default: 0) --show-failed-logs Automatically display logs of failed jobs. (default: False) --log-handler-script FILE Provide a custom script containing a function 'def log_handler(msg):'. Snakemake will call this function for every logging output (given as a dictionary msg)allowing to e.g. send notifications in the form of e.g. slack messages or emails. (default: None) --log-service {none,slack} Set a specific messaging service for logging output.Snakemake will notify the service on errors and completed execution.Currently only slack is supported. (default: None) CLUSTER: --cluster CMD, -c CMD Execute snakemake rules with the given submit command, e.g. qsub. Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. The submit command can be decorated to make it aware of certain job properties (name, rulename, input, output, params, wildcards, log, threads and dependencies (see the argument below)), e.g.: $ snakemake --cluster 'qsub -pe threaded {threads}'. (default: None) --cluster-sync CMD cluster submission command will block, returning the remote exitstatus upon remote termination (for example, this should be usedif the cluster command is 'qsub -sync y' (SGE) (default: None) --drmaa [ARGS] Execute snakemake on a cluster accessed via DRMAA, Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. ARGS can be used to specify options of the underlying cluster system, thereby using the job properties name, rulename, input, output, params, wildcards, log, threads and dependencies, e.g.: --drmaa ' -pe threaded {threads}'. Note that ARGS must be given in quotes and with a leading whitespace. (default: None) --cluster-config FILE, -u FILE A JSON or YAML file that defines the wildcards used in 'cluster'for specific rules, instead of having them specified in the Snakefile. For example, for rule 'job' you may define: { 'job' : { 'time' : '24:00:00' } } to specify the time for rule 'job'. You can specify more than one file. The configuration files are merged with later values overriding earlier ones. This option is deprecated in favor of using --profile, see docs. (default: []) --immediate-submit, --is Immediately submit all jobs to the cluster instead of waiting for present input files. This will fail, unless you make the cluster aware of job dependencies, e.g. via: $ snakemake --cluster 'sbatch --dependency {dependencies}. Assuming that your submit script (here sbatch) outputs the generated job id to the first stdout line, {dependencies} will be filled with space separated job ids this job depends on. (default: False) --jobscript SCRIPT, --js SCRIPT Provide a custom job script for submission to the cluster. The default script resides as 'jobscript.sh' in the installation directory. (default: None) --jobname NAME, --jn NAME Provide a custom name for the jobscript that is submitted to the cluster (see --cluster). NAME is \"snakejob.{name}.{jobid}.sh\" per default. The wildcard {jobid} has to be present in the name. (default: snakejob.{name}.{jobid}.sh) --cluster-status CLUSTER_STATUS Status command for cluster execution. This is only considered in combination with the --cluster flag. If provided, Snakemake will use the status command to determine if a job has finished successfully or failed. For this it is necessary that the submit command provided to --cluster returns the cluster job id. Then, the status command will be invoked with the job id. Snakemake expects it to return 'success' if the job was successfull, 'failed' if the job failed and 'running' if the job still runs. (default: None) --drmaa-log-dir DIR Specify a directory in which stdout and stderr files of DRMAA jobs will be written. The value may be given as a relative path, in which case Snakemake will use the current invocation directory as the origin. If given, this will override any given '-o' and/or '-e' native specification. If not given, all DRMAA stdout and stderr files are written to the current working directory. (default: None) KUBERNETES: --kubernetes [NAMESPACE] Execute workflow in a kubernetes cluster (in the cloud). NAMESPACE is the namespace you want to use for your job (if nothing specified: 'default'). Usually, this requires --default-remote-provider and --default- remote-prefix to be set to a S3 or GS bucket where your . data shall be stored. It is further advisable to activate conda integration via --use-conda. (default: None) --container-image IMAGE Docker image to use, e.g., when submitting jobs to kubernetes Defaults to 'https://hub.docker.com/r/snakemake/snakemake', tagged with the same version as the currently running Snakemake instance. Note that overwriting this value is up to your responsibility. Any used image has to contain a working snakemake installation that is compatible with (or ideally the same as) the currently running version. (default: None) TIBANNA: --tibanna Execute workflow on AWS cloud using Tibanna. This requires --default-remote-prefix to be set to S3 bucket name and prefix (e.g. 'bucketname/subdirectory') where input is already stored and output will be sent to. Using --tibanna implies --default-resources is set as default. Optionally, use --precommand to specify any preparation command to run before snakemake command on the cloud (inside snakemake container on Tibanna VM). Also, --use-conda, --use-singularity, --config, --configfile are supported and will be carried over. (default: False) --tibanna-sfn TIBANNA_SFN Name of Tibanna Unicorn step function (e.g. tibanna_unicorn_monty).This works as serverless scheduler/resource allocator and must be deployed first using tibanna cli. (e.g. tibanna deploy_unicorn --usergroup=monty --buckets=bucketname) (default: None) --precommand PRECOMMAND Any command to execute before snakemake command on AWS cloud such as wget, git clone, unzip, etc. This is used with --tibanna.Do not include input/output download/upload commands - file transfer between S3 bucket and the run environment (container) is automatically handled by Tibanna. (default: None) --tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...] Additional tibanna config e.g. --tibanna-config spot_instance=true subnet=<subnet_id> security group=<security_group_id> (default: None) GOOGLE_LIFE_SCIENCE: --google-lifesciences Execute workflow on Google Cloud cloud using the Google Life. Science API. This requires default application credentials (json) to be created and export to the environment to use Google Cloud Storage, Compute Engine, and Life Sciences. The credential file should be exported as GOOGLE_APPLICATION_CREDENTIALS for snakemake to discover. Also, --use-conda, --use- singularity, --config, --configfile are supported and will be carried over. (default: False) --google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...] Specify one or more valid instance regions (defaults to US) (default: ['us-east1', 'us-west1', 'us- central1']) --google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION The Life Sciences API service used to schedule the jobs. E.g., us-centra1 (Iowa) and europe-west2 (London) Watch the terminal output to see all options found to be available. If not specified, defaults to the first found with a matching prefix from regions specified with --google-lifesciences-regions. (default: None) --google-lifesciences-keep-cache Cache workflows in your Google Cloud Storage Bucket specified by --default-remote-prefix/{source}/{cache}. Each workflow working directory is compressed to a .tar.gz, named by the hash of the contents, and kept in Google Cloud Storage. By default, the caches are deleted at the shutdown step of the workflow. (default: False) TES: --tes URL Send workflow tasks to GA4GH TES server specified by url. (default: None) CONDA: --use-conda If defined in the rule, run job in a conda environment. If this flag is not set, the conda directive is ignored. (default: False) --list-conda-envs List all conda environments and their location on disk. (default: False) --conda-prefix DIR Specify a directory in which the 'conda' and 'conda- archive' directories are created. These are used to store conda environments and their archives, respectively. If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-conda` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. (default: None) --conda-cleanup-envs Cleanup unused conda environments. (default: False) --conda-cleanup-pkgs [{tarballs,cache}] Cleanup conda packages after creating environments. In case of 'tarballs' mode, will clean up all downloaded package tarballs. In case of 'cache' mode, will additionally clean up unused package caches. If mode is omitted, will default to only cleaning up the tarballs. (default: None) --conda-create-envs-only If specified, only creates the job-specific conda environments then exits. The `--use-conda` flag must also be set. (default: False) --conda-frontend {conda,mamba} Choose the conda frontend for installing environments. Caution: mamba is much faster, but still in beta test. (default: conda) SINGULARITY: --use-singularity If defined in the rule, run job within a singularity container. If this flag is not set, the singularity directive is ignored. (default: False) --singularity-prefix DIR Specify a directory in which singularity images will be stored.If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-singularity` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. (default: None) --singularity-args ARGS Pass additional args to singularity. (default: ) ENVIRONMENT MODULES: --use-envmodules If defined in the rule, run job within the given environment modules, loaded in the given order. This can be combined with --use-conda and --use- singularity, which will then be only used as a fallback for rules which don't define environment modules. (default: False)","title":"Help content"},{"location":"descriptors/snakemake_snakemake/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): snakemake","title":"Installation on mega-linter Docker image"},{"location":"descriptors/snakemake_snakemake/#example-success-log","text":"Results of snakemake linter (version 5.30.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakemake/ ----------------------------------------------- [SUCCESS] .automation/test/snakemake/snakemake_good_1.smk Congratulations, your workflow is in a good condition!","title":"Example success log"},{"location":"descriptors/snakemake_snakemake/#example-error-log","text":"Results of snakemake linter (version 5.30.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/snakemake_snakemake/ ----------------------------------------------- [ERROR] .automation/test/snakemake/snakemake_bad_1.smk Lints for rule simulation (line 11, .automation/test/snakemake/snakemake_bad_1.smk): * No log directive defined: Without a log directive, all output will be printed to the terminal. In distributed environments, this means that errors are harder to discover. In local environments, output of concurrent jobs will be mixed and become unreadable. Also see: https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#log-files * Specify a conda environment or container for each rule.: This way, the used software for each specific step is documented, and the workflow can be executed on any machine without prerequisites. Also see: https://snakemake.readthedocs.io/en/latest/snakefiles/deployment.html#integrated-package-management https://snakemake.readthedocs.io/en/latest/snakefiles/deployment.html#running-jobs-in-containers","title":"Example error log"},{"location":"descriptors/spell/","text":"SPELL Linters Linter Configuration key cspell SPELL_CSPELL Linted files Configuration in Mega-Linter Variable Description Default value SPELL_FILTER_REGEX_INCLUDE Custom regex including filter SPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SPELL linters"},{"location":"descriptors/spell/#spell","text":"","title":"SPELL"},{"location":"descriptors/spell/#linters","text":"Linter Configuration key cspell SPELL_CSPELL","title":"Linters"},{"location":"descriptors/spell/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/spell/#configuration-in-mega-linter","text":"Variable Description Default value SPELL_FILTER_REGEX_INCLUDE Custom regex including filter SPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/spell_cspell/","text":"cspell Mega-Linter generates content of a .cspell.json config file at the end of its TextReporter artifact Copy it at the root of your repository, read it, remove real spelling errors (after have corrected them in the source), and you're good to go ! cspell documentation Version in Mega-Linter: 4.1.3 Visit Official Web Site See How to configure cspell rules See How to disable cspell rules in files Configuration in Mega-Linter Enable cspell by adding SPELL_CSPELL in ENABLE_LINTERS variable Disable cspell by adding SPELL_CSPELL in DISABLE_LINTERS variable Variable Description Default value SPELL_CSPELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_CSPELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SPELL_CSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SPELL_CSPELL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file SPELL_CSPELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SPELL_CSPELL_FILE_NAME cspell configuration file name Use LINTER_DEFAULT to let the linter find it .cspell.json SPELL_CSPELL_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SPELL_CSPELL_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use cspell in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code Code Spell Checker Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files Example calls cspell myfile.any cspell -c cspell.json myfile.any Help content Usage: cspell [options] [command] <files...> Spelling Checker for Code Options: -V, --version output the version number -c, --config <cspell.json> Configuration file to use. By default cspell looks for cspell.json in the current directory. --no-color Turn off color. --color Force color -v, --verbose display more information about the files being checked and the configuration --local <local> Set language locals. i.e. \"en,fr\" for English and French, or \"en-GB\" for British English. --legacy Legacy output --languageId <language> Force programming language for unknown extensions. i.e. \"php\" or \"scala\" --wordsOnly Only output the words not found in the dictionaries. -u, --unique Only output the first instance of a word not found in the dictionaries. --debug Output information useful for debugging cspell.json files. -e, --exclude <glob> Exclude files matching the glob pattern --no-issues Do not show the spelling errors. --no-summary Turn off summary message in console -s, --silent Silent mode, suppress error messages -r, --root <root folder> Root directory, defaults to current directory. -h, --help display help for command Commands: trace [options] <words...> Trace words check [options] <files...> Spell check file(s) and display the result. The full file is displayed in color. Examples: cspell \"*.js\" Check all .js files in the current directory cspell \"**/*.js\" Check all .js files from the current directory cspell \"src/**/*.js\" Only check .js under src cspell \"**/*.txt\" \"**/*.js\" Check both .js and .txt files. cat LICENSE | cspell stdin Read from stdin the contents of LICENSE Installation on mega-linter Docker image NPM packages (node.js): cspell@4.1.3 Example success log Results of cspell linter (version 4.1.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/spell_cspell/ ----------------------------------------------- [SUCCESS] .automation/test/spell CSpell: Files checked: 1, Issues found: 0 in 0 files Example error log Results of cspell linter (version 4.1.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/spell_cspell/ ----------------------------------------------- [ERROR] .automation/test/spell .automation/test/spell/spell_bad_1.js:1:28 - Unknown word (Blablabla) CSpell: Files checked: 1, Issues found: 1 in 1 files You can skip this misspellings by defining the following .cspell.json file at the root of your repository Of course, please correct real typos before :) { \"version\": 0.1, \"language\": \"en\", \"ignorePaths\": [ \"**/node_modules/**\", \"**/vscode-extension/**\", \"**/.git/**\", \".vscode\", \"report\" ], \"words\": [ \"Blablabla\" ] } You can also copy-paste /tmp/.cspell.json at the root of your repository","title":"cspell"},{"location":"descriptors/spell_cspell/#cspell","text":"Mega-Linter generates content of a .cspell.json config file at the end of its TextReporter artifact Copy it at the root of your repository, read it, remove real spelling errors (after have corrected them in the source), and you're good to go !","title":"cspell"},{"location":"descriptors/spell_cspell/#cspell-documentation","text":"Version in Mega-Linter: 4.1.3 Visit Official Web Site See How to configure cspell rules See How to disable cspell rules in files","title":"cspell documentation"},{"location":"descriptors/spell_cspell/#configuration-in-mega-linter","text":"Enable cspell by adding SPELL_CSPELL in ENABLE_LINTERS variable Disable cspell by adding SPELL_CSPELL in DISABLE_LINTERS variable Variable Description Default value SPELL_CSPELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_CSPELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SPELL_CSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SPELL_CSPELL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file SPELL_CSPELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SPELL_CSPELL_FILE_NAME cspell configuration file name Use LINTER_DEFAULT to let the linter find it .cspell.json SPELL_CSPELL_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SPELL_CSPELL_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/spell_cspell/#ide-integration","text":"Use cspell in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Visual Studio Code Code Spell Checker","title":"IDE Integration"},{"location":"descriptors/spell_cspell/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/spell_cspell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/spell_cspell/#how-are-identified-applicable-files","text":"","title":"How are identified applicable files"},{"location":"descriptors/spell_cspell/#example-calls","text":"cspell myfile.any cspell -c cspell.json myfile.any","title":"Example calls"},{"location":"descriptors/spell_cspell/#help-content","text":"Usage: cspell [options] [command] <files...> Spelling Checker for Code Options: -V, --version output the version number -c, --config <cspell.json> Configuration file to use. By default cspell looks for cspell.json in the current directory. --no-color Turn off color. --color Force color -v, --verbose display more information about the files being checked and the configuration --local <local> Set language locals. i.e. \"en,fr\" for English and French, or \"en-GB\" for British English. --legacy Legacy output --languageId <language> Force programming language for unknown extensions. i.e. \"php\" or \"scala\" --wordsOnly Only output the words not found in the dictionaries. -u, --unique Only output the first instance of a word not found in the dictionaries. --debug Output information useful for debugging cspell.json files. -e, --exclude <glob> Exclude files matching the glob pattern --no-issues Do not show the spelling errors. --no-summary Turn off summary message in console -s, --silent Silent mode, suppress error messages -r, --root <root folder> Root directory, defaults to current directory. -h, --help display help for command Commands: trace [options] <words...> Trace words check [options] <files...> Spell check file(s) and display the result. The full file is displayed in color. Examples: cspell \"*.js\" Check all .js files in the current directory cspell \"**/*.js\" Check all .js files from the current directory cspell \"src/**/*.js\" Only check .js under src cspell \"**/*.txt\" \"**/*.js\" Check both .js and .txt files. cat LICENSE | cspell stdin Read from stdin the contents of LICENSE","title":"Help content"},{"location":"descriptors/spell_cspell/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): cspell@4.1.3","title":"Installation on mega-linter Docker image"},{"location":"descriptors/spell_cspell/#example-success-log","text":"Results of cspell linter (version 4.1.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/spell_cspell/ ----------------------------------------------- [SUCCESS] .automation/test/spell CSpell: Files checked: 1, Issues found: 0 in 0 files","title":"Example success log"},{"location":"descriptors/spell_cspell/#example-error-log","text":"Results of cspell linter (version 4.1.3) See documentation on https://nvuillam.github.io/mega-linter/descriptors/spell_cspell/ ----------------------------------------------- [ERROR] .automation/test/spell .automation/test/spell/spell_bad_1.js:1:28 - Unknown word (Blablabla) CSpell: Files checked: 1, Issues found: 1 in 1 files You can skip this misspellings by defining the following .cspell.json file at the root of your repository Of course, please correct real typos before :) { \"version\": 0.1, \"language\": \"en\", \"ignorePaths\": [ \"**/node_modules/**\", \"**/vscode-extension/**\", \"**/.git/**\", \".vscode\", \"report\" ], \"words\": [ \"Blablabla\" ] } You can also copy-paste /tmp/.cspell.json at the root of your repository","title":"Example error log"},{"location":"descriptors/sql/","text":"SQL Linters Linter Configuration key sql-lint SQL Linted files File extensions: .sql Configuration in Mega-Linter Variable Description Default value SQL_FILTER_REGEX_INCLUDE Custom regex including filter SQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SQL linters"},{"location":"descriptors/sql/#sql","text":"","title":"SQL"},{"location":"descriptors/sql/#linters","text":"Linter Configuration key sql-lint SQL","title":"Linters"},{"location":"descriptors/sql/#linted-files","text":"File extensions: .sql","title":"Linted files"},{"location":"descriptors/sql/#configuration-in-mega-linter","text":"Variable Description Default value SQL_FILTER_REGEX_INCLUDE Custom regex including filter SQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/sql_sql_lint/","text":"sql-lint sql-lint documentation Version in Mega-Linter: 0.0.15 Visit Official Web Site See How to configure sql-lint rules If custom .sql-config.json is not found, .sql-config.json will be used See Index of problems detected by sql-lint Configuration in Mega-Linter Enable sql-lint by adding SQL_SQL_LINT in ENABLE_LINTERS variable Disable sql-lint by adding SQL_SQL_LINT in DISABLE_LINTERS variable Variable Description Default value SQL_SQL_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_SQL_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SQL_SQL_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SQL_SQL_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_SQL_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_SQL_LINT_FILE_NAME sql-lint configuration file name Use LINTER_DEFAULT to let the linter find it .sql-config.json SQL_SQL_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SQL_SQL_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use sql-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name vim ale Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .sql Example calls sql-lint myfile.sql sql-lint --config .sql-config.json myfile.sql Help content Usage: sql-lint [options] Options: -V, --version output the version number --fix [string] The .sql string to fix -d, --driver <string> The driver to use, must be one of ['mysql', 'postgres'] -v, --verbose Brings back information on the what it's linting and the tokens generated --format <string> The format of the output, can be one of ['simple', 'json'] (default: \"simple\") --host <string> The host for the connection --user <string> The user for the connection --password <string> The password for the connection --port <string> The port for the connection --config <string> The path to the configuration file -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): sql-lint Example success log Results of sql-lint linter (version 0.0.15) See documentation on https://nvuillam.github.io/mega-linter/descriptors/sql_sql_lint/ ----------------------------------------------- [SUCCESS] .automation/test/sql/sql_good_1.sql Example error log Results of sql-lint linter (version 0.0.15) See documentation on https://nvuillam.github.io/mega-linter/descriptors/sql_sql_lint/ ----------------------------------------------- [ERROR] .automation/test/sql/sql_bad_1.sql .automation/test/sql/sql_bad_1.sql:1 [sql-lint: missing-where] DELETE statement missing WHERE clause.","title":"sql-lint"},{"location":"descriptors/sql_sql_lint/#sql-lint","text":"","title":"sql-lint"},{"location":"descriptors/sql_sql_lint/#sql-lint-documentation","text":"Version in Mega-Linter: 0.0.15 Visit Official Web Site See How to configure sql-lint rules If custom .sql-config.json is not found, .sql-config.json will be used See Index of problems detected by sql-lint","title":"sql-lint documentation"},{"location":"descriptors/sql_sql_lint/#configuration-in-mega-linter","text":"Enable sql-lint by adding SQL_SQL_LINT in ENABLE_LINTERS variable Disable sql-lint by adding SQL_SQL_LINT in DISABLE_LINTERS variable Variable Description Default value SQL_SQL_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_SQL_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SQL_SQL_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SQL_SQL_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_SQL_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_SQL_LINT_FILE_NAME sql-lint configuration file name Use LINTER_DEFAULT to let the linter find it .sql-config.json SQL_SQL_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules SQL_SQL_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/sql_sql_lint/#ide-integration","text":"Use sql-lint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name vim ale","title":"IDE Integration"},{"location":"descriptors/sql_sql_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/sql_sql_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/sql_sql_lint/#how-are-identified-applicable-files","text":"File extensions: .sql","title":"How are identified applicable files"},{"location":"descriptors/sql_sql_lint/#example-calls","text":"sql-lint myfile.sql sql-lint --config .sql-config.json myfile.sql","title":"Example calls"},{"location":"descriptors/sql_sql_lint/#help-content","text":"Usage: sql-lint [options] Options: -V, --version output the version number --fix [string] The .sql string to fix -d, --driver <string> The driver to use, must be one of ['mysql', 'postgres'] -v, --verbose Brings back information on the what it's linting and the tokens generated --format <string> The format of the output, can be one of ['simple', 'json'] (default: \"simple\") --host <string> The host for the connection --user <string> The user for the connection --password <string> The password for the connection --port <string> The port for the connection --config <string> The path to the configuration file -h, --help display help for command","title":"Help content"},{"location":"descriptors/sql_sql_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): sql-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/sql_sql_lint/#example-success-log","text":"Results of sql-lint linter (version 0.0.15) See documentation on https://nvuillam.github.io/mega-linter/descriptors/sql_sql_lint/ ----------------------------------------------- [SUCCESS] .automation/test/sql/sql_good_1.sql","title":"Example success log"},{"location":"descriptors/sql_sql_lint/#example-error-log","text":"Results of sql-lint linter (version 0.0.15) See documentation on https://nvuillam.github.io/mega-linter/descriptors/sql_sql_lint/ ----------------------------------------------- [ERROR] .automation/test/sql/sql_bad_1.sql .automation/test/sql/sql_bad_1.sql:1 [sql-lint: missing-where] DELETE statement missing WHERE clause.","title":"Example error log"},{"location":"descriptors/tekton/","text":"TEKTON Linters Linter Configuration key tekton-lint TEKTON Linted files File extensions: .yml .yaml Detected file content: apiVersion: tekton Configuration in Mega-Linter Variable Description Default value TEKTON_FILTER_REGEX_INCLUDE Custom regex including filter TEKTON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All TEKTON linters"},{"location":"descriptors/tekton/#tekton","text":"","title":"TEKTON"},{"location":"descriptors/tekton/#linters","text":"Linter Configuration key tekton-lint TEKTON","title":"Linters"},{"location":"descriptors/tekton/#linted-files","text":"File extensions: .yml .yaml Detected file content: apiVersion: tekton","title":"Linted files"},{"location":"descriptors/tekton/#configuration-in-mega-linter","text":"Variable Description Default value TEKTON_FILTER_REGEX_INCLUDE Custom regex including filter TEKTON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/tekton_tekton_lint/","text":"tekton-lint tekton-lint documentation Version in Mega-Linter: 0.5.2 Visit Official Web Site See How to configure tekton-lint rules See Index of problems detected by tekton-lint Configuration in Mega-Linter Enable tekton-lint by adding TEKTON_TEKTON_LINT in ENABLE_LINTERS variable Disable tekton-lint by adding TEKTON_TEKTON_LINT in DISABLE_LINTERS variable Variable Description Default value TEKTON_TEKTON_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TEKTON_TEKTON_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] TEKTON_TEKTON_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TEKTON_TEKTON_LINT_FILE_NAME tekton-lint configuration file name Use LINTER_DEFAULT to let the linter find it .tektonlintrc.yaml TEKTON_TEKTON_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TEKTON_TEKTON_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .yml .yaml Detected file content: apiVersion: tekton Example calls tekton-lint myfile.yml Help content Usage: tekton-lint <path-to-yaml-files> Options: $ tekton-lint --watch # Run tekton-lint in watch mode $ tekton-lint --version # Show version number $ tekton-lint --help # Show help $ tekton-lint --color / --no-color # Forcefully enable/disable colored output $ tekton-lint --format # Format output. Available formatters: vscode (default) | stylish | json $ tekton-lint --quiet # Report errors only - default: false $ tekton-lint --max-warnings <Int> # Number of warnings to trigger nonzero exit code - default: -1 Examples: # Globstar matching $ tekton-lint '**/*.yaml' # Exact file path $ tekton-lint my-pipeline.yaml my-task.yaml # Multiple glob patterns $ tekton-lint path/to/my/pipeline.yaml 'path/to/my/tasks/*.yaml' # Watch mode $ tekton-lint --watch '**/*.yaml' Installation on mega-linter Docker image NPM packages (node.js): tekton-lint Example success log Results of tekton-lint linter (version 0.5.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tekton_tekton_lint/ ----------------------------------------------- [SUCCESS] .automation/test/tekton/good/tekton_good_1.yml .automation/test/tekton/good/tekton_good_1.yml: warning (20,14,20,20): Invalid image: 'ubuntu'. Specify the image tag instead of using ':latest' warning (22,14,22,51): Invalid image: 'gcr.io/example-builders/build-example'. Specify the image tag instead of using ':latest' warning (26,14,26,50): Invalid image: 'gcr.io/example-builders/push-example'. Specify the image tag instead of using ':latest' Example error log Results of tekton-lint linter (version 0.5.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tekton_tekton_lint/ ----------------------------------------------- [ERROR] .automation/test/tekton/bad/tekton_bad_1.yml .automation/test/tekton/bad/tekton_bad_1.yml: warning (20,14,20,20): Invalid image: 'ubuntu'. Specify the image tag instead of using ':latest' warning (22,14,22,51): Invalid image: 'gcr.io/example-builders/build-example'. Specify the image tag instead of using ':latest' warning (26,14,26,50): Invalid image: 'gcr.io/example-builders/push-example'. Specify the image tag instead of using ':latest' error (29,17,29,31): Task 'example-task-name' wants to mount volume 'example-volume' in step 'dockerfile-pushexample', but this volume is not defined.","title":"tekton-lint"},{"location":"descriptors/tekton_tekton_lint/#tekton-lint","text":"","title":"tekton-lint"},{"location":"descriptors/tekton_tekton_lint/#tekton-lint-documentation","text":"Version in Mega-Linter: 0.5.2 Visit Official Web Site See How to configure tekton-lint rules See Index of problems detected by tekton-lint","title":"tekton-lint documentation"},{"location":"descriptors/tekton_tekton_lint/#configuration-in-mega-linter","text":"Enable tekton-lint by adding TEKTON_TEKTON_LINT in ENABLE_LINTERS variable Disable tekton-lint by adding TEKTON_TEKTON_LINT in DISABLE_LINTERS variable Variable Description Default value TEKTON_TEKTON_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TEKTON_TEKTON_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] TEKTON_TEKTON_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TEKTON_TEKTON_LINT_FILE_NAME tekton-lint configuration file name Use LINTER_DEFAULT to let the linter find it .tektonlintrc.yaml TEKTON_TEKTON_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TEKTON_TEKTON_LINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/tekton_tekton_lint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/tekton_tekton_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/tekton_tekton_lint/#how-are-identified-applicable-files","text":"File extensions: .yml .yaml Detected file content: apiVersion: tekton","title":"How are identified applicable files"},{"location":"descriptors/tekton_tekton_lint/#example-calls","text":"tekton-lint myfile.yml","title":"Example calls"},{"location":"descriptors/tekton_tekton_lint/#help-content","text":"Usage: tekton-lint <path-to-yaml-files> Options: $ tekton-lint --watch # Run tekton-lint in watch mode $ tekton-lint --version # Show version number $ tekton-lint --help # Show help $ tekton-lint --color / --no-color # Forcefully enable/disable colored output $ tekton-lint --format # Format output. Available formatters: vscode (default) | stylish | json $ tekton-lint --quiet # Report errors only - default: false $ tekton-lint --max-warnings <Int> # Number of warnings to trigger nonzero exit code - default: -1 Examples: # Globstar matching $ tekton-lint '**/*.yaml' # Exact file path $ tekton-lint my-pipeline.yaml my-task.yaml # Multiple glob patterns $ tekton-lint path/to/my/pipeline.yaml 'path/to/my/tasks/*.yaml' # Watch mode $ tekton-lint --watch '**/*.yaml'","title":"Help content"},{"location":"descriptors/tekton_tekton_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): tekton-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/tekton_tekton_lint/#example-success-log","text":"Results of tekton-lint linter (version 0.5.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tekton_tekton_lint/ ----------------------------------------------- [SUCCESS] .automation/test/tekton/good/tekton_good_1.yml .automation/test/tekton/good/tekton_good_1.yml: warning (20,14,20,20): Invalid image: 'ubuntu'. Specify the image tag instead of using ':latest' warning (22,14,22,51): Invalid image: 'gcr.io/example-builders/build-example'. Specify the image tag instead of using ':latest' warning (26,14,26,50): Invalid image: 'gcr.io/example-builders/push-example'. Specify the image tag instead of using ':latest'","title":"Example success log"},{"location":"descriptors/tekton_tekton_lint/#example-error-log","text":"Results of tekton-lint linter (version 0.5.2) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tekton_tekton_lint/ ----------------------------------------------- [ERROR] .automation/test/tekton/bad/tekton_bad_1.yml .automation/test/tekton/bad/tekton_bad_1.yml: warning (20,14,20,20): Invalid image: 'ubuntu'. Specify the image tag instead of using ':latest' warning (22,14,22,51): Invalid image: 'gcr.io/example-builders/build-example'. Specify the image tag instead of using ':latest' warning (26,14,26,50): Invalid image: 'gcr.io/example-builders/push-example'. Specify the image tag instead of using ':latest' error (29,17,29,31): Task 'example-task-name' wants to mount volume 'example-volume' in step 'dockerfile-pushexample', but this volume is not defined.","title":"Example error log"},{"location":"descriptors/terraform/","text":"TERRAFORM Linters Linter Configuration key tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT Linted files File extensions: .tf Configuration in Mega-Linter Variable Description Default value TERRAFORM_FILTER_REGEX_INCLUDE Custom regex including filter TERRAFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All TERRAFORM linters"},{"location":"descriptors/terraform/#terraform","text":"","title":"TERRAFORM"},{"location":"descriptors/terraform/#linters","text":"Linter Configuration key tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT","title":"Linters"},{"location":"descriptors/terraform/#linted-files","text":"File extensions: .tf","title":"Linted files"},{"location":"descriptors/terraform/#configuration-in-mega-linter","text":"Variable Description Default value TERRAFORM_FILTER_REGEX_INCLUDE Custom regex including filter TERRAFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/terraform_terragrunt/","text":"terragrunt terragrunt documentation Version in Mega-Linter: 0.26.7 Visit Official Web Site See How to configure terragrunt rules Configuration in Mega-Linter Enable terragrunt by adding TERRAFORM_TERRAGRUNT in ENABLE_LINTERS variable Disable terragrunt by adding TERRAFORM_TERRAGRUNT in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TERRAGRUNT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".hcl\"] TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRAGRUNT_FILE_NAME terragrunt configuration file name Use LINTER_DEFAULT to let the linter find it terragrunt.hcl TERRAFORM_TERRAGRUNT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TERRAFORM_TERRAGRUNT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .hcl Example calls terragrunt hclfmt --terragrunt-check --terragrunt-hclfmt-file myfile.hcl terragrunt hclfmt --terragrunt-check --terragrunt-config terragrunt.hcl --terragrunt-hclfmt-file myfile.hcl Help content DESCRIPTION: terragrunt - Terragrunt is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules, remote state, and locking. For documentation, see https://github.com/gruntwork-io/terragrunt/. USAGE: terragrunt <COMMAND> COMMANDS: plan-all Display the plans of a 'stack' by running 'terragrunt plan' in each subfolder apply-all Apply a 'stack' by running 'terragrunt apply' in each subfolder output-all Display the outputs of a 'stack' by running 'terragrunt output' in each subfolder destroy-all Destroy a 'stack' by running 'terragrunt destroy' in each subfolder validate-all Validate 'stack' by running 'terragrunt validate' in each subfolder terragrunt-info Emits limited terragrunt state on stdout and exits graph-dependencies Prints the terragrunt dependency graph to stdout hclfmt Recursively find terragrunt.hcl files and rewrite them into a canonical format. aws-provider-patch Overwrite settings on nested AWS providers to work around a Terraform bug (issue #13018) * Terragrunt forwards all other commands directly to Terraform GLOBAL OPTIONS: terragrunt-config Path to the Terragrunt config file. Default is terragrunt.hcl. terragrunt-tfpath Path to the Terraform binary. Default is terraform (on PATH). terragrunt-no-auto-init Don't automatically run 'terraform init' during other terragrunt commands. You must run 'terragrunt init' manually. terragrunt-no-auto-retry Don't automatically re-run command in case of transient errors. terragrunt-non-interactive Assume \"yes\" for all prompts. terragrunt-working-dir The path to the Terraform templates. Default is current directory. terragrunt-download-dir The path where to download Terraform code. Default is .terragrunt-cache in the working directory. terragrunt-source Download Terraform configurations from the specified source into a temporary folder, and run Terraform in that temporary folder. terragrunt-source-update Delete the contents of the temporary folder to clear out any old, cached source code before downloading new source code into it. terragrunt-iam-role Assume the specified IAM role before executing Terraform. Can also be set via the TERRAGRUNT_IAM_ROLE environment variable. terragrunt-ignore-dependency-errors *-all commands continue processing components even if a dependency fails. terragrunt-ignore-dependency-order *-all commands will be run disregarding the dependencies terragrunt-ignore-external-dependencies *-all commands will not attempt to include external dependencies terragrunt-include-external-dependencies *-all commands will include external dependencies terragrunt-parallelism <N> *-all commands parallelism set to at most N modules terragrunt-exclude-dir Unix-style glob of directories to exclude when running *-all commands terragrunt-include-dir Unix-style glob of directories to include when running *-all commands terragrunt-check Enable check mode in the hclfmt command. terragrunt-hclfmt-file The path to a single terragrunt.hcl file that the hclfmt command should run on. terragrunt-override-attr A key=value attribute to override in a provider block as part of the aws-provider-patch command. May be specified multiple times. terragrunt-debug Write terragrunt-debug.tfvars to working folder to help root-cause issues. VERSION: v0.26.7 AUTHOR(S): Gruntwork <www.gruntwork.io> Installation on mega-linter Docker image Dockerfile commands : FROM alpine/terragrunt:latest as terragrunt COPY --from=terragrunt /usr/local/bin/terragrunt /usr/bin/ Example success log Results of terragrunt linter (version 0.26.7) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terragrunt/ ----------------------------------------------- [SUCCESS] .automation/test/terraform_terragrunt/terragrunt_good_1.hcl [terragrunt] 2020/12/05 12:35:50 Formatting terragrunt.hcl file at: .automation/test/terraform_terragrunt/terragrunt_good_1.hcl. [terragrunt] 2020/12/05 12:35:50 Formatting .automation/test/terraform_terragrunt/terragrunt_good_1.hcl Example error log Results of terragrunt linter (version 0.26.7) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terragrunt/ ----------------------------------------------- [ERROR] .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl [terragrunt] 2020/12/05 12:35:49 Formatting terragrunt.hcl file at: .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl. [terragrunt] 2020/12/05 12:35:49 Formatting .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl [terragrunt] 2020/12/05 12:35:49 Invalid file format .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl [terragrunt] 2020/12/05 12:35:49 Unable to determine underlying exit code, so Terragrunt will exit with error code 1","title":"terragrunt"},{"location":"descriptors/terraform_terragrunt/#terragrunt","text":"","title":"terragrunt"},{"location":"descriptors/terraform_terragrunt/#terragrunt-documentation","text":"Version in Mega-Linter: 0.26.7 Visit Official Web Site See How to configure terragrunt rules","title":"terragrunt documentation"},{"location":"descriptors/terraform_terragrunt/#configuration-in-mega-linter","text":"Enable terragrunt by adding TERRAFORM_TERRAGRUNT in ENABLE_LINTERS variable Disable terragrunt by adding TERRAFORM_TERRAGRUNT in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TERRAGRUNT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".hcl\"] TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRAGRUNT_FILE_NAME terragrunt configuration file name Use LINTER_DEFAULT to let the linter find it terragrunt.hcl TERRAFORM_TERRAGRUNT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TERRAFORM_TERRAGRUNT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/terraform_terragrunt/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/terraform_terragrunt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_terragrunt/#how-are-identified-applicable-files","text":"File extensions: .hcl","title":"How are identified applicable files"},{"location":"descriptors/terraform_terragrunt/#example-calls","text":"terragrunt hclfmt --terragrunt-check --terragrunt-hclfmt-file myfile.hcl terragrunt hclfmt --terragrunt-check --terragrunt-config terragrunt.hcl --terragrunt-hclfmt-file myfile.hcl","title":"Example calls"},{"location":"descriptors/terraform_terragrunt/#help-content","text":"DESCRIPTION: terragrunt - Terragrunt is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules, remote state, and locking. For documentation, see https://github.com/gruntwork-io/terragrunt/. USAGE: terragrunt <COMMAND> COMMANDS: plan-all Display the plans of a 'stack' by running 'terragrunt plan' in each subfolder apply-all Apply a 'stack' by running 'terragrunt apply' in each subfolder output-all Display the outputs of a 'stack' by running 'terragrunt output' in each subfolder destroy-all Destroy a 'stack' by running 'terragrunt destroy' in each subfolder validate-all Validate 'stack' by running 'terragrunt validate' in each subfolder terragrunt-info Emits limited terragrunt state on stdout and exits graph-dependencies Prints the terragrunt dependency graph to stdout hclfmt Recursively find terragrunt.hcl files and rewrite them into a canonical format. aws-provider-patch Overwrite settings on nested AWS providers to work around a Terraform bug (issue #13018) * Terragrunt forwards all other commands directly to Terraform GLOBAL OPTIONS: terragrunt-config Path to the Terragrunt config file. Default is terragrunt.hcl. terragrunt-tfpath Path to the Terraform binary. Default is terraform (on PATH). terragrunt-no-auto-init Don't automatically run 'terraform init' during other terragrunt commands. You must run 'terragrunt init' manually. terragrunt-no-auto-retry Don't automatically re-run command in case of transient errors. terragrunt-non-interactive Assume \"yes\" for all prompts. terragrunt-working-dir The path to the Terraform templates. Default is current directory. terragrunt-download-dir The path where to download Terraform code. Default is .terragrunt-cache in the working directory. terragrunt-source Download Terraform configurations from the specified source into a temporary folder, and run Terraform in that temporary folder. terragrunt-source-update Delete the contents of the temporary folder to clear out any old, cached source code before downloading new source code into it. terragrunt-iam-role Assume the specified IAM role before executing Terraform. Can also be set via the TERRAGRUNT_IAM_ROLE environment variable. terragrunt-ignore-dependency-errors *-all commands continue processing components even if a dependency fails. terragrunt-ignore-dependency-order *-all commands will be run disregarding the dependencies terragrunt-ignore-external-dependencies *-all commands will not attempt to include external dependencies terragrunt-include-external-dependencies *-all commands will include external dependencies terragrunt-parallelism <N> *-all commands parallelism set to at most N modules terragrunt-exclude-dir Unix-style glob of directories to exclude when running *-all commands terragrunt-include-dir Unix-style glob of directories to include when running *-all commands terragrunt-check Enable check mode in the hclfmt command. terragrunt-hclfmt-file The path to a single terragrunt.hcl file that the hclfmt command should run on. terragrunt-override-attr A key=value attribute to override in a provider block as part of the aws-provider-patch command. May be specified multiple times. terragrunt-debug Write terragrunt-debug.tfvars to working folder to help root-cause issues. VERSION: v0.26.7 AUTHOR(S): Gruntwork <www.gruntwork.io>","title":"Help content"},{"location":"descriptors/terraform_terragrunt/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM alpine/terragrunt:latest as terragrunt COPY --from=terragrunt /usr/local/bin/terragrunt /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_terragrunt/#example-success-log","text":"Results of terragrunt linter (version 0.26.7) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terragrunt/ ----------------------------------------------- [SUCCESS] .automation/test/terraform_terragrunt/terragrunt_good_1.hcl [terragrunt] 2020/12/05 12:35:50 Formatting terragrunt.hcl file at: .automation/test/terraform_terragrunt/terragrunt_good_1.hcl. [terragrunt] 2020/12/05 12:35:50 Formatting .automation/test/terraform_terragrunt/terragrunt_good_1.hcl","title":"Example success log"},{"location":"descriptors/terraform_terragrunt/#example-error-log","text":"Results of terragrunt linter (version 0.26.7) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terragrunt/ ----------------------------------------------- [ERROR] .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl [terragrunt] 2020/12/05 12:35:49 Formatting terragrunt.hcl file at: .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl. [terragrunt] 2020/12/05 12:35:49 Formatting .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl [terragrunt] 2020/12/05 12:35:49 Invalid file format .automation/test/terraform_terragrunt/terragrunt_bad_1.hcl [terragrunt] 2020/12/05 12:35:49 Unable to determine underlying exit code, so Terragrunt will exit with error code 1","title":"Example error log"},{"location":"descriptors/terraform_terrascan/","text":"terrascan documentation Version in Mega-Linter: 1.2.0 Visit Official Web Site See How to configure terrascan rules See Index of problems detected by terrascan Configuration in Mega-Linter Enable terrascan by adding TERRAFORM_TERRASCAN in ENABLE_LINTERS variable Disable terrascan by adding TERRAFORM_TERRASCAN in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TERRASCAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRASCAN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TERRAFORM_TERRASCAN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TERRAFORM_TERRASCAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TERRASCAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRASCAN_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .tf Example calls terrascan scan -i terraform -t all -f myfile.tf Help content Terrascan Detect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure. For more information, please visit https://docs.accurics.com Usage: terrascan [command] Available Commands: init Initialize Terrascan scan Detect compliance and security violations across Infrastructure as Code. server Run Terrascan as an API server version Terrascan version Flags: -c, --config-path string config file path -l, --log-level string log level (debug, info, warn, error, panic, fatal) (default \"info\") -x, --log-type string log output type (console, json) (default \"console\") -o, --output string output type (human, json, yaml, xml) (default \"human\") Use \"terrascan [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : FROM accurics/terrascan:latest as terrascan COPY --from=terrascan /go/bin/terrascan /usr/bin/ RUN terrascan init Example success log Results of terrascan linter (version 1.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terrascan/ ----------------------------------------------- [SUCCESS] .automation/test/terraform_terrascan/good/terraform_good_1.tf results: violations: [] count: low: 0 medium: 0 high: 0 total: 0 Example error log Results of terrascan linter (version 1.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terrascan/ ----------------------------------------------- [ERROR] .automation/test/terraform_terrascan/bad/terraform_bad_1.tf results: violations: - rule_name: instanceWithNoVpc description: Instance should be configured in vpc. AWS VPCs provides the controls to facilitate a formal process for approving and testing all network connections and changes to the firewall and router configurations. rule_id: AWS.Instance.NetworkSecurity.Medium.0506 severity: MEDIUM category: Network Security resource_name: instanceWithNoVpc resource_type: aws_instance file: terraform_bad_1.tf line: 1 - rule_name: ec2UsingIMDSv1 description: EC2 instances should disable IMDS or require IMDSv2 rule_id: AC-AWS-NS-IN-M-1172 severity: MEDIUM category: Network Security resource_name: instanceWithNoVpc resource_type: aws_instance file: terraform_bad_1.tf line: 1 count: low: 0 medium: 2 high: 0 total: 2","title":"terrascan"},{"location":"descriptors/terraform_terrascan/#terrascan-documentation","text":"Version in Mega-Linter: 1.2.0 Visit Official Web Site See How to configure terrascan rules See Index of problems detected by terrascan","title":"terrascan documentation"},{"location":"descriptors/terraform_terrascan/#configuration-in-mega-linter","text":"Enable terrascan by adding TERRAFORM_TERRASCAN in ENABLE_LINTERS variable Disable terrascan by adding TERRAFORM_TERRASCAN in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TERRASCAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRASCAN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TERRAFORM_TERRASCAN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TERRAFORM_TERRASCAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TERRASCAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRASCAN_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/terraform_terrascan/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/terraform_terrascan/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_terrascan/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_terrascan/#example-calls","text":"terrascan scan -i terraform -t all -f myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_terrascan/#help-content","text":"Terrascan Detect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure. For more information, please visit https://docs.accurics.com Usage: terrascan [command] Available Commands: init Initialize Terrascan scan Detect compliance and security violations across Infrastructure as Code. server Run Terrascan as an API server version Terrascan version Flags: -c, --config-path string config file path -l, --log-level string log level (debug, info, warn, error, panic, fatal) (default \"info\") -x, --log-type string log output type (console, json) (default \"console\") -o, --output string output type (human, json, yaml, xml) (default \"human\") Use \"terrascan [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/terraform_terrascan/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM accurics/terrascan:latest as terrascan COPY --from=terrascan /go/bin/terrascan /usr/bin/ RUN terrascan init","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_terrascan/#example-success-log","text":"Results of terrascan linter (version 1.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terrascan/ ----------------------------------------------- [SUCCESS] .automation/test/terraform_terrascan/good/terraform_good_1.tf results: violations: [] count: low: 0 medium: 0 high: 0 total: 0","title":"Example success log"},{"location":"descriptors/terraform_terrascan/#example-error-log","text":"Results of terrascan linter (version 1.2.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_terrascan/ ----------------------------------------------- [ERROR] .automation/test/terraform_terrascan/bad/terraform_bad_1.tf results: violations: - rule_name: instanceWithNoVpc description: Instance should be configured in vpc. AWS VPCs provides the controls to facilitate a formal process for approving and testing all network connections and changes to the firewall and router configurations. rule_id: AWS.Instance.NetworkSecurity.Medium.0506 severity: MEDIUM category: Network Security resource_name: instanceWithNoVpc resource_type: aws_instance file: terraform_bad_1.tf line: 1 - rule_name: ec2UsingIMDSv1 description: EC2 instances should disable IMDS or require IMDSv2 rule_id: AC-AWS-NS-IN-M-1172 severity: MEDIUM category: Network Security resource_name: instanceWithNoVpc resource_type: aws_instance file: terraform_bad_1.tf line: 1 count: low: 0 medium: 2 high: 0 total: 2","title":"Example error log"},{"location":"descriptors/terraform_tflint/","text":"tflint tflint documentation Version in Mega-Linter: 0.22.0 Visit Official Web Site See How to configure tflint rules If custom .tflint.hcl is not found, .tflint.hcl will be used See How to disable tflint rules in files See Index of problems detected by tflint Configuration in Mega-Linter Enable tflint by adding TERRAFORM_TFLINT in ENABLE_LINTERS variable Disable tflint by adding TERRAFORM_TFLINT in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TFLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TFLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TERRAFORM_TFLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TERRAFORM_TFLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TFLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TFLINT_FILE_NAME tflint configuration file name Use LINTER_DEFAULT to let the linter find it .tflint.hcl TERRAFORM_TFLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TERRAFORM_TFLINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .tf Example calls tflint myfile.tf tflint -c .tflint.hcl myfile.tf Help content Usage: tflint [OPTIONS] [FILE or DIR...] Application Options: -v, --version Print TFLint version --langserver Start language server -f, --format=[default|json|checkstyle|junit] Output format (default: default) -c, --config=FILE Config file name (default: .tflint.hcl) --ignore-module=SOURCE Ignore module sources --enable-rule=RULE_NAME Enable rules from the command line --disable-rule=RULE_NAME Disable rules from the command line --only=RULE_NAME Enable only this rule, disabling all other defaults. Can be specified multiple times --var-file=FILE Terraform variable file name --var='foo=bar' Set a Terraform variable --module Inspect modules --deep Enable deep check mode --aws-access-key=ACCESS_KEY AWS access key used in deep check mode --aws-secret-key=SECRET_KEY AWS secret key used in deep check mode --aws-profile=PROFILE AWS shared credential profile name used in deep check mode --aws-creds-file=FILE AWS shared credentials file path used in deep checking --aws-region=REGION AWS region used in deep check mode --force Return zero exit status even if issues found --no-color Disable colorized output --loglevel=[trace|debug|info|warn|error] Change the loglevel (default: none) Help Options: -h, --help Show this help message Installation on mega-linter Docker image Dockerfile commands : FROM wata727/tflint:latest as tflint COPY --from=tflint /usr/local/bin/tflint /usr/bin/ Example success log Results of tflint linter (version 0.21.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_tflint/ ----------------------------------------------- [SUCCESS] .automation/test/terraform/good/terraform_good_1.tf Example error log Results of tflint linter (version 0.21.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_tflint/ ----------------------------------------------- [ERROR] .automation/test/terraform/bad/terraform_bad_1.tf Failed to load configurations. 1 error(s) occurred: Error: Invalid expression on .automation/test/terraform/bad/terraform_bad_1.tf line 3, in resource \"aws_instance\" \"bad\": 3: instance_type = # invalid type! 4: } Expected the start of an expression, but found an invalid expression token.","title":"tflint"},{"location":"descriptors/terraform_tflint/#tflint","text":"","title":"tflint"},{"location":"descriptors/terraform_tflint/#tflint-documentation","text":"Version in Mega-Linter: 0.22.0 Visit Official Web Site See How to configure tflint rules If custom .tflint.hcl is not found, .tflint.hcl will be used See How to disable tflint rules in files See Index of problems detected by tflint","title":"tflint documentation"},{"location":"descriptors/terraform_tflint/#configuration-in-mega-linter","text":"Enable tflint by adding TERRAFORM_TFLINT in ENABLE_LINTERS variable Disable tflint by adding TERRAFORM_TFLINT in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TFLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TFLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TERRAFORM_TFLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TERRAFORM_TFLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TFLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TFLINT_FILE_NAME tflint configuration file name Use LINTER_DEFAULT to let the linter find it .tflint.hcl TERRAFORM_TFLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TERRAFORM_TFLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/terraform_tflint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/terraform_tflint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_tflint/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_tflint/#example-calls","text":"tflint myfile.tf tflint -c .tflint.hcl myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_tflint/#help-content","text":"Usage: tflint [OPTIONS] [FILE or DIR...] Application Options: -v, --version Print TFLint version --langserver Start language server -f, --format=[default|json|checkstyle|junit] Output format (default: default) -c, --config=FILE Config file name (default: .tflint.hcl) --ignore-module=SOURCE Ignore module sources --enable-rule=RULE_NAME Enable rules from the command line --disable-rule=RULE_NAME Disable rules from the command line --only=RULE_NAME Enable only this rule, disabling all other defaults. Can be specified multiple times --var-file=FILE Terraform variable file name --var='foo=bar' Set a Terraform variable --module Inspect modules --deep Enable deep check mode --aws-access-key=ACCESS_KEY AWS access key used in deep check mode --aws-secret-key=SECRET_KEY AWS secret key used in deep check mode --aws-profile=PROFILE AWS shared credential profile name used in deep check mode --aws-creds-file=FILE AWS shared credentials file path used in deep checking --aws-region=REGION AWS region used in deep check mode --force Return zero exit status even if issues found --no-color Disable colorized output --loglevel=[trace|debug|info|warn|error] Change the loglevel (default: none) Help Options: -h, --help Show this help message","title":"Help content"},{"location":"descriptors/terraform_tflint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM wata727/tflint:latest as tflint COPY --from=tflint /usr/local/bin/tflint /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_tflint/#example-success-log","text":"Results of tflint linter (version 0.21.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_tflint/ ----------------------------------------------- [SUCCESS] .automation/test/terraform/good/terraform_good_1.tf","title":"Example success log"},{"location":"descriptors/terraform_tflint/#example-error-log","text":"Results of tflint linter (version 0.21.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/terraform_tflint/ ----------------------------------------------- [ERROR] .automation/test/terraform/bad/terraform_bad_1.tf Failed to load configurations. 1 error(s) occurred: Error: Invalid expression on .automation/test/terraform/bad/terraform_bad_1.tf line 3, in resource \"aws_instance\" \"bad\": 3: instance_type = # invalid type! 4: } Expected the start of an expression, but found an invalid expression token.","title":"Example error log"},{"location":"descriptors/tsx/","text":"TSX Linters Linter Configuration key eslint TSX Linted files File extensions: .tsx Configuration in Mega-Linter Variable Description Default value TSX_FILTER_REGEX_INCLUDE Custom regex including filter TSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All TSX linters"},{"location":"descriptors/tsx/#tsx","text":"","title":"TSX"},{"location":"descriptors/tsx/#linters","text":"Linter Configuration key eslint TSX","title":"Linters"},{"location":"descriptors/tsx/#linted-files","text":"File extensions: .tsx","title":"Linted files"},{"location":"descriptors/tsx/#configuration-in-mega-linter","text":"Variable Description Default value TSX_FILTER_REGEX_INCLUDE Custom regex including filter TSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/tsx_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint Configuration in Mega-Linter Enable eslint by adding TSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding TSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding TSX_ESLINT in APPLY_FIXES variable Variable Description Default value TSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tsx\"] TSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TSX_ESLINT_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TSX_ESLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .tsx Example calls eslint myfile.tsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-jest eslint-plugin-prettier babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser Example success log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tsx_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/tsx/tsx_good_1.tsx Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration . Example error log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tsx_eslint/ ----------------------------------------------- [ERROR] .automation/test/tsx/tsx_bad_1.tsx .automation/test/tsx/tsx_bad_1.tsx 7:10 error Parsing error: '=' expected \u2716 1 problem (1 error, 0 warnings)","title":"eslint"},{"location":"descriptors/tsx_eslint/#eslint-documentation","text":"Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/tsx_eslint/#configuration-in-mega-linter","text":"Enable eslint by adding TSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding TSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding TSX_ESLINT in APPLY_FIXES variable Variable Description Default value TSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tsx\"] TSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TSX_ESLINT_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TSX_ESLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/tsx_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/tsx_eslint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/tsx_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/tsx_eslint/#how-are-identified-applicable-files","text":"File extensions: .tsx","title":"How are identified applicable files"},{"location":"descriptors/tsx_eslint/#example-calls","text":"eslint myfile.tsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx","title":"Example calls"},{"location":"descriptors/tsx_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/tsx_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-jest eslint-plugin-prettier babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser","title":"Installation on mega-linter Docker image"},{"location":"descriptors/tsx_eslint/#example-success-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tsx_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/tsx/tsx_good_1.tsx Warning: React version not specified in eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react#configuration .","title":"Example success log"},{"location":"descriptors/tsx_eslint/#example-error-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/tsx_eslint/ ----------------------------------------------- [ERROR] .automation/test/tsx/tsx_bad_1.tsx .automation/test/tsx/tsx_bad_1.tsx 7:10 error Parsing error: '=' expected \u2716 1 problem (1 error, 0 warnings)","title":"Example error log"},{"location":"descriptors/typescript/","text":"TYPESCRIPT Linters Linter Configuration key eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD Linted files File extensions: .ts Configuration in Mega-Linter Variable Description Default value TYPESCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter TYPESCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation NPM packages (node.js): typescript","title":"All TYPESCRIPT linters"},{"location":"descriptors/typescript/#typescript","text":"","title":"TYPESCRIPT"},{"location":"descriptors/typescript/#linters","text":"Linter Configuration key eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD","title":"Linters"},{"location":"descriptors/typescript/#linted-files","text":"File extensions: .ts","title":"Linted files"},{"location":"descriptors/typescript/#configuration-in-mega-linter","text":"Variable Description Default value TYPESCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter TYPESCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/typescript/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript/#installation","text":"NPM packages (node.js): typescript","title":"Installation"},{"location":"descriptors/typescript_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint Configuration in Mega-Linter Enable eslint by adding TYPESCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding TYPESCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_ES in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TYPESCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_ES_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TYPESCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TYPESCRIPT_ES_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .ts Example calls eslint myfile.ts eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser Example success log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/typescript/typescript_good_1.ts Example error log Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_eslint/ ----------------------------------------------- [ERROR] .automation/test/typescript/typescript_bad_1.ts .automation/test/typescript/typescript_bad_1.ts 5:39 error Parsing error: Unterminated regular expression literal \u2716 1 problem (1 error, 0 warnings)","title":"eslint"},{"location":"descriptors/typescript_eslint/#eslint-documentation","text":"Version in Mega-Linter: 7.16.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/typescript_eslint/#configuration-in-mega-linter","text":"Enable eslint by adding TYPESCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding TYPESCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_ES in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TYPESCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_ES_FILE_NAME eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TYPESCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules TYPESCRIPT_ES_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/typescript_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-eslint Brackets brackets-eslint Eclipse Tern-Linter-ESLint Emacs flycheck IDEA ESLint Plugin Sublime Text SublimeLinter-eslint vim ale vim Syntastic Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/typescript_eslint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/typescript_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript_eslint/#how-are-identified-applicable-files","text":"File extensions: .ts","title":"How are identified applicable files"},{"location":"descriptors/typescript_eslint/#example-calls","text":"eslint myfile.ts eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts","title":"Example calls"},{"location":"descriptors/typescript_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --rulesdir [path::String] Use additional rules from this directory --plugin [String] Specify plugins --rule Object Specify rules Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/typescript_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser","title":"Installation on mega-linter Docker image"},{"location":"descriptors/typescript_eslint/#example-success-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_eslint/ ----------------------------------------------- [SUCCESS] .automation/test/typescript/typescript_good_1.ts","title":"Example success log"},{"location":"descriptors/typescript_eslint/#example-error-log","text":"Results of eslint linter (version 7.15.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_eslint/ ----------------------------------------------- [ERROR] .automation/test/typescript/typescript_bad_1.ts .automation/test/typescript/typescript_bad_1.ts 5:39 error Parsing error: Unterminated regular expression literal \u2716 1 problem (1 error, 0 warnings)","title":"Example error log"},{"location":"descriptors/typescript_standard/","text":"standard documentation Version in Mega-Linter: 15.0.1 Visit Official Web Site See Index of problems detected by standard Configuration in Mega-Linter Enable standard by adding TYPESCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding TYPESCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TYPESCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_STANDARD_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use standard in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-js-standard Atom linter-js-standard-engine Atom standard-formatter Brackets brackets-standard IDEA native support Sublime Text SublimeLinter-contrib-standard Sublime Text StandardFormat Visual Studio Code https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 Behind the scenes How are identified applicable files File extensions: .ts Example calls standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin myfile.ts standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin --fix myfile.ts Help content standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, bundle.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems -v, --verbose Show rule names for errors (to ignore specific rules) --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint) Installation on mega-linter Docker image NPM packages (node.js): typescript standard@15.0.1 @typescript-eslint/eslint-plugin @typescript-eslint/parser Example success log Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_standard/ ----------------------------------------------- [SUCCESS] .automation/test/typescript/typescript_good_1.ts Example error log Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_standard/ ----------------------------------------------- [ERROR] .automation/test/typescript/typescript_bad_1.ts standard: Use JavaScript Standard Style (https://standardjs.com) .automation/test/typescript/typescript_bad_1.ts:5:39: Parsing error: Unterminated regular expression literal.","title":"standard"},{"location":"descriptors/typescript_standard/#standard-documentation","text":"Version in Mega-Linter: 15.0.1 Visit Official Web Site See Index of problems detected by standard","title":"standard documentation"},{"location":"descriptors/typescript_standard/#configuration-in-mega-linter","text":"Enable standard by adding TYPESCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding TYPESCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file TYPESCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_STANDARD_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/typescript_standard/#ide-integration","text":"Use standard in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Atom linter-js-standard Atom linter-js-standard-engine Atom standard-formatter Brackets brackets-standard IDEA native support Sublime Text SublimeLinter-contrib-standard Sublime Text StandardFormat Visual Studio Code https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs","title":"IDE Integration"},{"location":"descriptors/typescript_standard/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36","title":"Mega-Linter Flavours"},{"location":"descriptors/typescript_standard/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript_standard/#how-are-identified-applicable-files","text":"File extensions: .ts","title":"How are identified applicable files"},{"location":"descriptors/typescript_standard/#example-calls","text":"standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin myfile.ts standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin --fix myfile.ts","title":"Example calls"},{"location":"descriptors/typescript_standard/#help-content","text":"standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, bundle.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems -v, --verbose Show rule names for errors (to ignore specific rules) --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint)","title":"Help content"},{"location":"descriptors/typescript_standard/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript standard@15.0.1 @typescript-eslint/eslint-plugin @typescript-eslint/parser","title":"Installation on mega-linter Docker image"},{"location":"descriptors/typescript_standard/#example-success-log","text":"Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_standard/ ----------------------------------------------- [SUCCESS] .automation/test/typescript/typescript_good_1.ts","title":"Example success log"},{"location":"descriptors/typescript_standard/#example-error-log","text":"Results of standard linter (version 15.0.1) See documentation on https://nvuillam.github.io/mega-linter/descriptors/typescript_standard/ ----------------------------------------------- [ERROR] .automation/test/typescript/typescript_bad_1.ts standard: Use JavaScript Standard Style (https://standardjs.com) .automation/test/typescript/typescript_bad_1.ts:5:39: Parsing error: Unterminated regular expression literal.","title":"Example error log"},{"location":"descriptors/vbdotnet/","text":"Visual Basic .NET Linters Linter Configuration key dotnet-format VBDOTNET Linted files File extensions: .vb Configuration in Mega-Linter Variable Description Default value VBDOTNET_FILTER_REGEX_INCLUDE Custom regex including filter VBDOTNET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All Visual Basic .NET (VBDOTNET) linters"},{"location":"descriptors/vbdotnet/#visual-basic-net","text":"","title":"Visual Basic .NET"},{"location":"descriptors/vbdotnet/#linters","text":"Linter Configuration key dotnet-format VBDOTNET","title":"Linters"},{"location":"descriptors/vbdotnet/#linted-files","text":"File extensions: .vb","title":"Linted files"},{"location":"descriptors/vbdotnet/#configuration-in-mega-linter","text":"Variable Description Default value VBDOTNET_FILTER_REGEX_INCLUDE Custom regex including filter VBDOTNET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/vbdotnet_dotnet_format/","text":"dotnet-format dotnet-format documentation Version in Mega-Linter: 4.1.131201 Visit Official Web Site Configuration in Mega-Linter Enable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding VBDOTNET_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value VBDOTNET_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".vb\"] VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 Behind the scenes How are identified applicable files File extensions: .vb Example calls dotnet-format --folder --check --exclude / --include myfile.vb dotnet-format --folder --exclude / --include myfile.vb Help content dotnet-format: dotnet-format Usage: dotnet-format [options] [<project>] Arguments: <project> The solution or project file to operate on. If a file is not specified, the command will search the current directory for one. Options: -f, --folder <folder> Whether to treat the `<project>` path as a folder of files. [default: ] --files, --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: System.String[]] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: System.String[]] --check, --dry-run Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report> Accepts a file path, which if provided, will produce a json report in the given directory. [default: ] -v, --verbosity <verbosity> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --version Show version information -?, -h, --help Show help and usage information Installation on mega-linter Docker image None Example success log Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/vbdotnet_dotnet_format/ ----------------------------------------------- [SUCCESS] .automation/test/vbdotnet/vbdotnet_good_1.vb Formatting code files in workspace '.automation/test/vbdotnet'. Format complete in 1063ms. Example error log Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/vbdotnet_dotnet_format/ ----------------------------------------------- [ERROR] .automation/test/vbdotnet/vbdotnet_bad_1.vb Formatting code files in workspace '.automation/test/vbdotnet'. vbdotnet/vbdotnet_bad_1.vb(4,4): Fix whitespace formatting. vbdotnet/vbdotnet_bad_1.vb(4,20): Fix whitespace formatting. vbdotnet/vbdotnet_bad_1.vb(5,7): Fix whitespace formatting. Formatted code file '.automation/test/vbdotnet/vbdotnet_bad_1.vb'. Format complete in 1188ms.","title":"dotnet-format"},{"location":"descriptors/vbdotnet_dotnet_format/#dotnet-format","text":"","title":"dotnet-format"},{"location":"descriptors/vbdotnet_dotnet_format/#dotnet-format-documentation","text":"Version in Mega-Linter: 4.1.131201 Visit Official Web Site","title":"dotnet-format documentation"},{"location":"descriptors/vbdotnet_dotnet_format/#configuration-in-mega-linter","text":"Enable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding VBDOTNET_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value VBDOTNET_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".vb\"] VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/vbdotnet_dotnet_format/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35","title":"Mega-Linter Flavours"},{"location":"descriptors/vbdotnet_dotnet_format/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/vbdotnet_dotnet_format/#how-are-identified-applicable-files","text":"File extensions: .vb","title":"How are identified applicable files"},{"location":"descriptors/vbdotnet_dotnet_format/#example-calls","text":"dotnet-format --folder --check --exclude / --include myfile.vb dotnet-format --folder --exclude / --include myfile.vb","title":"Example calls"},{"location":"descriptors/vbdotnet_dotnet_format/#help-content","text":"dotnet-format: dotnet-format Usage: dotnet-format [options] [<project>] Arguments: <project> The solution or project file to operate on. If a file is not specified, the command will search the current directory for one. Options: -f, --folder <folder> Whether to treat the `<project>` path as a folder of files. [default: ] --files, --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: System.String[]] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: System.String[]] --check, --dry-run Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report> Accepts a file path, which if provided, will produce a json report in the given directory. [default: ] -v, --verbosity <verbosity> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --version Show version information -?, -h, --help Show help and usage information","title":"Help content"},{"location":"descriptors/vbdotnet_dotnet_format/#installation-on-mega-linter-docker-image","text":"None","title":"Installation on mega-linter Docker image"},{"location":"descriptors/vbdotnet_dotnet_format/#example-success-log","text":"Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/vbdotnet_dotnet_format/ ----------------------------------------------- [SUCCESS] .automation/test/vbdotnet/vbdotnet_good_1.vb Formatting code files in workspace '.automation/test/vbdotnet'. Format complete in 1063ms.","title":"Example success log"},{"location":"descriptors/vbdotnet_dotnet_format/#example-error-log","text":"Results of dotnet-format linter (version 4.1.131201) See documentation on https://nvuillam.github.io/mega-linter/descriptors/vbdotnet_dotnet_format/ ----------------------------------------------- [ERROR] .automation/test/vbdotnet/vbdotnet_bad_1.vb Formatting code files in workspace '.automation/test/vbdotnet'. vbdotnet/vbdotnet_bad_1.vb(4,4): Fix whitespace formatting. vbdotnet/vbdotnet_bad_1.vb(4,20): Fix whitespace formatting. vbdotnet/vbdotnet_bad_1.vb(5,7): Fix whitespace formatting. Formatted code file '.automation/test/vbdotnet/vbdotnet_bad_1.vb'. Format complete in 1188ms.","title":"Example error log"},{"location":"descriptors/xml/","text":"XML Linters Linter Configuration key xmllint XML Linted files File extensions: .xml Configuration in Mega-Linter Variable Description Default value XML_FILTER_REGEX_INCLUDE Custom regex including filter XML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All XML linters"},{"location":"descriptors/xml/#xml","text":"","title":"XML"},{"location":"descriptors/xml/#linters","text":"Linter Configuration key xmllint XML","title":"Linters"},{"location":"descriptors/xml/#linted-files","text":"File extensions: .xml","title":"Linted files"},{"location":"descriptors/xml/#configuration-in-mega-linter","text":"Variable Description Default value XML_FILTER_REGEX_INCLUDE Custom regex including filter XML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/xml_xmllint/","text":"xmllint xmllint documentation Version in Mega-Linter: 20910 Visit Official Web Site See Index of problems detected by xmllint Configuration in Mega-Linter Enable xmllint by adding XML_XMLLINT in ENABLE_LINTERS variable Disable xmllint by adding XML_XMLLINT in DISABLE_LINTERS variable Variable Description Default value XML_XMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" XML_XMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file XML_XMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file XML_XMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".xml\"] XML_XMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file XML_XMLLINT_DISABLE_ERRORS Run linter but disable crash if errors found false Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .xml Example calls xmllint myfile.xml Help content Unknown option --help Usage : xmllint [options] XMLfiles ... Parse the XML files and output the result of the parsing --version : display the version of the XML library used --debug : dump a debug tree of the in-memory document --shell : run a navigating shell --debugent : debug the entities defined in the document --copy : used to test the internal copy implementation --recover : output what was parsable on broken XML documents --huge : remove any internal arbitrary parser limits --noent : substitute entity references by their value --noenc : ignore any encoding specified inside the document --noout : don't output the result tree --path 'paths': provide a set of paths for resources --load-trace : print trace of all external entities loaded --nonet : refuse to fetch DTDs or entities over network --nocompact : do not generate compact text nodes --htmlout : output results as HTML --nowrap : do not put HTML doc wrapper --valid : validate the document in addition to std well-formed check --postvalid : do a posteriori validation, i.e after parsing --dtdvalid URL : do a posteriori validation against a given DTD --dtdvalidfpi FPI : same but name the DTD with a Public Identifier --timing : print some timings --output file or -o file: save to a given file --repeat : repeat 100 times, for timing or profiling --insert : ad-hoc test for valid insertions --compress : turn on gzip compression of output --html : use the HTML parser --xmlout : force to use the XML serializer when using --html --nodefdtd : do not default HTML doctype --push : use the push mode of the parser --pushsmall : use the push mode of the parser using tiny increments --memory : parse from memory --maxmem nbbytes : limits memory allocation to nbbytes bytes --nowarning : do not emit warnings from parser/validator --noblanks : drop (ignorable?) blanks spaces --nocdata : replace cdata section with text nodes --format : reformat/reindent the output --encode encoding : output in the given encoding --dropdtd : remove the DOCTYPE of the input docs --pretty STYLE : pretty-print in a particular style 0 Do not pretty print 1 Format the XML content, as --format 2 Add whitespace inside tags, preserving content --c14n : save in W3C canonical format v1.0 (with comments) --c14n11 : save in W3C canonical format v1.1 (with comments) --exc-c14n : save in W3C exclusive canonical format (with comments) --nsclean : remove redundant namespace declarations --testIO : test user I/O support --catalogs : use SGML catalogs from $SGML_CATALOG_FILES otherwise XML Catalogs starting from file:///etc/xml/catalog are activated by default --nocatalogs: deactivate all catalogs --auto : generate a small doc on the fly --xinclude : do XInclude processing --noxincludenode : same but do not generate XInclude nodes --nofixup-base-uris : do not fixup xml:base uris --loaddtd : fetch external DTD --dtdattr : loaddtd + populate the tree with inherited attributes --stream : use the streaming interface to process very large files --walker : create a reader and walk though the resulting doc --pattern pattern_value : test the pattern support --chkregister : verify the node registration code --relaxng schema : do RelaxNG validation against the schema --schema schema : do validation against the WXS schema --schematron schema : do validation against a schematron --sax1: use the old SAX1 interfaces for processing --sax: do not build a tree but work just at the SAX level --oldxml10: use XML-1.0 parsing rules before the 5th edition --xpath expr: evaluate the XPath expression, imply --noout Libxml project home page: http://xmlsoft.org/ To report bugs or get some help check: http://xmlsoft.org/bugs.html Installation on mega-linter Docker image APK packages (Linux): libc-dev libxml2-dev libxml2-utils libgcc Example success log Results of xmllint linter (version 20910) See documentation on https://nvuillam.github.io/mega-linter/descriptors/xml_xmllint/ ----------------------------------------------- [SUCCESS] .automation/test/xml/xml_good_1.xml <?xml version=\"1.0\"?> <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note> Example error log Results of xmllint linter (version 20910) See documentation on https://nvuillam.github.io/mega-linter/descriptors/xml_xmllint/ ----------------------------------------------- [ERROR] .automation/test/xml/xml_bad_1.xml .automation/test/xml/xml_bad_1.xml:7: parser error : EndTag: '</' not found ^","title":"xmllint"},{"location":"descriptors/xml_xmllint/#xmllint","text":"","title":"xmllint"},{"location":"descriptors/xml_xmllint/#xmllint-documentation","text":"Version in Mega-Linter: 20910 Visit Official Web Site See Index of problems detected by xmllint","title":"xmllint documentation"},{"location":"descriptors/xml_xmllint/#configuration-in-mega-linter","text":"Enable xmllint by adding XML_XMLLINT in ENABLE_LINTERS variable Disable xmllint by adding XML_XMLLINT in DISABLE_LINTERS variable Variable Description Default value XML_XMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" XML_XMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file XML_XMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file XML_XMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".xml\"] XML_XMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file XML_XMLLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/xml_xmllint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/xml_xmllint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/xml_xmllint/#how-are-identified-applicable-files","text":"File extensions: .xml","title":"How are identified applicable files"},{"location":"descriptors/xml_xmllint/#example-calls","text":"xmllint myfile.xml","title":"Example calls"},{"location":"descriptors/xml_xmllint/#help-content","text":"Unknown option --help Usage : xmllint [options] XMLfiles ... Parse the XML files and output the result of the parsing --version : display the version of the XML library used --debug : dump a debug tree of the in-memory document --shell : run a navigating shell --debugent : debug the entities defined in the document --copy : used to test the internal copy implementation --recover : output what was parsable on broken XML documents --huge : remove any internal arbitrary parser limits --noent : substitute entity references by their value --noenc : ignore any encoding specified inside the document --noout : don't output the result tree --path 'paths': provide a set of paths for resources --load-trace : print trace of all external entities loaded --nonet : refuse to fetch DTDs or entities over network --nocompact : do not generate compact text nodes --htmlout : output results as HTML --nowrap : do not put HTML doc wrapper --valid : validate the document in addition to std well-formed check --postvalid : do a posteriori validation, i.e after parsing --dtdvalid URL : do a posteriori validation against a given DTD --dtdvalidfpi FPI : same but name the DTD with a Public Identifier --timing : print some timings --output file or -o file: save to a given file --repeat : repeat 100 times, for timing or profiling --insert : ad-hoc test for valid insertions --compress : turn on gzip compression of output --html : use the HTML parser --xmlout : force to use the XML serializer when using --html --nodefdtd : do not default HTML doctype --push : use the push mode of the parser --pushsmall : use the push mode of the parser using tiny increments --memory : parse from memory --maxmem nbbytes : limits memory allocation to nbbytes bytes --nowarning : do not emit warnings from parser/validator --noblanks : drop (ignorable?) blanks spaces --nocdata : replace cdata section with text nodes --format : reformat/reindent the output --encode encoding : output in the given encoding --dropdtd : remove the DOCTYPE of the input docs --pretty STYLE : pretty-print in a particular style 0 Do not pretty print 1 Format the XML content, as --format 2 Add whitespace inside tags, preserving content --c14n : save in W3C canonical format v1.0 (with comments) --c14n11 : save in W3C canonical format v1.1 (with comments) --exc-c14n : save in W3C exclusive canonical format (with comments) --nsclean : remove redundant namespace declarations --testIO : test user I/O support --catalogs : use SGML catalogs from $SGML_CATALOG_FILES otherwise XML Catalogs starting from file:///etc/xml/catalog are activated by default --nocatalogs: deactivate all catalogs --auto : generate a small doc on the fly --xinclude : do XInclude processing --noxincludenode : same but do not generate XInclude nodes --nofixup-base-uris : do not fixup xml:base uris --loaddtd : fetch external DTD --dtdattr : loaddtd + populate the tree with inherited attributes --stream : use the streaming interface to process very large files --walker : create a reader and walk though the resulting doc --pattern pattern_value : test the pattern support --chkregister : verify the node registration code --relaxng schema : do RelaxNG validation against the schema --schema schema : do validation against the WXS schema --schematron schema : do validation against a schematron --sax1: use the old SAX1 interfaces for processing --sax: do not build a tree but work just at the SAX level --oldxml10: use XML-1.0 parsing rules before the 5th edition --xpath expr: evaluate the XPath expression, imply --noout Libxml project home page: http://xmlsoft.org/ To report bugs or get some help check: http://xmlsoft.org/bugs.html","title":"Help content"},{"location":"descriptors/xml_xmllint/#installation-on-mega-linter-docker-image","text":"APK packages (Linux): libc-dev libxml2-dev libxml2-utils libgcc","title":"Installation on mega-linter Docker image"},{"location":"descriptors/xml_xmllint/#example-success-log","text":"Results of xmllint linter (version 20910) See documentation on https://nvuillam.github.io/mega-linter/descriptors/xml_xmllint/ ----------------------------------------------- [SUCCESS] .automation/test/xml/xml_good_1.xml <?xml version=\"1.0\"?> <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note>","title":"Example success log"},{"location":"descriptors/xml_xmllint/#example-error-log","text":"Results of xmllint linter (version 20910) See documentation on https://nvuillam.github.io/mega-linter/descriptors/xml_xmllint/ ----------------------------------------------- [ERROR] .automation/test/xml/xml_bad_1.xml .automation/test/xml/xml_bad_1.xml:7: parser error : EndTag: '</' not found ^","title":"Example error log"},{"location":"descriptors/yaml/","text":"YAML Linters Linter Configuration key yamllint YAML Linted files File extensions: .yml .yaml Configuration in Mega-Linter Variable Description Default value YAML_FILTER_REGEX_INCLUDE Custom regex including filter YAML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All YAML linters"},{"location":"descriptors/yaml/#yaml","text":"","title":"YAML"},{"location":"descriptors/yaml/#linters","text":"Linter Configuration key yamllint YAML","title":"Linters"},{"location":"descriptors/yaml/#linted-files","text":"File extensions: .yml .yaml","title":"Linted files"},{"location":"descriptors/yaml/#configuration-in-mega-linter","text":"Variable Description Default value YAML_FILTER_REGEX_INCLUDE Custom regex including filter YAML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in Mega-Linter"},{"location":"descriptors/yaml_yamllint/","text":"yamllint yamllint documentation Version in Mega-Linter: 1.25.0 Visit Official Web Site See How to configure yamllint rules If custom .yaml-lint.yml is not found, .yaml-lint.yml will be used See Index of problems detected by yamllint Configuration in Mega-Linter Enable yamllint by adding YAML_YAMLLINT in ENABLE_LINTERS variable Disable yamllint by adding YAML_YAMLLINT in DISABLE_LINTERS variable Variable Description Default value YAML_YAMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_YAMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file YAML_YAMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file YAML_YAMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_YAMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_YAMLLINT_FILE_NAME yamllint configuration file name Use LINTER_DEFAULT to let the linter find it .yaml-lint.yml YAML_YAMLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules YAML_YAMLLINT_DISABLE_ERRORS Run linter but disable crash if errors found false IDE Integration Use yamllint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Emacs flycheck vim ale Mega-Linter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32 Behind the scenes How are identified applicable files File extensions: .yml .yaml Example calls yamllint myfile.yaml yamllint -c .yaml-lint.yml myfile.yaml Help content usage: yamllint [-h] [-] [-c CONFIG_FILE | -d CONFIG_DATA] [-f {parsable,standard,colored,github,auto}] [-s] [--no-warnings] [-v] [FILE_OR_DIR [FILE_OR_DIR ...]] A linter for YAML files. yamllint does not only check for syntax validity, but for weirdnesses like key repetition and cosmetic problems such as lines length, trailing spaces, indentation, etc. positional arguments: FILE_OR_DIR files to check optional arguments: -h, --help show this help message and exit - read from standard input -c CONFIG_FILE, --config-file CONFIG_FILE path to a custom configuration -d CONFIG_DATA, --config-data CONFIG_DATA custom configuration (as YAML source) -f {parsable,standard,colored,github,auto}, --format {parsable,standard,colored,github,auto} format for parsing output -s, --strict return non-zero exit code on warnings as well as errors --no-warnings output only error level problems -v, --version show program's version number and exit Installation on mega-linter Docker image PIP packages (Python): yamllint Example success log Results of yamllint linter (version 1.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/yaml_yamllint/ ----------------------------------------------- [SUCCESS] .automation/test/yaml/yml_good_1.yml Example error log Results of yamllint linter (version 1.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/yaml_yamllint/ ----------------------------------------------- [ERROR] .automation/test/yaml/yml_bad_1.yml .automation/test/yaml/yml_bad_1.yml 10:1 warning missing document start \"---\" (document-start) 11:16 error syntax error: mapping values are not allowed here (syntax)","title":"yamllint"},{"location":"descriptors/yaml_yamllint/#yamllint","text":"","title":"yamllint"},{"location":"descriptors/yaml_yamllint/#yamllint-documentation","text":"Version in Mega-Linter: 1.25.0 Visit Official Web Site See How to configure yamllint rules If custom .yaml-lint.yml is not found, .yaml-lint.yml will be used See Index of problems detected by yamllint","title":"yamllint documentation"},{"location":"descriptors/yaml_yamllint/#configuration-in-mega-linter","text":"Enable yamllint by adding YAML_YAMLLINT in ENABLE_LINTERS variable Disable yamllint by adding YAML_YAMLLINT in DISABLE_LINTERS variable Variable Description Default value YAML_YAMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_YAMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file YAML_YAMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file YAML_YAMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_YAMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_YAMLLINT_FILE_NAME yamllint configuration file name Use LINTER_DEFAULT to let the linter find it .yaml-lint.yml YAML_YAMLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then Mega-Linter default rules YAML_YAMLLINT_DISABLE_ERRORS Run linter but disable crash if errors found false","title":"Configuration in Mega-Linter"},{"location":"descriptors/yaml_yamllint/#ide-integration","text":"Use yamllint in your favorite IDE to catch errors before Mega-Linter ! IDE Extension Name Emacs flycheck vim ale","title":"IDE Integration"},{"location":"descriptors/yaml_yamllint/#mega-linter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default Mega-Linter Flavor 72 dart Mega-Linter optimized for DART based projects 30 dotnet Mega-Linter optimized for C, C++, C# or VB based projects 35 go Mega-Linter optimized for GO based projects 30 java Mega-Linter optimized for JAVA based projects 30 javascript Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects 36 php Mega-Linter optimized for PHP based projects 33 python Mega-Linter optimized for PYTHON based projects 36 ruby Mega-Linter optimized for RUBY based projects 30 rust Mega-Linter optimized for RUST based projects 30 scala Mega-Linter optimized for SCALA based projects 30 terraform Mega-Linter optimized for TERRAFORM based projects 32","title":"Mega-Linter Flavours"},{"location":"descriptors/yaml_yamllint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/yaml_yamllint/#how-are-identified-applicable-files","text":"File extensions: .yml .yaml","title":"How are identified applicable files"},{"location":"descriptors/yaml_yamllint/#example-calls","text":"yamllint myfile.yaml yamllint -c .yaml-lint.yml myfile.yaml","title":"Example calls"},{"location":"descriptors/yaml_yamllint/#help-content","text":"usage: yamllint [-h] [-] [-c CONFIG_FILE | -d CONFIG_DATA] [-f {parsable,standard,colored,github,auto}] [-s] [--no-warnings] [-v] [FILE_OR_DIR [FILE_OR_DIR ...]] A linter for YAML files. yamllint does not only check for syntax validity, but for weirdnesses like key repetition and cosmetic problems such as lines length, trailing spaces, indentation, etc. positional arguments: FILE_OR_DIR files to check optional arguments: -h, --help show this help message and exit - read from standard input -c CONFIG_FILE, --config-file CONFIG_FILE path to a custom configuration -d CONFIG_DATA, --config-data CONFIG_DATA custom configuration (as YAML source) -f {parsable,standard,colored,github,auto}, --format {parsable,standard,colored,github,auto} format for parsing output -s, --strict return non-zero exit code on warnings as well as errors --no-warnings output only error level problems -v, --version show program's version number and exit","title":"Help content"},{"location":"descriptors/yaml_yamllint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): yamllint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/yaml_yamllint/#example-success-log","text":"Results of yamllint linter (version 1.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/yaml_yamllint/ ----------------------------------------------- [SUCCESS] .automation/test/yaml/yml_good_1.yml","title":"Example success log"},{"location":"descriptors/yaml_yamllint/#example-error-log","text":"Results of yamllint linter (version 1.25.0) See documentation on https://nvuillam.github.io/mega-linter/descriptors/yaml_yamllint/ ----------------------------------------------- [ERROR] .automation/test/yaml/yml_bad_1.yml .automation/test/yaml/yml_bad_1.yml 10:1 warning missing document start \"---\" (document-start) 11:16 error syntax error: mapping values are not allowed here (syntax)","title":"Example error log"},{"location":"flavors/dart/","text":"dart Mega-Linter Flavor Description Mega-Linter optimized for DART based projects Usage GitHub Action : nvuillam/mega-linter/flavors/dart@v4 Docker image: nvuillam/mega-linter-dart:v4 mega-linter-runner : mega-linter-runner --flavor dart Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT DART dartanalyzer DART_DARTANALYZER GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"dart"},{"location":"flavors/dart/#dart-mega-linter-flavor","text":"","title":"dart Mega-Linter Flavor"},{"location":"flavors/dart/#description","text":"Mega-Linter optimized for DART based projects","title":"Description"},{"location":"flavors/dart/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/dart@v4 Docker image: nvuillam/mega-linter-dart:v4 mega-linter-runner : mega-linter-runner --flavor dart","title":"Usage"},{"location":"flavors/dart/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/dart/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT DART dartanalyzer DART_DARTANALYZER GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/dart/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/dart/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/dart/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/dotnet/","text":"dotnet Mega-Linter Flavor Description Mega-Linter optimized for C, C++, C# or VB based projects Usage GitHub Action : nvuillam/mega-linter/flavors/dotnet@v4 Docker image: nvuillam/mega-linter-dotnet:v4 mega-linter-runner : mega-linter-runner --flavor dotnet Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT POWERSHELL powershell POWERSHELL_POWERSHELL SQL sql-lint SQL_SQL_LINT Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"dotnet"},{"location":"flavors/dotnet/#dotnet-mega-linter-flavor","text":"","title":"dotnet Mega-Linter Flavor"},{"location":"flavors/dotnet/#description","text":"Mega-Linter optimized for C, C++, C# or VB based projects","title":"Description"},{"location":"flavors/dotnet/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/dotnet@v4 Docker image: nvuillam/mega-linter-dotnet:v4 mega-linter-runner : mega-linter-runner --flavor dotnet","title":"Usage"},{"location":"flavors/dotnet/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/dotnet/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT POWERSHELL powershell POWERSHELL_POWERSHELL SQL sql-lint SQL_SQL_LINT Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT","title":"Languages"},{"location":"flavors/dotnet/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/dotnet/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/dotnet/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/go/","text":"go Mega-Linter Flavor Description Mega-Linter optimized for GO based projects Usage GitHub Action : nvuillam/mega-linter/flavors/go@v4 Docker image: nvuillam/mega-linter-go:v4 mega-linter-runner : mega-linter-runner --flavor go Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GO golangci-lint GO_GOLANGCI_LINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"go"},{"location":"flavors/go/#go-mega-linter-flavor","text":"","title":"go Mega-Linter Flavor"},{"location":"flavors/go/#description","text":"Mega-Linter optimized for GO based projects","title":"Description"},{"location":"flavors/go/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/go@v4 Docker image: nvuillam/mega-linter-go:v4 mega-linter-runner : mega-linter-runner --flavor go","title":"Usage"},{"location":"flavors/go/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/go/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GO golangci-lint GO_GOLANGCI_LINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/go/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/go/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/go/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/java/","text":"java Mega-Linter Flavor Description Mega-Linter optimized for JAVA based projects Usage GitHub Action : nvuillam/mega-linter/flavors/java@v4 Docker image: nvuillam/mega-linter-java:v4 mega-linter-runner : mega-linter-runner --flavor java Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"java"},{"location":"flavors/java/#java-mega-linter-flavor","text":"","title":"java Mega-Linter Flavor"},{"location":"flavors/java/#description","text":"Mega-Linter optimized for JAVA based projects","title":"Description"},{"location":"flavors/java/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/java@v4 Docker image: nvuillam/mega-linter-java:v4 mega-linter-runner : mega-linter-runner --flavor java","title":"Usage"},{"location":"flavors/java/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/java/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/java/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/java/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/java/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/javascript/","text":"javascript Mega-Linter Flavor Description Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects Usage GitHub Action : nvuillam/mega-linter/flavors/javascript@v4 Docker image: nvuillam/mega-linter-javascript:v4 mega-linter-runner : mega-linter-runner --flavor javascript Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT COFFEE coffeelint COFFEE_COFFEELINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"javascript"},{"location":"flavors/javascript/#javascript-mega-linter-flavor","text":"","title":"javascript Mega-Linter Flavor"},{"location":"flavors/javascript/#description","text":"Mega-Linter optimized for JAVASCRIPT or TYPESCRIPT based projects","title":"Description"},{"location":"flavors/javascript/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/javascript@v4 Docker image: nvuillam/mega-linter-javascript:v4 mega-linter-runner : mega-linter-runner --flavor javascript","title":"Usage"},{"location":"flavors/javascript/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/javascript/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT COFFEE coffeelint COFFEE_COFFEELINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD","title":"Languages"},{"location":"flavors/javascript/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/javascript/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/javascript/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/php/","text":"php Mega-Linter Flavor Description Mega-Linter optimized for PHP based projects Usage GitHub Action : nvuillam/mega-linter/flavors/php@v4 Docker image: nvuillam/mega-linter-php:v4 mega-linter-runner : mega-linter-runner --flavor php Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT PHP php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"php"},{"location":"flavors/php/#php-mega-linter-flavor","text":"","title":"php Mega-Linter Flavor"},{"location":"flavors/php/#description","text":"Mega-Linter optimized for PHP based projects","title":"Description"},{"location":"flavors/php/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/php@v4 Docker image: nvuillam/mega-linter-php:v4 mega-linter-runner : mega-linter-runner --flavor php","title":"Usage"},{"location":"flavors/php/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/php/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT PHP php PHP_BUILTIN phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/php/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/php/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/php/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/python/","text":"python Mega-Linter Flavor Description Mega-Linter optimized for PYTHON based projects Usage GitHub Action : nvuillam/mega-linter/flavors/python@v4 Docker image: nvuillam/mega-linter-python:v4 mega-linter-runner : mega-linter-runner --flavor python Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK rstfmt RST_RSTFMT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"python"},{"location":"flavors/python/#python-mega-linter-flavor","text":"","title":"python Mega-Linter Flavor"},{"location":"flavors/python/#description","text":"Mega-Linter optimized for PYTHON based projects","title":"Description"},{"location":"flavors/python/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/python@v4 Docker image: nvuillam/mega-linter-python:v4 mega-linter-runner : mega-linter-runner --flavor python","title":"Usage"},{"location":"flavors/python/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/python/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/python/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK rstfmt RST_RSTFMT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/python/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/python/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/ruby/","text":"ruby Mega-Linter Flavor Description Mega-Linter optimized for RUBY based projects Usage GitHub Action : nvuillam/mega-linter/flavors/ruby@v4 Docker image: nvuillam/mega-linter-ruby:v4 mega-linter-runner : mega-linter-runner --flavor ruby Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUBY rubocop RUBY_RUBOCOP SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"ruby"},{"location":"flavors/ruby/#ruby-mega-linter-flavor","text":"","title":"ruby Mega-Linter Flavor"},{"location":"flavors/ruby/#description","text":"Mega-Linter optimized for RUBY based projects","title":"Description"},{"location":"flavors/ruby/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/ruby@v4 Docker image: nvuillam/mega-linter-ruby:v4 mega-linter-runner : mega-linter-runner --flavor ruby","title":"Usage"},{"location":"flavors/ruby/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/ruby/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUBY rubocop RUBY_RUBOCOP SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/ruby/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/ruby/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/ruby/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/rust/","text":"rust Mega-Linter Flavor Description Mega-Linter optimized for RUST based projects Usage GitHub Action : nvuillam/mega-linter/flavors/rust@v4 Docker image: nvuillam/mega-linter-rust:v4 mega-linter-runner : mega-linter-runner --flavor rust Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUST clippy RUST_CLIPPY SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"rust"},{"location":"flavors/rust/#rust-mega-linter-flavor","text":"","title":"rust Mega-Linter Flavor"},{"location":"flavors/rust/#description","text":"Mega-Linter optimized for RUST based projects","title":"Description"},{"location":"flavors/rust/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/rust@v4 Docker image: nvuillam/mega-linter-rust:v4 mega-linter-runner : mega-linter-runner --flavor rust","title":"Usage"},{"location":"flavors/rust/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/rust/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUST clippy RUST_CLIPPY SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/rust/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/rust/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/rust/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/scala/","text":"scala Mega-Linter Flavor Description Mega-Linter optimized for SCALA based projects Usage GitHub Action : nvuillam/mega-linter/flavors/scala@v4 Docker image: nvuillam/mega-linter-scala:v4 mega-linter-runner : mega-linter-runner --flavor scala Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"scala"},{"location":"flavors/scala/#scala-mega-linter-flavor","text":"","title":"scala Mega-Linter Flavor"},{"location":"flavors/scala/#description","text":"Mega-Linter optimized for SCALA based projects","title":"Description"},{"location":"flavors/scala/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/scala@v4 Docker image: nvuillam/mega-linter-scala:v4 mega-linter-runner : mega-linter-runner --flavor scala","title":"Usage"},{"location":"flavors/scala/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/scala/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/scala/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/scala/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/scala/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"flavors/terraform/","text":"terraform Mega-Linter Flavor Description Mega-Linter optimized for TERRAFORM based projects Usage GitHub Action : nvuillam/mega-linter/flavors/terraform@v4 Docker image: nvuillam/mega-linter-terraform:v4 mega-linter-runner : mega-linter-runner --flavor terraform Embedded linters Languages Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT Formats Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT Tooling formats Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT Other Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"terraform"},{"location":"flavors/terraform/#terraform-mega-linter-flavor","text":"","title":"terraform Mega-Linter Flavor"},{"location":"flavors/terraform/#description","text":"Mega-Linter optimized for TERRAFORM based projects","title":"Description"},{"location":"flavors/terraform/#usage","text":"GitHub Action : nvuillam/mega-linter/flavors/terraform@v4 Docker image: nvuillam/mega-linter-terraform:v4 mega-linter-runner : mega-linter-runner --flavor terraform","title":"Usage"},{"location":"flavors/terraform/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/terraform/#languages","text":"Language Linter Configuration key Fix BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT","title":"Languages"},{"location":"flavors/terraform/#formats","text":"Format Linter Configuration key Fix CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML yamllint YAML_YAMLLINT","title":"Formats"},{"location":"flavors/terraform/#tooling-formats","text":"Tooling format Linter Configuration key Fix ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE dockerfilelint DOCKERFILE_DOCKERFILELINT hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT","title":"Tooling formats"},{"location":"flavors/terraform/#other","text":"Code quality checker Linter Configuration key Fix COPYPASTE jscpd COPYPASTE_JSCPD GIT git_diff GIT_GIT_DIFF SPELL cspell SPELL_CSPELL","title":"Other"},{"location":"reporters/ConsoleReporter/","text":"Console Reporter Posts Mega-Linter results execution logs in the console Usage Open GitHub action (or other CI tool) logs and look in Mega-Linter step Configuration Console reporter is always activated","title":"Console"},{"location":"reporters/ConsoleReporter/#console-reporter","text":"Posts Mega-Linter results execution logs in the console","title":"Console Reporter"},{"location":"reporters/ConsoleReporter/#usage","text":"Open GitHub action (or other CI tool) logs and look in Mega-Linter step","title":"Usage"},{"location":"reporters/ConsoleReporter/#configuration","text":"Console reporter is always activated","title":"Configuration"},{"location":"reporters/EmailReporter/","text":"E-mail Reporter IF you don't use artifacts upload to read Mega-Linter reports, you can receive them by e-mail Usage Define related variables below allowing to send e-mails. To use with a gmail account, you have to previously follow these steps Reports are sent to the defined e-mail address at the end of each Mega-Linter run Configuration Variable Description Default value EMAIL_REPORTER Activates/deactivates reporter true EMAIL_REPORTER_EMAIL Comma-separated list of recipient emails, that will receive reports EMAIL_REPORTER_SEND_SUCCESS Define to true if you want to receive reports by mail even when there is no errors or updated sources false EMAIL_REPORTER_SENDER Sender of emails megalinter@gmail.com EMAIL_REPORTER_SMTP_HOST SMTP server host smtp.gmail.com EMAIL_REPORTER_SMTP_PORT SMTP server port 465 EMAIL_REPORTER_SMTP_USERNAME SMTP server username megalinter@gmail.com EMAIL_REPORTER_SMTP_PASSWORD SMTP server password. Never hardcode it in a config variable, use secrets and context variables","title":"E-mail"},{"location":"reporters/EmailReporter/#e-mail-reporter","text":"IF you don't use artifacts upload to read Mega-Linter reports, you can receive them by e-mail","title":"E-mail Reporter"},{"location":"reporters/EmailReporter/#usage","text":"Define related variables below allowing to send e-mails. To use with a gmail account, you have to previously follow these steps Reports are sent to the defined e-mail address at the end of each Mega-Linter run","title":"Usage"},{"location":"reporters/EmailReporter/#configuration","text":"Variable Description Default value EMAIL_REPORTER Activates/deactivates reporter true EMAIL_REPORTER_EMAIL Comma-separated list of recipient emails, that will receive reports EMAIL_REPORTER_SEND_SUCCESS Define to true if you want to receive reports by mail even when there is no errors or updated sources false EMAIL_REPORTER_SENDER Sender of emails megalinter@gmail.com EMAIL_REPORTER_SMTP_HOST SMTP server host smtp.gmail.com EMAIL_REPORTER_SMTP_PORT SMTP server port 465 EMAIL_REPORTER_SMTP_USERNAME SMTP server username megalinter@gmail.com EMAIL_REPORTER_SMTP_PASSWORD SMTP server password. Never hardcode it in a config variable, use secrets and context variables","title":"Configuration"},{"location":"reporters/FileIoReporter/","text":"File.io Reporter IF you don't use artifacts upload to read Mega-Linter reports, you can access them with an hyperlink to file.io important : Mega-Linter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically) This reporter is deactivated by default . Usage Activate the reporter ( FILEIO_REPORTER: true ) to see link to reports zip on file.io Get the file.io hyperlink at the end of Mega-linter console output Download file on file.io: it is immediately deleted on the server so it can be downloaded only once Browse reports Configuration Variable Description Default value FILEIO_REPORTER Activates/deactivates reporter false","title":"File.io"},{"location":"reporters/FileIoReporter/#fileio-reporter","text":"IF you don't use artifacts upload to read Mega-Linter reports, you can access them with an hyperlink to file.io important : Mega-Linter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically) This reporter is deactivated by default .","title":"File.io Reporter"},{"location":"reporters/FileIoReporter/#usage","text":"Activate the reporter ( FILEIO_REPORTER: true ) to see link to reports zip on file.io Get the file.io hyperlink at the end of Mega-linter console output Download file on file.io: it is immediately deleted on the server so it can be downloaded only once Browse reports","title":"Usage"},{"location":"reporters/FileIoReporter/#configuration","text":"Variable Description Default value FILEIO_REPORTER Activates/deactivates reporter false","title":"Configuration"},{"location":"reporters/GitHubCommentReporter/","text":"GitHub Comment Reporter Posts Mega-Linter results summary in the comments of the related pull request (if existing) Usage Click on hyperlinks to access detailed logs Configuration Variable Description Default value GITHUB_COMMENT_REPORTER Activates/deactivates reporter true","title":"Pull Request comments"},{"location":"reporters/GitHubCommentReporter/#github-comment-reporter","text":"Posts Mega-Linter results summary in the comments of the related pull request (if existing)","title":"GitHub Comment Reporter"},{"location":"reporters/GitHubCommentReporter/#usage","text":"Click on hyperlinks to access detailed logs","title":"Usage"},{"location":"reporters/GitHubCommentReporter/#configuration","text":"Variable Description Default value GITHUB_COMMENT_REPORTER Activates/deactivates reporter true","title":"Configuration"},{"location":"reporters/GitHubStatusReporter/","text":"GitHub Status Reporter Posts a status on the pull request for each processed linter Usage Click on Details to access detailed logs Configuration Variable Description Default value GITHUB_STATUS_REPORTER Activates/deactivates reporter true","title":"GitHub Status"},{"location":"reporters/GitHubStatusReporter/#github-status-reporter","text":"Posts a status on the pull request for each processed linter","title":"GitHub Status Reporter"},{"location":"reporters/GitHubStatusReporter/#usage","text":"Click on Details to access detailed logs","title":"Usage"},{"location":"reporters/GitHubStatusReporter/#configuration","text":"Variable Description Default value GITHUB_STATUS_REPORTER Activates/deactivates reporter true","title":"Configuration"},{"location":"reporters/TapReporter/","text":"TAP Reporter Posts a pack of TAP logs , zipped as a GitHub Action artifact - A separate TAP file for each processed linter Usage Access GitHub action run Click on Artifacts then click on Mega-Linter reports Open the downloaded zip file and browse linters TAP reports Other CI tools If you are not using GitHub Actions, you can export mega-linter.log and folder <WORKSPACE>/report Configuration Variable Description Default value TAP_REPORTER Activates/deactivates reporter true TAP_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs tap","title":"TAP files"},{"location":"reporters/TapReporter/#tap-reporter","text":"Posts a pack of TAP logs , zipped as a GitHub Action artifact - A separate TAP file for each processed linter","title":"TAP Reporter"},{"location":"reporters/TapReporter/#usage","text":"Access GitHub action run Click on Artifacts then click on Mega-Linter reports Open the downloaded zip file and browse linters TAP reports","title":"Usage"},{"location":"reporters/TapReporter/#other-ci-tools","text":"If you are not using GitHub Actions, you can export mega-linter.log and folder <WORKSPACE>/report","title":"Other CI tools"},{"location":"reporters/TapReporter/#configuration","text":"Variable Description Default value TAP_REPORTER Activates/deactivates reporter true TAP_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs tap","title":"Configuration"},{"location":"reporters/TextReporter/","text":"Text Reporter Posts a pack of text logs , zipped as a GitHub Action artifact General execution log mega-linter.log (same as ConsoleReporter log) A separate log file for each processed linter Usage Access GitHub action run Click on Artifacts then click on Mega-Linter reports Open the downloaded zip file and browse linters_logs folder for reports Other CI tools If you are not using GitHub Actions, you can export mega-linter.log and folder <WORKSPACE>/report Configuration Variable Description Default value TEXT_REPORTER Activates/deactivates reporter true TEXT_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs text","title":"Text files"},{"location":"reporters/TextReporter/#text-reporter","text":"Posts a pack of text logs , zipped as a GitHub Action artifact General execution log mega-linter.log (same as ConsoleReporter log) A separate log file for each processed linter","title":"Text Reporter"},{"location":"reporters/TextReporter/#usage","text":"Access GitHub action run Click on Artifacts then click on Mega-Linter reports Open the downloaded zip file and browse linters_logs folder for reports","title":"Usage"},{"location":"reporters/TextReporter/#other-ci-tools","text":"If you are not using GitHub Actions, you can export mega-linter.log and folder <WORKSPACE>/report","title":"Other CI tools"},{"location":"reporters/TextReporter/#configuration","text":"Variable Description Default value TEXT_REPORTER Activates/deactivates reporter true TEXT_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs text","title":"Configuration"},{"location":"reporters/UpdatedSourcesReporter/","text":"Updated Sources Reporter Posts a pack of files containing only the source files fixed by linters This folder can be unpacked to currently repository to apply automated fixes on the repository Usage Access GitHub action run Click on Artifacts then click on Mega-Linter reports Open the downloaded zip file and copy the content of folder updated_sources Paste the result in your repository Other CI tools If you are not using GitHub Actions, you can: use File.io Reporter : Updated sources folder will be in the downloadable reports zip use Email Reporter : Updated source folder will be in the email attachment reports zip publish folder <WORKSPACE>/report/updated_sources as artifact with your CI tool Configuration Variable Description Default value UPDATED_SOURCES_REPORTER Activates/deactivates reporter true UPDATED_SOURCES_REPORTER_DIR Sub-folder of reports folder containing updated sources updated_sources","title":"Updated sources"},{"location":"reporters/UpdatedSourcesReporter/#updated-sources-reporter","text":"Posts a pack of files containing only the source files fixed by linters This folder can be unpacked to currently repository to apply automated fixes on the repository","title":"Updated Sources Reporter"},{"location":"reporters/UpdatedSourcesReporter/#usage","text":"Access GitHub action run Click on Artifacts then click on Mega-Linter reports Open the downloaded zip file and copy the content of folder updated_sources Paste the result in your repository","title":"Usage"},{"location":"reporters/UpdatedSourcesReporter/#other-ci-tools","text":"If you are not using GitHub Actions, you can: use File.io Reporter : Updated sources folder will be in the downloadable reports zip use Email Reporter : Updated source folder will be in the email attachment reports zip publish folder <WORKSPACE>/report/updated_sources as artifact with your CI tool","title":"Other CI tools"},{"location":"reporters/UpdatedSourcesReporter/#configuration","text":"Variable Description Default value UPDATED_SOURCES_REPORTER Activates/deactivates reporter true UPDATED_SOURCES_REPORTER_DIR Sub-folder of reports folder containing updated sources updated_sources","title":"Configuration"}]}